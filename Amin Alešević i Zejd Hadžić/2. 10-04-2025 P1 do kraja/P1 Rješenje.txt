#include <iostream>
using namespace std;


// POKAZIVACI 

// 1. ALOKACIJA ---> new 

// ako nam treba jedna vrijednst ( ) 

// ako nam treba vise vrijednosti [ ] 

// 2. DEFERENCIRANJE ( ISPIS , KOPIRANJA )

// ako je nesto jedna vrijednost ( ) ---> _ECTS = 000001A699398140,
// *_ECTS = 0 

// ako je nesto niz [ ] --> ne treba dodavati * ispred

// 3. DEALOACIRANJE / DESTRUKTOR 

// DELETE 

// ako je nesto jedna vrijednost ( ) ---> delete _ECTS;

// ako je nesto niz [ ] --> delete[] _naziv;

// NULLPTR svejedno da li je niz ili nije 

// _ECTS = nullptr;


class Predmet {
public:				// DFT. CONSTR. //
	char* _naziv;  	// Nema naziva	//
	int _ocjena;	//     5		//
	int* _ECTS;		//     0		//


	// defaultni constructor

	Predmet() {

		_ocjena = 5;

		_ECTS = new int(0);

		//char dftNaziv[] = "Nema naziva";
		const char* dftNaziv2 = "Nema naziva";

		int vel = strlen(dftNaziv2) + 1;  // 11 

		_naziv = new char[vel];

		strcpy_s(_naziv, vel, dftNaziv2); // 1. gdje pohranjujemo , 2. koliko slova pohranjujemo , 3. sta pohranjujemo


	}

	// obicni, user-def constr.

	// 	Predmet predmet1("Pogramiranje II", 9, 7); 

	Predmet(const char* naziv, int ocjena, int ects) {

		_ocjena = ocjena;

		_ECTS = new int(ects);

		int vel = strlen(naziv) + 1;

		_naziv = new char[vel];

		strcpy_s(_naziv, vel, naziv);


	}

	// copy constr.

	//Predmet predmetKopija2(predmet1); // copy constr. 

	// & znaci da se koristi original 
	// const --> 

	Predmet(const Predmet& predmet) { // napravial kopija 

		_ocjena = predmet._ocjena;

		_ECTS = new int(*predmet._ECTS);

		int vel = strlen(predmet._naziv) + 1;

		_naziv = new char[vel];

		strcpy_s(_naziv, vel, predmet._naziv);


	}


	// operator dodjele
	// predmetOperatorDodjele = predmet1; // <---- operator dodjele 



	Predmet& operator = (const Predmet& predmet) {

		if (this != &predmet) {

			delete _ECTS;
			delete[] _naziv;

			_ocjena = predmet._ocjena;

			_ECTS = new int(*predmet._ECTS);

			int vel = strlen(predmet._naziv) + 1;

			_naziv = new char[vel];

			strcpy_s(_naziv, vel, predmet._naziv);
		}


		return *this;

	}







	// TILDA -> ALT GR + 1 

	// Destuktor

	~Predmet() {

		//cout << "DESTRUKTOR SE POZVAO" << endl;

		delete _ECTS;
		_ECTS = nullptr;

		delete[] _naziv;
		_naziv = nullptr;

	}


	void Ispis() {

		cout << "Naziv predmeta : " << _naziv << endl;
		cout << "Ocjena predmeta : " << _ocjena << endl;
		cout << "ECTS predmeta : " << *_ECTS << endl;

	}



};





class Student {
	char* _imePrezime; // niz [ ] char

	Predmet* _polozeni; // ( ) ili [ ] 
	int _trenutno;      // koliko je trenutno student polozio predmeta
	int _max;           // koliko moze maksimalno predmeta imati neki student
public:


	Student() {

		int vel = strlen("Nema imena i prezimena") + 1;
		_imePrezime = new char[vel];
		strcpy_s(_imePrezime, vel, "Nema imena i prezimena");


		_trenutno = 0;
		_max = 3;

		_polozeni = new Predmet[_max];



	}


	// 	Student student("Vedad Keskin",3);
	Student(const char* imeprezime, int max ) {

		int vel = strlen(imeprezime) + 1;
		_imePrezime = new char[vel];
		strcpy_s(_imePrezime, vel, imeprezime);


		_trenutno = 0;
		_max = max;

		_polozeni = new Predmet[_max];

	}
	
	Student(const Student& obj) {

		int vel = strlen(obj._imePrezime) + 1;
		_imePrezime = new char[vel];
		strcpy_s(_imePrezime, vel, obj._imePrezime);

		_trenutno = obj._trenutno;
		_max = obj._max;

		_polozeni = new Predmet[_max];

		for (int i = 0; i < _trenutno; i++)
		{
			_polozeni[i] = obj._polozeni[i];
		}

	}

	Student& operator = (const Student& obj) {
		if (this != &obj) {

			delete[] _imePrezime;
			delete[] _polozeni;


			int vel = strlen(obj._imePrezime) + 1;
			_imePrezime = new char[vel];
			strcpy_s(_imePrezime, vel, obj._imePrezime);

			_trenutno = obj._trenutno;
			_max = obj._max;

			_polozeni = new Predmet[_max];

			for (int i = 0; i < _trenutno; i++)
			{
				_polozeni[i] = obj._polozeni[i];
			}
		}
		return *this;
	}


	// crtl + l --> brise liniju koda
	// alt drziti za pomjeranje linije koda

	~Student() {

		delete[] _imePrezime;
		_imePrezime = nullptr;
		delete[] _polozeni; // ctrl + d -> kopira kod u liniju ispod 
		_polozeni = nullptr;

	}

	void Ispis() {

		cout << "Ime i prezime studenta : " << _imePrezime << endl;
		cout << "===== POLOZENI PREDMETI STUDENTA ======" << endl <<endl;


		for (int i = 0; i < _trenutno; i++) // 0 1 2
		{
			_polozeni[i].Ispis();
			cout << "===========" << endl;
		}


	}



	
	// student.AddPolozeniPredmet(predmet2); --> MATII

	void AddPolozeniPredmet(Predmet predmet) {
		// Dodaje novi polozeni predmet u niz
		// Voditi ra훾una da se ne mo탑e prekora훾iti kapacitet niza
		// Voditi ra훾una da se ne moze dodavati isti predmet (istog naziva)		        
		if (_max == _trenutno) {
			cout << "Niz je popunjen" << endl;
			return;
		}

		for (int i = 0; i < _trenutno; i++) // 0,1 --> PRII MATII
		{
			// MATII == PRII , MATII == MATII

			// char* == char* <--- nece biti dovoljno
			// strcmp( naziv1 , naziv2 ) == 0 

			if (strcmp(  predmet._naziv , _polozeni[i]._naziv) == 0) {

				cout << "Student je vec polozio taj predmet" << endl;
				return;

			}

		}




		_polozeni[_trenutno] = predmet; // pol[0] = PRII , pol[1] = MATII 

		_trenutno++; // 0 ---> 1 ----> 2 ----> 3


	}

};



void main() {

	//Predmet predmet0; // <--- dft. constr.

	Predmet predmet1("Pogramiranje II", 9, 7); // user-def. constr. 
	Predmet predmet2("Matematika II", 6, 5); // user-def. constr. 
	Predmet predmet3("Web razvoj i dizajn", 7, 6); // user-def. constr. 
	Predmet predmet4("Operativni sistemi", 6, 4); // user-def. constr. 


	Student student("Vedad Keskin",3);


	student.AddPolozeniPredmet(predmet1);
	student.AddPolozeniPredmet(predmet2);
	student.AddPolozeniPredmet(predmet2);
	student.AddPolozeniPredmet(predmet3);
	student.AddPolozeniPredmet(predmet4);

	Student studentKopija = student;

	Student studentOperatorDodjele;

	studentOperatorDodjele = student;


	studentOperatorDodjele.Ispis();



	//Predmet predmetKopija = predmet1; // copy constr. 
	//Predmet predmetKopija2(predmet1); // copy constr. 

	//Predmet predmetOperatorDodjele;  // <--- dft. constr.
	//predmetOperatorDodjele = predmetOperatorDodjele; // <---- operator dodjele 


	//predmetOperatorDodjele.Ispis();
	//predmet1.Ispis();
	//predmet2.Ispis();
	//predmet3.Ispis();



	system("pause>0");
}

