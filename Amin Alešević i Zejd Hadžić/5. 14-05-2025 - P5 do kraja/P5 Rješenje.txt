#include<iostream>
using namespace std;

char* GetNizKaraktera(const char* tekst) {
	if (tekst == nullptr)
		return nullptr;
	int vel = strlen(tekst) + 1;
	char* novi = new char[vel];
	strcpy_s(novi, vel, tekst);
	return novi;
}

class Artikal {
	char* _sifra;
	char* _naziv;
	double _cijena;
	int _kolicinaNaSkladistu;
public:

	Artikal(const char* sifra = "SIF000", const char* naziv = "---", double cijena = 0, int kolicina = 0) {

		_sifra = GetNizKaraktera(sifra);
		_naziv = GetNizKaraktera(naziv);
		_cijena = cijena;
		_kolicinaNaSkladistu = kolicina;

	}

	Artikal(const Artikal& obj) {

		_sifra = GetNizKaraktera(obj._sifra);
		_naziv = GetNizKaraktera(obj._naziv);
		_cijena = obj._cijena;
		_kolicinaNaSkladistu = obj._kolicinaNaSkladistu;

	}

	Artikal& operator = (const Artikal& obj) {
		if (this != &obj) {

			delete[] _sifra;
			delete[] _naziv;


			_sifra = GetNizKaraktera(obj._sifra);
			_naziv = GetNizKaraktera(obj._naziv);
			_cijena = obj._cijena;
			_kolicinaNaSkladistu = obj._kolicinaNaSkladistu;
		}
		return *this;
	}


	~Artikal() {

		delete[] _sifra;
		_sifra = nullptr;
		delete[] _naziv;
		_naziv = nullptr;

	}

	friend ostream& operator << (ostream& COUT, const Artikal& obj) {
		COUT << obj._naziv << " ["<<obj._sifra<<"] - "<<obj._cijena <<"KM" << endl;
		COUT << "Kolicina na skladistu : " << obj._kolicinaNaSkladistu << "kom" << endl;
		return COUT;
	}


	// Operator -= na način da se stanje na skladištu artikla promijeni za proslijeđenu vrijednost

	// 	artikal1 -= (5);

	Artikal& operator -= (int kolicina) {

		if (_kolicinaNaSkladistu < kolicina) {
			cout << "Kolicina na stanju nije dovoljna" << endl;
			return *this;
		}

		_kolicinaNaSkladistu -= kolicina;

		return *this;

	}

	// Operator += na način da se stanje na skladištu artikla promijeni za proslijeđenu vrijednost

	// 	artikal1 += 10;

	Artikal& operator += (int kolicina) {

		_kolicinaNaSkladistu += kolicina;
		//_kolicinaNaSkladistu = _kolicinaNaSkladistu + kolicina;


		return *this;

	}

	// Operator ++ na način da se cijena artikla uveća za 1

	// artikal1++; ---> PREFIKSNI OPERATORI
	
	Artikal& operator ++ () {

		_cijena++;
		//_cijena = _cijena + 1;
		//_cijena += 1;


		return *this;

	}

	// Operator -- na način da se cijena artikla umanji za 1

	// --artikal1;
	
	Artikal& operator -- () {

		if (_cijena <= 1) {
			cout << "Cijena ne moze ici u -" << endl;
			return *this;
		}

		_cijena -= 1;

		return *this;

	}
	// Operator == koji poredi artikle na osnovu sifre

	// artikal1 == artikal2

	// operatori poredjenja : == != > < >= <= --> bool 

	bool operator == (const Artikal& obj) {

		if (strcmp(_sifra, obj._sifra) == 0) {
			return true;
		}
		else {
			return false;
		}


		//return strcmp(_sifra, obj._sifra) == 0;

	}

	// READ ONLY PARAMETRI

	int GetKolicinaNaSkladistu() { return _kolicinaNaSkladistu; }
	double GetCijena() { return _cijena; }
	char* GetSifra() { return _sifra; }
};

class StavkaRacuna {
	Artikal* _artikal; // ( ) 
	int* _kolicina;    // ( ) 
public:

	StavkaRacuna(Artikal artikal = Artikal(), int kolicina = 0) {

		_artikal = new Artikal(artikal);
		_kolicina = new int(kolicina);

	}

	StavkaRacuna(const StavkaRacuna& obj) {

		_artikal = new Artikal(*obj._artikal);
		_kolicina = new int(*obj._kolicina);

	}

	StavkaRacuna& operator = (const StavkaRacuna& obj) {
		if (this != &obj) {

			delete _artikal;
			delete _kolicina;

			_artikal = new Artikal(*obj._artikal);
			_kolicina = new int(*obj._kolicina);
		}
		return *this;
	}

	~StavkaRacuna() {

		delete _artikal;
		_artikal = nullptr;
		delete _kolicina;
		_kolicina = nullptr;

	}

	friend ostream& operator << (ostream& COUT, const StavkaRacuna& obj) {
		COUT << *obj._artikal;
		COUT << "Kupljena kolicina : " << *obj._kolicina << "kom" << endl;
		return COUT;
	}


	// Operator += koji uvećava stanje na skladištu artikla

	//stavka1 += 5;

	StavkaRacuna& operator += (int kolicina) {

		//_artikal->_kolicinaNaSkladistu += kolicina;
		//_artikal->GetKolicinaNaSkladistu() += kolicina;

		_artikal->operator+=(kolicina);
		//_artikal += kolicina;
		//_artikal += (kolicina);

		return *this;

	}

	// Operator -= koji umanjuje stanje na skladištu artikla

	// 	stavka1 -= 5;

	StavkaRacuna& operator -= (int kolicina) {

		_artikal->operator-=(kolicina);

		return *this;

	}

	// Operator == koji poredi stavke na osnovu sifre

	// stavka1 == stavka1

	bool operator == (const StavkaRacuna& obj) {

		if (strcmp(_artikal->GetSifra() , obj._artikal->GetSifra()) == 0) {
			return true;
		}
		else {
			return false;
		}

		//if (*_artikal == *obj._artikal) {
		//	return true;
		//}
		//else {
		//	return false;
		//}

		//return *_artikal == *obj._artikal;
		//return strcmp(_artikal->GetSifra(), obj._artikal->GetSifra()) == 0;

	}

	// Operator ++ koji uvećava količinu stavke racuna

	// ++stavka1;

	StavkaRacuna& operator ++ () {

		//*_kolicina++;
		//*_kolicina = *_kolicina + 1;
		//*_kolicina += 1;

		_kolicina = new int(*_kolicina + 1);

		return *this;

	}


	// 3 * 1.20 = 3.60

	double GetCijena() { // vraća cijenu stavke racuna (kolicina * cijena artikla) 
		return *_kolicina * _artikal->GetCijena();
	}

	double GetKolicina() { // vraća količinu stavke računa 
		return *_kolicina;
	}

};


// 1000 ---> 1001 ---> 1002
class Racun {
	static int _id; // unikatni identifikator, koristi se za povećanje broja računa uz osiguravanje unikatnosti 
	int _brojRacuna;
	StavkaRacuna* _stavke;
	int _trenutno;
	int _max;
	double _iznosBezPDV;
	double _iznosSaPDV;
	bool _naplaceno;
public:

	Racun(int max = 3) {

		_id++; // 1000 -> 1001
		_brojRacuna = _id; // 1001

		_trenutno = 0;
		_max = max;
		_stavke = new StavkaRacuna[_max];

		_iznosBezPDV = 0;
		_iznosSaPDV = 0;

		_naplaceno = false;

	}

	Racun(const Racun& obj) {

		_brojRacuna = obj._brojRacuna;

		_trenutno = obj._trenutno;
		_max = obj._max;

		_stavke = new StavkaRacuna[_max];

		for (int i = 0; i < _trenutno; i++)
		{
			_stavke[i] = obj._stavke[i];
		}

		_iznosBezPDV = obj._iznosBezPDV;
		_iznosSaPDV = obj._iznosSaPDV;

		_naplaceno = obj._naplaceno;
	}

	Racun& operator = (const Racun& obj) {
		if (this != &obj) {

			delete[] _stavke;

			_brojRacuna = obj._brojRacuna;

			_trenutno = obj._trenutno;
			_max = obj._max;

			_stavke = new StavkaRacuna[_max];

			for (int i = 0; i < _trenutno; i++)
			{
				_stavke[i] = obj._stavke[i];
			}

			_iznosBezPDV = obj._iznosBezPDV;
			_iznosSaPDV = obj._iznosSaPDV;

			_naplaceno = obj._naplaceno;
		}
		return *this;
	}

	~Racun() {

		delete[] _stavke;
		_stavke = nullptr;

	}




	// Operator () - Dodaje nove artikle u _stavke (ulazni parametri su Artikal i kolicina)
	// Voditi računa da nema duplikata
	// Voditi računa da nema prekoračenja niza
	// Prilikom svakog dodavanja artikla, ažurirati vrijednosti iznosBezPDV i iznosSaPDV

	// racun1(artikal1, 3);
	 
	Racun& operator () (Artikal artikal, int kolicina) {

		if (_max == _trenutno) {
			cout << "Racun je popunjen" << endl;
			return *this;
		}

		StavkaRacuna stavka(artikal, kolicina); // stavka --> artikal + kolicina

		//stavka.operator-=(kolicina);
		stavka -= kolicina;


		for (int i = 0; i < _trenutno; i++)
		{
			if (stavka == _stavke[i]) { // op == Stavka == Stavka
				cout << "Stavka je vec dodana u racun" << endl;
				return *this;
			}
		}

		_stavke[_trenutno] = stavka;
		_trenutno++;

		_iznosBezPDV += stavka.GetCijena(); // 3 * 1.20 = 3.60

		//  3.60 + 17% od 3.60
		//                    3.60        +  procenat od 17% 
		_iznosSaPDV += stavka.GetCijena() + (stavka.GetCijena() * 0.17);
		



		return *this;

	}






	void PrintRacun() {
		// Ispisuje sve stavke računa zajedno sa iznosom za plaćanje sa i bez PDV-a i brojem računa
		// Voditi računa da se jedan račun ne može dva puta isprintati (paziti na bool _naplaceno)

		if (_naplaceno == true) {
			cout << "Racun je vec naplacen" << endl;
			return;
		}

		cout << "=========== Br. racuna " << _brojRacuna << " ===========" << endl <<endl;

		for (int i = 0; i < _trenutno; i++)
		{
			cout << _stavke[i] << endl;
			cout << "=======================" << endl <<endl;
		}

		cout << "Cijena bez PDV : " << _iznosBezPDV <<" KM" << endl;
		cout << "Cijena sa PDV : " << _iznosSaPDV <<" KM"<< endl;

		_naplaceno = true;

	}

};
int Racun::_id = 1000; // --> 1001 

void main() {

	Artikal artikal1("SIF001", "Hljeb", 1.20, 30);
	Artikal artikal2("SIF002", "Mlijeko", 2.20, 20);
	Artikal artikal3("SIF003", "Cokolada", 3.20, 10);

	StavkaRacuna stavka1(artikal1, 3);


	Racun racun1;

	racun1(artikal1, 3);
	racun1(artikal2, 2);
	racun1(artikal2, 2);
	racun1(artikal3, 1);
	racun1(artikal3, 1);


	racun1.PrintRacun();





	//if (stavka1 == stavka1) {

	//	cout << "Stavke su iste" << endl;

	//}
	//else {
	//	cout << "Stavke nisu iste" << endl;

	//}


	//artikal1 -= 5;
	//artikal1 -= (5);
	//artikal1 += 10;

	//++artikal1;
	//--artikal1;

	//if (artikal1 == artikal1) {

	//	cout << "Artikli su isti" << endl;

	//}
	//else {
	//	cout << "Artikli nisu isti" << endl;

	//}







	system("pause>0");
}
