#include<iostream>
using namespace std;

class Artikal {
	char* _sifra;
	char* _naziv;
	double _cijena;
	int _kolicinaNaSkladistu;
public:
	// Kreirati i implementirati
	// 1. Defaultni konstruktor
	// 2. Konstruktor koji prima parametre
	// 3. Konstruktor kopije
	// 4. Operator dodjele
	// 5. Destruktor
	// 6. Operator ispisa 
	// 7. Dodatne operatore


	// Operator -= na način da se stanje na skladištu artikla promijeni za proslijeđenu vrijednost

	// Operator += na način da se stanje na skladištu artikla promijeni za proslijeđenu vrijednost

	// Operator ++ na način da se cijena artikla uveća za 1

	// Operator -- na način da se cijena artikla umanji za 1

	// Operator == koji poredi artikle na osnovu sifre


	int GetKolicinaNaSkladistu() { return _kolicinaNaSkladistu; }
	double GetCijena() { return _cijena; }
	char* GetSifra() { return _sifra; }
};

class StavkaRacuna {
	Artikal* _artikal;
	int* _kolicina;
public:
	// Kreirati i implementirati
	// 1. Defaultni konstruktor
	// 2. Konstruktor koji prima parametre
	// 3. Konstruktor kopije
	// 4. Operator dodjele
	// 5. Destruktor
	// 6. Operator ispisa 
	// 7. Dodatne operatore

	// Operator += koji uvećava stanje na skladištu artikla

	// Operator -= koji umanjuje stanje na skladištu artikla

	// Operator == koji poredi stavke na osnovu sifre

	// Operator ++ koji uvećava količinu stavke racuna


	double GetCijena() { // vraća cijenu stavke racuna (kolicina * cijena artikla) 
	}

	double GetKolicina() { // vraća količinu stavke računa 

	}

};


class Racun {
	static int _id; // unikatni identifikator, koristi se za povećanje broja računa uz osiguravanje unikatnosti 
	int _brojRacuna;
	StavkaRacuna* _stavke;
	int _trenutno;
	int _max;
	double _iznosBezPDV;
	double _iznosSaPDV;
	bool _naplaceno;
public:
	// Kreirati i implementirati
	// 1. Defaultni konstruktor
	// 2. Konstruktor koji prima parametre
	// 3. Konstruktor kopije
	// 4. Operator dodjele
	// 5. Destruktor
	// 6. Printanje racuna
	// 7. Dodatne operatore

	// Operator () - Dodaje nove artikle u _stavke (ulazni parametri su Artikal i kolicina)
	// Voditi računa da nema duplikata
	// Voditi računa da nema prekoračenja niza
	// Prilikom svakog dodavanja artikla, ažurirati vrijednosti iznosBezPDV i iznosSaPDV


	void PrintRacun() {
		// Ispisuje sve stavke računa zajedno sa iznosom za plaćanje sa i bez PDV-a i brojem računa
		// Voditi računa da se jedan račun ne može dva puta isprintati (paziti na bool _naplaceno)

	}

};


void main() {



	system("pause>0");
}
