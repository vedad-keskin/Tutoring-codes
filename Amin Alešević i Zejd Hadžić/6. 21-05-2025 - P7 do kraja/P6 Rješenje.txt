#include<iostream>
using namespace std;


char* GetNizKaraktera(const char* tekst) {

	int vel = strlen(tekst) + 1;

	char* temp = new char[vel];

	strcpy_s(temp, vel, tekst);

	return temp;

}

class Datum {
	int* _dan, * _mjesec, * _godina;
public:

	Datum(int dan = 1, int mjesec = 1, int godina = 2000) {
		_dan = new int(dan);
		_mjesec = new int(mjesec);
		_godina = new int(godina);

	}
	Datum(const Datum& obj) {
		_dan = new int(*obj._dan);
		_mjesec = new int(*obj._mjesec);
		_godina = new int(*obj._godina);

	}
	friend ostream& operator << (ostream& COUT, const Datum& obj) {

		COUT << *obj._dan << "." << *obj._mjesec << "." << *obj._godina;

		return COUT;

	}
	Datum& operator = (const Datum& obj) {
		if (this != &obj) {

			delete _dan;
			delete _mjesec;
			delete _godina;

			_dan = new int(*obj._dan);
			_mjesec = new int(*obj._mjesec);
			_godina = new int(*obj._godina);


		}
		return *this;
	}

	bool operator ==(const Datum& obj) {

		if (*_dan == *obj._dan && *_mjesec == *obj._mjesec && *_godina == *obj._godina)
		{
			return true;
		}
		return false;


		//return *_dan == *obj._dan && *_mjesec == *obj._mjesec && *_godina == *obj._godina;
	}

	~Datum() {
		delete _dan; _dan = nullptr;
		delete _mjesec; _mjesec = nullptr;
		delete _godina; _godina = nullptr;

	}
};


class Fudbaler {
	char* _imePrezime;
	char* _pozicija;
	int _brojDresa;
	Datum* _datumRodjenja;
public:

	int GetBrojDresa() const {
		return _brojDresa;
	}


	Fudbaler(const char* imeprezime = "----", const char* pozicija = "----", int brojDresa = 0, Datum datum = Datum()) {

		_imePrezime = GetNizKaraktera(imeprezime);
		_pozicija = GetNizKaraktera(pozicija);
		_brojDresa = brojDresa;
		_datumRodjenja = new Datum(datum);

	}
	Fudbaler(const Fudbaler& obj) {
		_imePrezime = GetNizKaraktera(obj._imePrezime);
		_pozicija = GetNizKaraktera(obj._pozicija);
		_brojDresa = obj._brojDresa;
		_datumRodjenja = new Datum(*obj._datumRodjenja);

	}
	friend ostream& operator << (ostream& COUT, const Fudbaler& obj) {

		COUT << obj._imePrezime << obj._pozicija << "[" << *obj._datumRodjenja << "]" << " Broj dresa-> " << obj._brojDresa << endl;

		return COUT;

	}

	Fudbaler& operator = (const Fudbaler& obj) {
		if (this != &obj) {

			delete[]_imePrezime;
			delete[]_pozicija;
			delete _datumRodjenja;

			_imePrezime = GetNizKaraktera(obj._imePrezime);
			_pozicija = GetNizKaraktera(obj._pozicija);
			_brojDresa = obj._brojDresa;
			_datumRodjenja = new Datum(*obj._datumRodjenja);


		}
		return *this;
	}

	~Fudbaler() {

		delete[]_imePrezime; _imePrezime = nullptr;
		delete[]_pozicija; _pozicija = nullptr;
		delete _datumRodjenja; _datumRodjenja = nullptr;
	}

	//Kreirati i implementirati
	//1. Defaultni konstruktor
	//2. Konstruktor koji prima parametre
	//3. Konstruktor kopije
	//4. Operator dodjele
	//5. Destruktor
	//6. Operator ispisa 
	//7. Potrebne funkcije
	//8. Operator poredjenja

	//Operator poredjenja
	bool operator ==(const Fudbaler& obj) {

		if (strcmp(_imePrezime , obj._imePrezime) == 0 && _brojDresa == obj._brojDresa &&  strcmp(_pozicija , obj._pozicija) == 0)
		{
			return true;
		}
		return false;
	}


	//Operator += na način da se mijenja broj dresa fudbalera za proslijeđenu vrijednost

	Fudbaler& operator += (int vrijednost) {

		_brojDresa = vrijednost;

		return *this;

	}

};


class Tim {
	char* _naziv;
	Fudbaler* _momcad;
	int* _trenutno;
	int _max;
public:
	/*Tim(const char* naziv = "----", int max = 3) {
	_naziv = GetNizKaraktera(naziv);
	_max = max;
	_momcad = new Fudbaler[_max];
	_trenutno = new int(0);
}
*/
	Tim(const char* naziv = "----", int max = 3) {

		_naziv = GetNizKaraktera(naziv);

		_max = max;
		_trenutno = new int(0);

		_momcad = new Fudbaler[_max];


	}
	Tim(const Tim& obj) {
		_naziv = GetNizKaraktera(obj._naziv);
		_max = obj._max;
		_trenutno = new int(*obj._trenutno);
		_momcad = new Fudbaler[_max];
		for (int i = 0; i < *_trenutno; i++)
		{
			_momcad[i] = obj._momcad[i];
		}

	}

	Tim& operator = (const Tim& obj) {
		if (this != &obj) {

			delete[]_naziv; 
			delete _trenutno;
			delete[]_momcad;

			_naziv = GetNizKaraktera(obj._naziv);
			_max = obj._max;
			_trenutno = new int(*obj._trenutno);
			_momcad = new Fudbaler[_max];
			for (int i = 0; i < *_trenutno; i++)
			{
				_momcad[i] = obj._momcad[i];
			}
		}
		return *this;
	}

	bool operator == (const Tim& obj) {
		return strcmp(_naziv , obj._naziv) == 0;
	}


	friend ostream& operator << (ostream& COUT, const Tim& obj) {

		COUT << obj._naziv << endl;
		for (int i = 0; i < *obj._trenutno; i++)
		{
			cout << obj._momcad[i] << endl;
			cout << "=========" << endl;
		}

		return COUT;

	}


	~Tim() {
		delete[]_naziv; _naziv = nullptr;
		delete _trenutno; _trenutno = nullptr;
		delete[]_momcad; _momcad = nullptr;
	}



	//Kreirati i implementirati
	// 1. Defaultni konstruktor
	// 2. Konstruktor koji prima parametre
	// 3. Konstruktor kopije
	// 4. Operator dodjele
	// 5. Destruktor
	// 6. Operator ispisa 
	// 7. Potrebne funkcije
	// 8. Operator poredjenja


	// Operator ( ) na način da se doda igrač u tim gdje je Fudbaler parametar operatora

	/*bool operator()(const Fudbaler& f) {
	if (*_trenutno >= _max)
		return false;

	for (int i = 0; i < *_trenutno; i++)
		if (_momcad[i]._brojDresa == f._brojDresa) // poređenje broja dresa
			return false;

	_momcad[*_trenutno] = f; // kopiraj fudbalera u niz
	(*_trenutno)++;
	return true;
}
*/

	// tim1(fudbaler1);
	

	Tim& operator() (Fudbaler fudbaler) {
		if (*_trenutno == _max)
		{
			return *this;
		}

		for (int i = 0; i < *_trenutno; i++)
		{
			if (_momcad[i] == fudbaler) {

				return *this;

			}
			

		}
		_momcad[*_trenutno] = fudbaler;
		(*_trenutno)++;
		return *this;
	}


	const char* GetNazivTima() {
		return _naziv;
	}

};


class Liga {
	char* _naziv;
	Tim* _timovi;
	int* _trenutno;
	int _max;
public:


	Liga(const char* naziv = "---", int max = 3) {

		_naziv = GetNizKaraktera(naziv);

		_max = max;
		_trenutno = new int(0);

		_timovi = new Tim[_max];

	}

	Liga(const Liga& obj) {

		_naziv = GetNizKaraktera(obj._naziv);

		_max = obj._max;
		_trenutno = new int(*obj._trenutno);

		_timovi = new Tim[_max];


		for (int i = 0; i < *_trenutno; i++)
		{
			_timovi[i] = obj._timovi[i];
		}

	}

	~Liga() {

		delete[] _timovi;
		_timovi = nullptr;
		delete[] _naziv;
		_naziv = nullptr;
		delete _trenutno;
		_trenutno = nullptr;

	}


	friend ostream& operator << (ostream& COUT, const Liga& obj) {

		COUT << obj._naziv << endl;
		for (int i = 0; i < *obj._trenutno; i++)
		{
			cout << obj._timovi[i] << endl;
			cout << "=========" << endl;
		}

		return COUT;

	}


	// Operator ( ) na način da se parametar Tim doda u niz _timovi
	// Obratiti pažnju na dupliranje timova i na opseg niza


	Liga& operator() (Tim tim) {
		if (*_trenutno == _max)
		{
			return *this;
		}

		for (int i = 0; i < *_trenutno; i++)
		{
			if (_timovi[i] == tim) {

				return *this;

			}


		}
		_timovi[*_trenutno] = tim;
		(*_trenutno)++;
		return *this;
	}



	// Operator [ ] na način da se vraća true ili false u slučaju da Tim postoji ili ne postoji u nizu _timovi

	bool operator [] (Tim tim) {

		for (int i = 0; i < *_trenutno; i++)
		{
			if (tim == _timovi[i]) {
				return true;
			}
		}
		return false;

	}


	// Operator [ ] na način da se vraća true ili false u slučaju da postoji ili ne postoji tim sa proslijeđenim nazivom u nizu _timovi

	bool operator [] (const char* nazivTima) {


		for (int i = 0; i < *_trenutno; i++)
		{
			if (strcmp(nazivTima, _timovi[i].GetNazivTima()) == 0) {
				return true;
			}
		}
		return false;
	}


};



void main()
{

	Datum datum1(12, 12, 1998);
	Datum datum2(1, 15, 1995);



	Fudbaler fudbaler1("Oliver Kahn", "GK", 1, datum2);
	Fudbaler fudbaler2("Philipp Lahm", "LB", 21, datum1);
	Fudbaler fudbaler3("Franck Ribery", "LMF", 7, datum2);
	Fudbaler fudbaler4("Arjen Robben", "RMF", 10, datum2);
	Fudbaler fudbaler5("Luca Toni", "CF", 9, datum1);
	Fudbaler fudbaler6("Victor Valdez", "GK", 1, datum1);
	Fudbaler fudbaler7("Charles Puyol", "CB", 5, datum1);
	Fudbaler fudbaler8("Andres Iniesta", "CMF", 8, datum1);
	Fudbaler fudbaler9("Ronaldinho", "SS", 10, datum1);
	Fudbaler fudbaler10("David Villa", "CF", 9, datum1);

	//fudbaler2 += 5;
	//fudbaler1 == fudbaler1;
	//cout << fudbaler2;
	//cout << fudbaler5;


	Tim tim1("Bayern Munchen", 11);

	tim1(fudbaler1);
	tim1(fudbaler2);
	tim1(fudbaler3);
	tim1(fudbaler4);
	tim1(fudbaler5);



	Tim tim2("Barcelona", 11);

	tim2(fudbaler6);
	tim2(fudbaler7);
	tim2(fudbaler8);
	tim2(fudbaler9);
	tim2(fudbaler10);


	Liga liga("Liga Sampiona", 36);

	liga(tim1);
	liga(tim2);

	//if (liga["Bayern Munchen"] == true) {
	//	cout << "Bayern postoji u ligi" << endl;
	//}
	//else {
	//	cout << "Bayern ne postoji u ligi" << endl;
	//}

	cout << liga;







	system("pause>0");
}
