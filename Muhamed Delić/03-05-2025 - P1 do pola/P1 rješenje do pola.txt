#include <iostream>
using namespace std;

// POKAZIVACI

// 1. ALOKACIJA -> new 

// ( ) ---> daj mi jednu vrijednost 

// [ ] ---> daj mi vise vrijednosti

// 2. DEREFERENCIRANJE prilikom ispisa i kopiranja

// ( ) ---->  *_ECTS = 0   ,  _ECTS = 000002AF7DA07EC0

// [ ] ---->  _naziv = Nema Predmeta       *_naziv = N

// 3. DESTRUKTOR 

// ( ) ----> 		delete _ECTS; 

// [ ] ---->        delete[] _naziv;



class Predmet {
public:				  // dft constr.
	char* _naziv;	  // Nema naziva
	int _ocjena;	  //     5
	int* _ECTS;		  //     0
	

	// dft constr.

	Predmet() {

		_ocjena = 5;

		_ECTS = new int(0);

		//char dftNaziv[] = "Nema naziva";
		const char* dftNaziv2 = "Nema naziva";

		int vel = strlen(dftNaziv2) + 1;

		_naziv = new char[vel];

		strcpy_s(_naziv, vel, dftNaziv2);  // 1. gdje nesto pohranjujemo , 2. koliko slova zelimo da kopiramo , 3. sta kopiramo


	}


	// 	Predmet predmet1("Programiranje II", 9, 7); // <--- user-def. constr.

	Predmet(const char* naziv, int ocjena, int ects ) {

		_ocjena = ocjena;

		_ECTS = new int(ects);

		int vel = strlen(naziv) + 1;

		_naziv = new char[vel];

		strcpy_s(_naziv, vel, naziv); // 1. gdje 2. koliko, 3. sta


	}

	// Predmet predmetKopija(predmet1);	  // <--- copy constr.
	

	// & salje original
	// const ne dopusta da se taj original mijenja

	Predmet(const Predmet& predmet) { // salji origianl 

		_ocjena = predmet._ocjena;

		_ECTS = new int(*predmet._ECTS);

		int vel = strlen(predmet._naziv) + 1;

		_naziv = new char[vel];

		strcpy_s(_naziv, vel, predmet._naziv);


	}

	// predmetOperatorDodjele = predmet1; // <--- operator dodjele

	Predmet& operator = (const Predmet& predmet) {

		if (this != &predmet) {

			delete _ECTS;
			delete[] _naziv;


			_ocjena = predmet._ocjena;

			_ECTS = new int(*predmet._ECTS);

			int vel = strlen(predmet._naziv) + 1;

			_naziv = new char[vel];

			strcpy_s(_naziv, vel, predmet._naziv);

		}

		return *this;


	}



	// alt gr  + 1 tilda

	~Predmet() {


		cout << "POZVAO SE DESTRUKTOR" << endl;

		delete _ECTS;
		_ECTS = nullptr;

		delete[] _naziv;
		_naziv = nullptr;



	}




	void Ispis() {

		cout << "Naziv predmeta : " << _naziv << endl;
		cout << "Ocjena predmeta : " << _ocjena << endl;
		cout << "ECTS predmeta : " << *_ECTS << endl;

	}



};



class Student {
	char* _imePrezime;
	Predmet* _polozeni;
	int _trenutno;
	int _max;
public:
	// Kreirati i implementirati
	// 1. Defaultni konstruktor
	// 2. Konstruktor koji prima parametre
	// 3. Konstruktor kopije
	// 4. Operator dodjele
	// 5. Destruktor
	// 6. Ispis ili COUT 
	// 7. Potrebne funkcije



	void AddPolozeniPredmet(Predmet predmet) {
		// Dodaje novi polozeni predmet u niz
		// Voditi ra훾una da se ne mo탑e prekora훾iti kapacitet niza
		// Voditi ra훾una da se ne moze dodavati isti predmet (istog naziva)		        


	}

};



void main() {

	Predmet predmet0; // <--- poziv dft. constr.

	Predmet predmet1("Programiranje II", 9, 7); // <--- user-def. constr.

	//Predmet predmetKopija = predmet1;     // <--- copy constr.
	Predmet predmetKopija(predmet1);	  // <--- copy constr.

	Predmet predmetOperatorDodjele;  // <--- poziv dft. constr.

	predmetOperatorDodjele = predmet1; // <--- operator dodjele

	//predmet0.Ispis(); // ctrl + d

	predmetOperatorDodjele.Ispis();


	system("pause>0");
}

