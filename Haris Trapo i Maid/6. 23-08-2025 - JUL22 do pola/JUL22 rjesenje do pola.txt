#include <iostream>

#include <string>    // jedostavni tekst
#include <vector>    // jednostavni niz
#include <regex>     // validacija teksta

#include <thread>    // multitasking
#include <mutex>	 // multitasking

#include <fstream>	 // fajlovi
#include <memory>	 // fajlovi

#include <sstream>	 // string stream
#include <ctime>	 // sistemsko vrijeme



using namespace std;

const char* PORUKA = "\n-------------------------------------------------------------------------------\n"
"0. PROVJERITE DA LI PREUZETI ZADACI PRIPADAJU VASOJ GRUPI (G1/G2)\n"
"1. SVE KLASE TREBAJU POSJEDOVATI ADEKVATAN DESTRUKTOR\n"
"2. NAMJERNO IZOSTAVLJANJE KOMPLETNIH I/ILI POJEDINIH DIJELOVA DESTRUKTORA CE BITI OZNACENO KAO TM\n"
"3. SPASAVAJTE PROJEKAT KAKO BI SE SPRIJECILO GUBLJENJE URADJENOG ZADATKA\n"
"4. ATRIBUTI, NAZIVI FUNKCIJA, TE BROJ I TIP PARAMETARA MORAJU BITI IDENTICNI ONIMA KOJI SU KORISTENI U TESTNOM CODE-U, "
"OSIM U SLUCAJU DA POSTOJI ADEKVATAN RAZLOG ZA NJIHOVU MODIFIKACIJU. OSTALE "
"POMOCNE FUNKCIJE MOZETE IMENOVATI I DODAVATI PO ZELJI.\n"
"5. IZUZETAK BACITE SAMO U FUNKCIJAMA U KOJIMA JE TO NAZNACENO.\n"
"6. METODE I KLASE KOJE NE IMPLEMENTIRATE NEMOJTE BRISATI (BEZ OBZIRA STO NEMAJU IMPLEMENTACIJU)!\n"
"7. NA KRAJU ISPITA SVOJE RJESENJE KOPIRATE U .DOCX FAJL (IMENOVAN BROJEM INDEKSA)!\n"
"8. RJESENJA ZADATKA POSTAVITE NA FTP SERVER U ODGOVARAJUCI FOLDER!\n"
"9. NEMOJTE POSTAVLJATI VISUAL STUDIO PROJEKTE, VEC SAMO .DOCX FAJL SA VASIM RJESENJEM!\n"
"10.SVE NEDOZVOLJENE RADNJE TOKOM ISPITA CE BITI SANKCIONISANE!\n"
"11. ZA POTREBE TESTIRANJA, U MAINU, BUDITE SLOBODNI DODATI TESTNIH PODATAKA (POZIVA FUNKCIJA) KOLIKO GOD SMATRATE DA JE POTREBNO!\n"
"12. ZA IZRADU ISPITNOG RJESENJA KORISTITI VISUAL STUDIO 2022!\n"
"-------------------------------------------------------------------------------\n";

const char* crt = "\n-------------------------------------------\n";



// mini klase            0         1          2         3
enum Karakteristike { NARUDZBA, KVALITET, PAKOVANJE, ISPORUKA };




char* GetNizKaraktera(const char* sadrzaj, bool dealociraj = false) {
	if (sadrzaj == nullptr)return nullptr;
	int vel = strlen(sadrzaj) + 1;
	char* temp = new char[vel];
	strcpy_s(temp, vel, sadrzaj);
	if (dealociraj)
		delete[]sadrzaj;
	return temp;
}

// SVAKA KLASA MORA IMATI :
// 1. SPOJENI CONSTR.
// 2. DESTRUKTOR
// 3. ISPIS
// 4. COPY CONSTR.
// 5. OP = 
// 6. OP == (osim prve i zadnje)  
// 7. DODATNE FUNC. AKO IH U MAINU IMA 


template<class T1, class T2>
class Rjecnik { // Rjecnik ili Dictionary ili Kolekcija ili Parovi
	T1* _elementi1;
	T2* _elementi2;
	int _trenutno;
	bool _omoguciDupliranje; // true ili false
public:
	Rjecnik(bool omoguciDupliranje = true) {
		_omoguciDupliranje = omoguciDupliranje;

		_trenutno = 0;

		_elementi1 = new T1[_trenutno];
		_elementi2 = new T2[_trenutno];

	}

	Rjecnik(const Rjecnik& obj) {

		_omoguciDupliranje = obj._omoguciDupliranje;
		_trenutno = obj._trenutno;

		_elementi1 = new T1[_trenutno];
		_elementi2 = new T2[_trenutno];

		for (int i = 0; i < _trenutno; i++)
		{
			_elementi1[i] = obj._elementi1[i];
			_elementi2[i] = obj._elementi2[i];
		}

	}

	Rjecnik& operator = (const Rjecnik& obj) {
		if (this != &obj) {

			delete[] _elementi1;
			delete[] _elementi2;

			_omoguciDupliranje = obj._omoguciDupliranje;
			_trenutno = obj._trenutno;

			_elementi1 = new T1[_trenutno];
			_elementi2 = new T2[_trenutno];

			for (int i = 0; i < _trenutno; i++)
			{
				_elementi1[i] = obj._elementi1[i];
				_elementi2[i] = obj._elementi2[i];
			}

		}
		return *this;
	}

	void AddElement(T1 el1, T2 el2) { // 5

		// 1. napraviti temp koji ce imati iste elemente kao i nas niz

		T1* temp1 = _elementi1;
		T2* temp2 = _elementi2;

		// 2. prosiriti niz da ima jos jedno slobodno mjesto

		_elementi1 = new T1[_trenutno + 1];
		_elementi2 = new T2[_trenutno + 1];

		// 3. prebaciti sve elemente iz tempa u elemente1/2

		for (int i = 0; i < _trenutno; i++)
		{
			_elementi1[i] = temp1[i];
			_elementi2[i] = temp2[i];
		}

		// 4. klasicno pohranjivanje

		_elementi1[_trenutno] = el1;
		_elementi2[_trenutno] = el2;

		_trenutno++;

	}
	/*
	* metoda prihvata indekse lokacije, te vraÄ‡a elemente koji se u rjecniku nalaze na	proslijedjenim lokacijama (ukljucujuci i te lokacije)
	*/
	//Rjecnik<int, int> rjecnik2 = rjecnik1(2, 5);
	///*clanovi objekta rjecnik2 bi trebali biti:
	//2 2
	//3 3
	//4 4
	//5 5
	//*/
	//cout << rjecnik2 << crt;

	//                           2               5
	Rjecnik operator () (int lokacijaOd, int lokacijaDo) {

		Rjecnik rjecnik2; // prazan rjencik/kolekcija

		for (int i = lokacijaOd; i <= lokacijaDo; i++) // 2 3 4 5
		{
			rjecnik2.AddElement(_elementi1[i], _elementi2[i]);
		}

		return rjecnik2;

	}


	~Rjecnik() {
		delete[] _elementi1; _elementi1 = nullptr;
		delete[] _elementi2; _elementi2 = nullptr;
	}

	T1& getElement1(int lokacija)const { return _elementi1[lokacija]; }	// 4. caka ..
	T2& getElement2(int lokacija)const { return _elementi2[lokacija]; }	// 4. caka ..
	int getTrenutno() const { return _trenutno; } // 1. caka fali const , 2. caka fali * 
	
	friend ostream& operator<< (ostream& COUT, const Rjecnik& obj) {
		for (size_t i = 0; i < obj._trenutno; i++) // 3. caka fali * 
			COUT << obj.getElement1(i) << " " << obj.getElement2(i) << endl;
		return COUT;
	}
};




class Datum { // Datum ili Vrijeme (Termin)
	int* _dan, * _mjesec, * _godina;
public:
	Datum(int dan = 1, int mjesec = 1, int godina = 2000) {

		_dan = new int(dan);
		//_dan = &dan; // 2. caka

		_mjesec = new int(mjesec);
		_godina = new int(godina);
	}

	Datum(const Datum& obj) {

		_dan = new int(*obj._dan);
		_mjesec = new int(*obj._mjesec);
		_godina = new int(*obj._godina);

	}

	Datum& operator = (const Datum& obj) {
		if (this != &obj) {
			
			delete _dan; 
			delete _mjesec;
			delete _godina;


			_dan = new int(*obj._dan);
			_mjesec = new int(*obj._mjesec);
			_godina = new int(*obj._godina);

		}
		return *this;
	}

	bool operator == (const Datum& obj) {

		return *_dan == *obj._dan && *_mjesec == *obj._mjesec && *_godina == *obj._godina;

	}

	// SumaDana toDays

	int toDays() {

		return *_dan + *_mjesec * 30 + *_godina * 365;

	}

	~Datum() {
		delete _dan; _dan = nullptr;
		delete _mjesec; _mjesec = nullptr;
		delete _godina; _godina = nullptr;
	}

	friend ostream& operator<< (ostream& COUT, const Datum& obj) {
		COUT << *obj._dan << "." << *obj._mjesec << "." << *obj._godina; // 1. caka 90% 
		return COUT;
	}
};

//class ZadovoljstvoKupca {
//	int _ocjena; //za svaku kupovinu kupac moze ostaviti jednu ocjenu
//	//uz ocjenu, kupci mogu komentarisati svaku od karakteristika proizvoda.
//	//onemoguciti dupliranje karakteristika tj. svaka karakteristika se moze komentarisati samo jednom...u suprotnom baciti objekat tipa exception
//	Rjecnik<Karakteristike, const char*> _komentariKarakteristika;
//public:
//	ZadovoljstvoKupca(int ocjena = 0) {
//		_ocjena = ocjena;
//	}
//	int GetOcjena() { return _ocjena; }
//	Rjecnik<Karakteristike, const char*>& GetKomentareKarakteristika() { return _komentariKarakteristika; }
//};
//
//class Osoba {
//protected:
//	char* _imePrezime;
//	Datum _datumRodjenja;
//public:
//	Osoba(const char* imePrezime = "", Datum datumRodjenja = Datum()) : _datumRodjenja(datumRodjenja) {
//		_imePrezime = GetNizKaraktera(imePrezime);
//	}
//	~Osoba() {
//		delete[] _imePrezime; _imePrezime = nullptr;
//	}
//	char* GetImePrezime() { return _imePrezime; }
//	Datum& GetDatumRodjenja() { return _datumRodjenja; }
//
//	virtual void Info() = 0;
//	friend ostream& operator<< (ostream& COUT, const Osoba& obj) {
//		COUT << obj._imePrezime << " " << obj._datumRodjenja << endl;
//		return COUT;
//	}
//};
//
//class Kupac {
//	char* _emailAdresa;
//	//float se odnosi na iznos racuna za odredjenu kupovinu
//	Rjecnik<float, ZadovoljstvoKupca>* _kupovine;
//	vector<int> _bodovi; // bodovi sakupljeni tokom kupovine, svakih potrosenih 10KM donosi po 1 bod.
//public:
//	Kupac(const char* imePrezime = "", Datum datumRodjenja = Datum(), const char* emailAdresa = "") {
//		_emailAdresa = GetNizKaraktera(emailAdresa);
//		_kupovine = new Rjecnik<float, ZadovoljstvoKupca>(false);
//	}
//	~Kupac()
//	{
//		delete[] _emailAdresa; _emailAdresa = nullptr;
//		delete _kupovine; _kupovine = nullptr;
//	}
//	char* GetEmail() { return _emailAdresa; }
//	Rjecnik<float, ZadovoljstvoKupca>& GetKupovine() { return *_kupovine; }
//	vector<int> GetBodovi() { return _bodovi; }
//	int GetBodoviUkupno() {
//		int ukupno = 0;
//		for (size_t i = 0; i < _bodovi.size(); i++) ukupno += _bodovi[i];
//		return ukupno;
//	}
//
//	friend ostream& operator<< (ostream& COUT, const Kupac& obj) {
//		COUT << crt << obj._imePrezime << " " << obj._datumRodjenja << " " << obj._emailAdresa << " " << endl;
//		COUT << "KUPOVINE -> " << crt;
//		for (size_t i = 0; i < obj._kupovine->getTrenutno(); i++)
//			COUT << "Iznos racuna: " << obj._kupovine->getElement1(i) << "KM, zadovoljstvo kupca: " << obj._kupovine->getElement2(i) << crt;
//		COUT << "BODOVI -> ";
//		for (size_t i = 0; i < obj._bodovi.size(); i++)
//			COUT << obj._bodovi[i] << ", ";
//		COUT << crt;
//		return COUT;
//	}
//};

const char* GetOdgovorNaPrvoPitanje() {
	cout << "Pitanje -> Nabrojite i ukratko pojasnite osnovne razlike izmedju list i vector klase?\n";
	return "Odgovor -> OVDJE UNESITE VAS ODGOVOR";
}
const char* GetOdgovorNaDrugoPitanje() {
	cout << "Pitanje -> Pojasnite opcije vezane za preslikavanje (vrijednosti, referenci, dostupnost) parametara prilikom koristenja lambda funkcija?\n";
	return "Odgovor -> OVDJE UNESITE VAS ODGOVOR";
}

void main() {

	cout << PORUKA;
	cin.get();

	cout << GetOdgovorNaPrvoPitanje() << endl;
	cin.get();
	cout << GetOdgovorNaDrugoPitanje() << endl;
	cin.get();

	//Datum datum1(12, 12, 1998); // 1231231213223
	//Datum datum2(12, 12, 2015); // 2323213223232

	//if (datum1.toDays() > datum2.toDays()) {
	//	cout << "Datum1 je veci/mladji" << endl;
	//}
	//else {

	//	cout << "Datum2 je veci/mladji" << endl;
	//}



	const int rjecnikTestSize = 9;
	Rjecnik<int, int> rjecnik1(false);


	for (int i = 0; i < rjecnikTestSize - 1; i++)
		rjecnik1.AddElement(i, i);//dodaje vrijednosti u rjecnik

	//try {
	//	//ukoliko nije dozvoljeno dupliranje elemenata (provjeravaju se T1 ili T2), metoda AddElement treba baciti objekat tipa exception
	//	rjecnik1.AddElement(3, 3);
	//}
	//catch (exception& err) {
	//	cout << err.what() << crt;
	//}

	rjecnik1.AddElement(9, 9);

	cout << rjecnik1 << crt;

	// TRI VRSTE FUNC.
	// 1. FUNC. KOJE IMAJU IME -> VOID 
	// 2. FUNC. KOJE IMAJU IME A NALAZI SE U IFU -> BOOL 
	// 3. FUNC. KOJE NEMA IME -> OPERATOR   

	/*
	* metoda prihvata indekse lokacije, te vraÄ‡a elemente koji se u rjecniku nalaze na proslijedjenim lokacijama (ukljucujuci i te lokacije)
	*/
	Rjecnik<int, int> rjecnik2 = rjecnik1(2, 5);
	/*clanovi objekta rjecnik2 bi trebali biti:
	2 2
	3 3
	4 4
	5 5
	*/
	cout << rjecnik2 << crt;


	//const int maxKupaca = 3;
	//Osoba* kupci[maxKupaca];
	//kupci[0] = new Kupac("Denis Music", Datum(12, 1, 1980), "denis@fit.ba");
	//kupci[1] = new Kupac("Jasmin Azemovic", Datum(12, 2, 1980), "jasmin@fit.ba");
	//kupci[2] = new Kupac("Adel Handzic", Datum(12, 3, 1980), "adel@edu.fit.ba");

	//ZadovoljstvoKupca zadovoljstvoKupca(7);
	//zadovoljstvoKupca.DodajKomentarKarakteristike(NARUDZBA, "Nismo mogli odabrati sve potrebne opcije");
	//zadovoljstvoKupca.DodajKomentarKarakteristike(KVALITET, "Kvalitet je ocekivan");

	//try {
	//	//karakteristika kvalitet je vec komentarisana
	//	zadovoljstvoKupca.DodajKomentarKarakteristike(KVALITET, "Kvalitet je ocekivan");
	//}
	//catch (exception& err) {
	//	cout << err.what() << crt;
	//}

	//zadovoljstvoKupca.DodajKomentarKarakteristike(PAKOVANJE, "Pakovanje je bio osteceno");
	//zadovoljstvoKupca.DodajKomentarKarakteristike(ISPORUKA, "Mada su najavili da ce proizvod biti isporucen u roku od 2 dana, cekali smo 5 dana");


	//Kupac* denis = dynamic_cast<Kupac*>(kupci[0]);
	///*za svakih 10KM kupcu se dodaje 1 bod, pa ce tako kupovina od 128KM kupcu donijeti 12 bodova*/
	//denis->DodajKupovinu(128, zadovoljstvoKupca);
	//cout << "Ukupno bodova -> " << denis->GetBodoviUkupno();//12 bodova


	//ZadovoljstvoKupca zadovoljstvoKupca2(4);
	//zadovoljstvoKupca2.DodajKomentarKarakteristike(KVALITET, "Jako lose, proizvod ostecen");
	//denis->DodajKupovinu(81, zadovoljstvoKupca2);

	//cout << "Ukupno bodova -> " << denis->GetBodoviUkupno();//20 bodova

	///*prilikom svake kupovine, ukoliko je kupac ostvario vise od 5 bodova, potrebno je, u zasebnom thread-u (nakon 3 sekunde), poslati email sa sljedecim sadrzajem:

	//  To: denis@fit.ba;
	//  Subject: Osvareni bodovi

	//  Postovani,

	//  Prilikom posljednje kupovine ste ostvarili 8 bodova, tako da trenutno vas ukupan broj bodova iznosi 20.

	//  Zahvaljujemo vam na kupovini.
	//  Puno pozdrava
 // */


 // //ispisuje sve podatke o kupcu i njegovim kupovinama.
	//denis->Info();
	///* Primjer ispisa:
	//	-------------------------------------------
	//	Denis Music 12.1.1980 denis@fit.ba
	//	KUPOVINE ->
	//	-------------------------------------------
	//	Iznos racuna: 128KM, zadovoljstvo kupca: 7
	//			NARUDZBA - Nismo mogli odabrati sve potrebne opcije
	//			KVALITET - Kvalitet je ocekivan
	//			PAKOVANJE - Pakovanje je bio osteceno
	//			ISPORUKA - Mada su najavili da ce proizvod biti isporucen u roku od 2 dana, cekali smo 5 dana
	//	-------------------------------------------
	//	Iznos racuna: 81KM, zadovoljstvo kupca: 4
	//			KVALITET - Jako lose, proizvod ostecen
	//	-------------------------------------------
	//	BODOVI -> 12, 8,
	//	-------------------------------------------
 //  */
 //  /*metoda SacuvajBodove treba sve clanove vector-a _bodovi upisati u fajl(ignorisuci ranije dodate/postojece vrijednosti u fajlu) pod nazivom emailKorisnika.txt npr. denis@fit.ba.txt.
 //  na osnovu trenutnog stanja objekta, sadrzaj fajla denis@fit.ba.txt bi trebao biti sljedeci:
 //  12
 //  8

 //  nakon spasavanja u fajl, sadrzaj vector-a ostaje nepromijenjen.
 //  */
	//denis->SacuvajBodove();
	////metoda UcitajBodove ucitava sadrzaj fajla pod nazivom emailKorisnika.txt i njegove vrijednosti pohranjuje/dodaje u vector _bodovi (zadrzavajuci postojece bodove).  
	//denis->UcitajBodove();

	////metoda GetKupovineByKomentar treba da pronadje i vrati sve karakteristike proizvoda i komentare kupaca koji sadrze vrijednost proslijedjenog parametra
	//Rjecnik<Karakteristike, const char*> osteceniProizvodi = denis->GetKupovineByKomentar("ostecen");
	//cout << crt << "Rezultat pretrage -> " << crt << osteceniProizvodi << crt;

	///*Ocekivani ispis:
	//	-------------------------------------------
	//	Rezultat pretrage ->
	//	-------------------------------------------
	//	PAKOVANJE Pakovanje je bio osteceno
	//	KVALITET Jako lose, proizvod ostecen
	//	-------------------------------------------
	//*/

	//for (size_t i = 0; i < maxKupaca; i++)
	//	delete kupci[i], kupci[i] = nullptr;

	cin.get();
	system("pause>0");
}