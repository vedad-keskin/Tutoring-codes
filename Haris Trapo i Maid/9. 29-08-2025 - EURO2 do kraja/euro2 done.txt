#include <iostream>

#include <vector>
#include <regex>
#include <string>

#include <thread>
#include <mutex>

#include <fstream>
#include <memory>

#include <sstream>
#include <ctime>


using namespace std;
const char* PORUKA = "\n-------------------------------------------------------------------------------\n"
"0. PROVJERITE DA LI PREUZETI ZADACI PRIPADAJU VASOJ GRUPI (G1/G2)\n"
"1. SVE KLASE TREBAJU POSJEDOVATI ADEKVATAN DESTRUKTOR\n"
"2. NAMJERNO IZOSTAVLJANJE KOMPLETNIH I/ILI POJEDINIH DIJELOVA DESTRUKTORA CE BITI OZNACENO KAO TM\n"
"3. SPASAVAJTE PROJEKAT KAKO BI SE SPRIJECILO GUBLJENJE URADJENOG ZADATKA\n"
"4. ATRIBUTI, NAZIVI METODA (SVE ISTO VAZI I ZA FUNKCIJE), TE BROJ ITIP PARAMETARA MORAJU BITI IDENTICNI "
"ONIMA KOJI SU KORISTENI U TESTNOM CODE - U, OSIM U SLUCAJU DA POSTOJI ADEKVATAN RAZLOG ZA NJIHOVU MODIFIKACIJU. "
"OSTALE POMOCNE METODE MOZETE IMENOVATI I DODAVATI PO ZELJI.\n"
"5. IZUZETAK BACITE SAMO U METODAMA U KOJIMA JE TO NAZNACENO.\n"
"6. SVE METODE POZVANE U MAIN-U ZADATKA TREBAJU POSTOJATI. UKOLIKO NISTE ZADOVOLJNI IMPLEMENTACIJOM "
"POTREBNO JE DA IMPLEMENTIRATE BAREM TIJELO TIH METODA (METODA MOZE BITI PRAZNA), "
"A AKO METODA TREBA VRATITI NEKI PODATAK ONDA MOZETE VRATITI BILO KOJU TJ.ZELJENU VRIJEDNOST ZAHTIJEVANOG TIPA.!\n"
"7. NA KRAJU ISPITA SVOJE RJESENJE KOPIRAJTE U .DOCX FAJL (IMENOVAN BROJEM INDEKSA npr.IB150051.docx)!\n"
"8. RJESENJA ZADATKA POSTAVITE NA FTP SERVER U ODGOVARAJUCI FOLDER!\n"
"9. NEMOJTE POSTAVLJATI VISUAL STUDIO PROJEKTE, VEC SAMO .DOCX FAJL SA VASIM RJESENJEM!\n"
"10.SVE NEDOZVOLJENE RADNJE TOKOM ISPITA CE BITI SANKCIONISANE!\n"
"11.ZA POTREBE TESTIRANJA, U MAIN-U, BUDITE SLOBODNI DODATI TESTNIH PODATAKA(POZIVA METODA) KOLIKO GOD SMATRATE DA JE POTREBNO!\n"
"12.ZA IZRADU ISPITNOG RJESENJA KORISTITI VISUAL STUDIO 2022 I RJESENJE TESTIRAJTE U OBA MODA(F5 i Ctrl + F5)!\n"
"13.NA KRAJU ISPITA PROVJERITE DA LI STE RJEÃ… ENJE KOPIRALI U ADEKVATAN FOLDER NA FTP SERVERU\n"
"-------------------------------------------------------------------------------\n";
const char* crt = "\n-------------------------------------------\n";
enum Drzava {
	ENGLESKA, SPANIJA, HOLANDIJA, FRANCUSKA, BOSNA_I_HERCEGOVINA
};

ostream& operator << (ostream& COUT, const Drzava& obj) {

	const char* KopijaDrzava[] {
		"ENGLESKA", "SPANIJA", "HOLANDIJA", "FRANCUSKA", "BOSNA_I_HERCEGOVINA"
	};

	COUT << KopijaDrzava[obj];

	return COUT;
}


char* GetNizKaraktera(const char* sadrzaj, bool dealociraj = false) {
	if (sadrzaj == nullptr)return nullptr;
	int vel = strlen(sadrzaj) + 1;
	char* temp = new char[vel];
	strcpy_s(temp, vel, sadrzaj);
	if (dealociraj)
		delete[]sadrzaj;
	return temp;
}

/*
Globalna funkcija GenerisiID vraca ID igraca na osnovu vrijednosti
proslijedjenih parametara. Funkcija generise
 ID sa maksimalno 4 cifre, ne racunajuci inicijale tj. prva slova
imena i prezimena.
 Podrazumijeva se da ce uvijek biti proslijedjene validne
vrijednosti parametara. Ukoliko se proslijede
 mala pocetna slova imena ili prezimena, potrebno ih je
konvertovati u velika.
 U okviru generisanog ID-a, proslijedjena cjelobrojna vrijednost
treba biti u obrnutom redoslijedu cifara.
 */



char FindFirstLetterSurname(const char* imeprezime) {

	for (int i = 0; i < strlen(imeprezime); i++)
	{
		if (isspace(imeprezime[i])) {
			return imeprezime[i + 1];
		}
	}

}

int ReverseNum(int id) {

	int temp = 0;

	while (id != 0) {

		temp *= 10;
		temp += id % 10;
		id /= 10;

	}

	return temp;

}

//cout << GenerisiID("Denis Music", 3) << endl;      //treba vratiti D000M3
//cout << GenerisiID("Jasmin Azemovic", 14) << endl; //treba vratiti J00A41
//cout << GenerisiID("Goran Skondric", 156) << endl; //treba vratiti G0S651
//cout << GenerisiID("emina junuz", 1798) << endl;   //treba vratiti EJ8971


char* GenerisiID(const char* imeprezime, int id) {

	char FirstLetterN = toupper(imeprezime[0]); // E

	//char PrvoSlovoPrezimena = toupper(imeprezime[imeprezime.find(' ') + 1]); // J 
	char FirstLetterLN = toupper(FindFirstLetterSurname(imeprezime));         // J 

	int ReversedNum = ReverseNum(id); // 41 

	char temp[10];

	if (id < 10) { // treba vratiti D000M3

		sprintf_s(temp, "%c000%c%d", FirstLetterN, FirstLetterLN, ReversedNum); // %c - char , %s - string , %d - decimal

	}
	else if (id < 100) { // treba vratiti J00A41

		sprintf_s(temp, "%c00%c%d", FirstLetterN, FirstLetterLN, ReversedNum); // %c - char , %s - string , %d - decimal

	}
	else if (id < 1000) { // treba vratiti G0S651


		sprintf_s(temp, "%c0%c%d", FirstLetterN, FirstLetterLN, ReversedNum); // %c - char , %s - string , %d - decimal

	}
	else { // treba vratiti EJ8971

		sprintf_s(temp, "%c%c%d", FirstLetterN, FirstLetterLN, ReversedNum); // %c - char , %s - string , %d - decimal

	}

	return GetNizKaraktera(temp);

}

////Za validaciju ID-a koristiti funkciju ValidirajID koja treba, koristeci regex, osigurati postivanje osnovnih pravila
////vezanih za format koja su definisana u prethodnom dijelu zadatka.

//cout << GenerisiID("Denis Music", 3) << endl;      //treba vratiti D 000M3
//cout << GenerisiID("Jasmin Azemovic", 14) << endl; //treba vratiti J 00A41
//cout << GenerisiID("Goran Skondric", 156) << endl; //treba vratiti G 0S651
//cout << GenerisiID("emina junuz", 1798) << endl;   //treba vratiti E J8971

// 1. [ ] ---> RANGE ... [A-Z] , [0-9] , [a-z] , [A-Za-z0-9] , [- ] <--- uvijek same znaci da je jedno ono sto se nalazi unutra

// 2. { } ---> VELICINA ... [A-Z]{2} , {2,5} , {5,} , {,5}

// 3. ( ) ---> TACAN TEKST ... (gmail) , (com|ba) 

bool ValidirajID(const char* ID) {

	//               D      000M3            00A41        0S651           J8971
	regex pattern("[A-Z](000[A-Z][0-9]|00[A-Z][0-9]{2}|0[A-Z][0-9]{3}|[A-Z][0-9]{4})");

	return regex_match(ID, pattern);

}

/*
Globalna funkcija GenerisiID vraca ID igraca (format: ID#00-ID) na
osnovu int vrijednosti proslijedjene
 kao parametar. Funkcija generise ID sa maksimalno 4 cifre, ne
racunajuci ostale, podrazumijevane, znakove.
 Podrazumijeva se da ce uvijek biti proslijedjena validna int
vrijednost.
 */
 //cout << GenerisiID(3) << endl;//treba vratiti ID#000-3
 //cout << GenerisiID(14) << endl;//treba vratiti ID#00-14
 //cout << GenerisiID(156) << endl;//treba vratiti ID#0-156
 //cout << GenerisiID(1798) << endl;//treba vratiti ID#1798

char* GenerisiID2(int id) {

	char temp[10];

	if (id < 10) { // treba vratiti ID#000-3

		sprintf_s(temp, "ID#000-%d", id); // %c - char , %s - string , %d - decimal

	}
	else if (id < 100) { // treba vratiti ID#00-14

		sprintf_s(temp, "ID#00-%d", id); // %c - char , %s - string , %d - decimal


	}
	else if (id < 1000) { // treba vratiti ID#0-156


		sprintf_s(temp, "ID#0-%d", id); // %c - char , %s - string , %d - decimal

	}
	else { // treba vratiti ID#1798

		sprintf_s(temp, "ID#%d", id); // %c - char , %s - string , %d - decimal

	}

	return GetNizKaraktera(temp);

}


// 1. [ ] ---> RANGE ... [A-Z] , [0-9] , [a-z] , [A-Za-z0-9] , [- ] <--- uvijek same znaci da je jedno ono sto se nalazi unutra

// 2. { } ---> VELICINA ... [A-Z]{2} , {2,5} , {5,} , {,5}

// 3. ( ) ---> TACAN TEKST ... (gmail) , (com|ba) 

//cout << GenerisiID2(3) << endl;     // treba vratiti ID# 000-3
//cout << GenerisiID2(14) << endl;    // treba vratiti ID# 00-14
//cout << GenerisiID2(156) << endl;   // treba vratiti ID# 0-156
//cout << GenerisiID2(1798) << endl;  // treba vratiti ID# 1798

bool ValidirajID2(const char* ID) {

	//             ID#   000-3       00-14          0-156         1798
	regex pattern("ID#(000-[1-9]|00-[1-9][0-9]|0-[1-9][0-9]{2}|[1-9][0-9]{3})");

	return regex_match(ID, pattern);

}



template<class T1, class T2, int max>
class Kolekcija {
	T1 _elementi1[max];
	T2 _elementi2[max];
	int* _trenutno;
public:

	Kolekcija() {

		_trenutno = new int(0);

		// ako su zadaci sa maxom ovdje ne radite nista

	}

	Kolekcija(const Kolekcija& obj) {

		_trenutno = new int(*obj._trenutno);

		for (int i = 0; i < *_trenutno; i++)
		{
			_elementi1[i] = obj._elementi1[i];
			_elementi2[i] = obj._elementi2[i];
		}

	}

	Kolekcija& operator = (const Kolekcija& obj) {
		if (this != &obj) {

			delete _trenutno;

			_trenutno = new int(*obj._trenutno);

			for (int i = 0; i < *_trenutno; i++)
			{
				_elementi1[i] = obj._elementi1[i];
				_elementi2[i] = obj._elementi2[i];
			}

		}
		return *this;
	}

	void AddElement(T1 el1, T2 el2) {


		_elementi1[*_trenutno] = el1;
		_elementi2[*_trenutno] = el2;

		(*_trenutno)++;

	}

	/* metoda InsertAt treba da doda vrijednosti prvog i drugog
parametra na lokaciju koja je definisana trecim parametrom. Povratna
vrijednost metode
 je objekat (pozivaoc metode, u konkretnom slucaju objekat
kolekcija1) u okviru koga su, na definisanu lokaciju, dodati
zahtijevani parametri.
 Nakon izvrsenja metode InsertAt, oba objekta, kolekcija1 i
kolekcija2, bi trebali posjedovati sljedeci sadrzaj:
 10 10
 0 0
 1 1
 2 2
 * ....
 */
 //Kolekcija<int, int, 10> kolekcija2 = kolekcija1.InsertAt(10, 10, 0);
 //cout << kolekcija2 << crt;

	Kolekcija InsertAt(T1 el1, T2 el2, int lokacija) { // 10 10 0 

		Kolekcija kolekcija2;

		for (int i = 0; i < *_trenutno; i++) // 0 1 2 3 4 5 6 7 8
		{
			if (i == lokacija) {

				kolekcija2.AddElement(el1, el2);

			}

			kolekcija2.AddElement(_elementi1[i], _elementi2[i]);

		}

		*this = kolekcija2; // op = 

		return kolekcija2;

	}

	/*Metoda RemoveRange prihvata lokacija OD i DO, te u tom opsegu
uklanja sve elemente iz kolekcije. U slucaju da zahtijevani opseg ne
postoji u kolekciji
 metoda treba baciti izuzetak. Na kraju, metoda treba da vrati
pokazivac na novi objekat tipa kolekcija koji sadrzi samo uklonjene
elemente

// Not the professor here, ovdje ne treba vratiti pokazivac,
// to je izgleda greska tokom pravljenja postavke za ispit ostala
	//Kolekcija<int, int, 10> kolekcija3 = kolekcija1.RemoveRange(1, 3);
	//cout << kolekcija3 << endl;
	//cout << kolekcija1 << crt;
	/*kolekcija3 bi trebala sadrzavati sljedece elemente:
	0 0
	1 1
	2 2
	dok bi kolekcija1 trebala sadrzavati sljedece elemente:
	10 10
	3 3
	4 4
	......
*/
	Kolekcija RemoveRange(int lokacijaOd, int lokacijaDo) { // 1 , 3 


		Kolekcija kolekcija3;

		Kolekcija kolekcija1;


		for (int i = 0; i < *_trenutno; i++)
		{

			if (i >= lokacijaOd && i <= lokacijaDo) { // 1 2 3 

				kolekcija3.AddElement(_elementi1[i], _elementi2[i]);

			}
			else {

				kolekcija1.AddElement(_elementi1[i], _elementi2[i]);

			}

		}

		*this = kolekcija1;


		return kolekcija3;


	}


	//Kolekcija<int, int, 10>* kolekcija3 = kolekcija1.RemoveRange(1, 3);
	//cout << *kolekcija3 << endl;
	//cout << kolekcija1 << crt;

	//Kolekcija* RemoveRange(int lokacijaOd, int lokacijaDo) { // 1 , 3 


	//	Kolekcija* kolekcija3 = new Kolekcija();

	//	Kolekcija kolekcija1;


	//	for (int i = 0; i < *_trenutno; i++)
	//	{

	//		if (i >= lokacijaOd && i <= lokacijaDo) { // 1 2 3 

	//			kolekcija3->AddElement(_elementi1[i], _elementi2[i]);

	//		}
	//		else {

	//			kolekcija1.AddElement(_elementi1[i], _elementi2[i]);

	//		}

	//	}

	//	*this = kolekcija1;


	//	return kolekcija3;


	//}

	~Kolekcija() {
		delete _trenutno; _trenutno = nullptr;
	}

	T1& getElement1(int lokacija) { return _elementi1[lokacija]; }
	T2& getElement2(int lokacija) { return _elementi2[lokacija]; }
	int getTrenutno() const { return *_trenutno; }

	friend ostream& operator<< (ostream& COUT, Kolekcija& obj) {
		for (size_t i = 0; i < *obj._trenutno; i++)
			COUT << obj.getElement1(i) << " " << obj.getElement2(i) << endl;
		return COUT;
	}
};
class Vrijeme { // Datum ili Vrijeme(Termin)
	int* _sat, * _minuta, * _sekunda;
public:
	Vrijeme(int sat = 10, int minuta = 0, int sekunda = 0) {
		_sat = new int(sat);
		_minuta = new int(minuta);
		_sekunda = new int(sekunda);
	}

	Vrijeme(const Vrijeme& obj) {

		_sat = new int(*obj._sat);
		_minuta = new int(*obj._minuta);
		_sekunda = new int(*obj._sekunda);

	}

	Vrijeme& operator = (const Vrijeme& obj) {
		if (this != &obj) {

			delete _sat;
			delete _minuta;
			delete _sekunda;

			_sat = new int(*obj._sat);
			_minuta = new int(*obj._minuta);
			_sekunda = new int(*obj._sekunda);

		}
		return *this;
	}

	bool operator == (const Vrijeme& obj) {

		return *_sat == *obj._sat && *_minuta == *obj._minuta && *_sekunda == *obj._sekunda;

	}

	int toSeconds() {

		return *_sekunda + *_minuta * 60 + *_sat * 3600;

	}

	~Vrijeme() {
		delete _sat; _sat = nullptr;
		delete _minuta; _minuta = nullptr;
		delete _sekunda; _sekunda = nullptr;
	}

	friend ostream& operator<< (ostream& COUT, const Vrijeme& obj) {
		COUT << *obj._sat << ":" << *obj._minuta << ":" << *obj._sekunda;
		return COUT;
	}
};
class Pogodak {
	Vrijeme* _vrijemePogotka;
	char* _napomena;
public:
	Pogodak(Vrijeme vrijeme, const char* napomena) {
		_napomena = GetNizKaraktera(napomena);
		_vrijemePogotka = new Vrijeme(vrijeme);
	}

	Pogodak(const Pogodak& obj) {

		_napomena = GetNizKaraktera(obj._napomena);
		_vrijemePogotka = new Vrijeme(*obj._vrijemePogotka);

	}

	Pogodak& operator = (const Pogodak& obj) {
		if (this != &obj) {

			delete[] _napomena;
			delete _vrijemePogotka;

			_napomena = GetNizKaraktera(obj._napomena);
			_vrijemePogotka = new Vrijeme(*obj._vrijemePogotka);

		}
		return *this;
	}

	bool operator == (const Pogodak& obj) {

		return *_vrijemePogotka == *obj._vrijemePogotka && strcmp(_napomena, obj._napomena) == 0;

	}

	~Pogodak() {
		delete[] _napomena; _napomena = nullptr;
		delete _vrijemePogotka; _vrijemePogotka = nullptr;
	}

	Vrijeme GetVrijemePogotka() { return *_vrijemePogotka; }
	char* GetNapomena() { return _napomena; }

	friend ostream& operator<< (ostream& COUT, const Pogodak& obj) {
		COUT << *obj._vrijemePogotka << " -> " << obj._napomena;
		return COUT;
	}
};
class Igrac {
	static int _id;
	char* _ID; // za inicijalizaciju _ID-a iskoristiti funkciju GenerisiID tj.atributa _imePrezime(inicijala imena i prezimena) i statickog clana _id
	char* _imePrezime;
	vector<Pogodak*> _pogoci;
public:
	Igrac(const char* imePrezime) {
		_imePrezime = GetNizKaraktera(imePrezime);

		_id++; // 0 --> 1 

		_ID = GenerisiID(_imePrezime, _id);

	}

	bool DodajPogodak(Pogodak pogodak) {

		for (int i = 0; i < _pogoci.size(); i++)
		{
			if (pogodak == *_pogoci[i]) {

				return false;

			}
		}

		_pogoci.push_back(new Pogodak(pogodak));

		return true;
	}

	Igrac(const Igrac& obj) {

		_ID = GetNizKaraktera(obj._ID);
		_imePrezime = GetNizKaraktera(obj._imePrezime);


		for (int i = 0; i < obj._pogoci.size(); i++)
		{
			_pogoci.push_back(new Pogodak(*obj._pogoci[i]));
		}

	}

	Igrac& operator = (const Igrac& obj) {
		if (this != &obj) {

			delete[]_ID; 
			delete[]_imePrezime;
			for (size_t i = 0; i < _pogoci.size(); i++) {
				delete _pogoci[i];
			}


			_ID = GetNizKaraktera(obj._ID);
			_imePrezime = GetNizKaraktera(obj._imePrezime);


			for (int i = 0; i < obj._pogoci.size(); i++)
			{
				_pogoci.push_back(new Pogodak(*obj._pogoci[i]));
			}
		}
		return *this;
	}

	bool operator == (const Igrac& obj) {

		return strcmp(_ID , obj._ID) == 0;

	}

	~Igrac() {
		delete[]_ID; _ID = nullptr;
		delete[]_imePrezime; _imePrezime = nullptr;
		for (size_t i = 0; i < _pogoci.size(); i++) {
			delete _pogoci[i];
			_pogoci[i] = nullptr;
		}
	}

	char* GetImePrezime() { return _imePrezime; }
	char* GetID() { return _ID; }
	vector<Pogodak*>& GetPogoci() { return _pogoci; }

	friend ostream& operator<< (ostream& COUT, Igrac& obj) {
		COUT << obj._ID << " -> " << obj._imePrezime;
		for (size_t i = 0; i < obj._pogoci.size(); i++)
			cout << *obj._pogoci[i] << endl;
		return COUT;
	}
};
int Igrac::_id = 0;


class Reprezentacija {
	Drzava _drzava;
	vector<Igrac> _igraci;
public:

	Reprezentacija(Drzava drzava = BOSNA_I_HERCEGOVINA) {
		_drzava = drzava;
	}

	Reprezentacija(const Reprezentacija& obj) {

		_drzava = obj._drzava;
		_igraci = obj._igraci;

	}

	Reprezentacija& operator = (const Reprezentacija& obj) {
		if (this != &obj) {


			_drzava = obj._drzava;
			_igraci = obj._igraci;

		}
		return *this;
	}

	bool operator == (const Reprezentacija& obj) {

		return _drzava == obj._drzava;

	}

	int GetBrojGolova() {

		int ukupno = 0;

		for (int i = 0; i < _igraci.size(); i++)
		{

			for (int j = 0; j < _igraci[i].GetPogoci().size(); j++)
			{
				ukupno++;
			}

		}

		return ukupno;

	}

	void AddIgrac(Igrac igrac) {

		for (int i = 0; i < _igraci.size(); i++)
		{
			if (igrac == _igraci[i]) {

				throw exception("Igrac je vec u reprezentaciji");

			}
		}

		_igraci.push_back(igrac);

	}

	~Reprezentacija() {

	}

	Drzava GetDrzava() { return _drzava; }
	vector<Igrac>& GetIgraci() { return _igraci; }

	friend ostream& operator << (ostream& COUT, const Reprezentacija& obj) {

		COUT << obj._drzava ;

		return COUT;
	}


};

mutex m;
class Prventstvo {
	Kolekcija<Reprezentacija, Reprezentacija, 20> _utakmice;
public:

	Prventstvo() {

	}

	Prventstvo(const Prventstvo& obj) {

		_utakmice = obj._utakmice;

	}

	Prventstvo& operator = (const Prventstvo& obj) {
		if (this != &obj) {


			_utakmice = obj._utakmice;

		}
		return *this;
	}

	~Prventstvo() {


	}


	Kolekcija<Reprezentacija, Reprezentacija, 20>& GetUtakmice() {
		return _utakmice;
	}

	void AddUtakmicu(Reprezentacija rep1, Reprezentacija rep2) {

		for (int i = 0; i < _utakmice.getTrenutno(); i++)
		{
			if (rep1 == _utakmice.getElement1(i) && rep2 == _utakmice.getElement2(i)) {
				throw exception("Utakmica je vec dodana");
			}
		}


		_utakmice.AddElement(rep1, rep2);

	}

	////nakon svakog evidentiranog pogotka, svim igracima te utakmice (pod pretpostavkom da su validne email adrese sa ID - ovima igraca),
	////u zasebnom thread-u, poslati email. u razmaku od 2 sekunde, sa sljedecim sadrzajem :
	///*
	//To: D000M1@euro2024.com
	//From: info@euro2024.com
	//Subject: Informacija
	// 
	//Postovani,
	// 
	//U 20:35:16 sati igrac Jasmin Azemovic je zabiljezio svoj 1 pogodak na ovoj utakmici.
	// 
    //Trenutni rezultat je:
    //BOSNA_I_HERCEGOVINA 2 : 0 ENGLESKA
    // 
    //Puno srece u nastavku susreta.
    //Neka bolji tim pobijedi.
    //*/

	void SendMail(const char* svakiID, Vrijeme vrijemePogotka, Igrac igracKojiJeDaoGol, Reprezentacija rep1, Reprezentacija rep2) {

		m.lock();

		cout << endl << "To: " << svakiID << "@euro2024.com" << endl;
		cout << "From: info@euro2024.com" << endl;
		cout << "Subject: Informacija" << endl << endl;
		cout << "Postovani," << endl << endl;
		cout << "U "<< vrijemePogotka << " sati igrac " << igracKojiJeDaoGol.GetImePrezime() <<" je zabiljezio svoj "<< igracKojiJeDaoGol.GetPogoci().size() << " pogodak na ovoj utakmici." << endl << endl;
		cout << "Trenutni rezultat je:" << endl;
		cout << rep1 << " " << rep1.GetBrojGolova() << " : "<< rep2.GetBrojGolova() << " "<< rep2 << endl << endl;
		cout << "Puno srece u nastavku susreta." << endl;
		cout << "Neka bolji tim pobijedi." << endl << endl;

		m.unlock();

	}


	bool AddPogodak(Reprezentacija rep1, Reprezentacija rep2, const char* IDiliIP, Pogodak pogodak) {

		// proci kroz sve utakmice

		for (int i = 0; i < _utakmice.getTrenutno(); i++)
		{

			// pronaci utakmicu gdje je domacin rep1 a gost rep2

			if (rep1 == _utakmice.getElement1(i) && rep2 == _utakmice.getElement2(i)) {


				// proci kroz igrace rep1

				for (int j = 0; j < _utakmice.getElement1(i).GetIgraci().size(); j++)
				{

					// pronaci igraca koji ima IP ili ID isti onog koji je proslijedjen

					if (strcmp(IDiliIP, _utakmice.getElement1(i).GetIgraci()[j].GetID()) == 0 || 
						strcmp(IDiliIP, _utakmice.getElement1(i).GetIgraci()[j].GetImePrezime()) == 0) {

						// kada smo pronasli igraca sada mu trebamo dodati pogodak

						

						// ako zelite da i tekst dobijete
						//return _utakmice.getElement1(i).GetIgraci()[j].DodajPogodak(pogodak) ? true : false;


						if (!_utakmice.getElement1(i).GetIgraci()[j].DodajPogodak(pogodak)) {
							return false;
						}

						Igrac igracKojiJeDaoGol = _utakmice.getElement1(i).GetIgraci()[j];

						// poslati mail svakom igracu rep1

						for (int k = 0; k < _utakmice.getElement1(i).GetIgraci().size(); k++)
						{
							Igrac svakiIgrac = _utakmice.getElement1(i).GetIgraci()[k];

							this_thread::sleep_for(chrono::seconds(2));

							thread t1(&Prventstvo::SendMail, this, svakiIgrac.GetID(), pogodak.GetVrijemePogotka(), igracKojiJeDaoGol, _utakmice.getElement1(i), _utakmice.getElement2(i));

							t1.join();


						}

						// poslati mail svakom igracu rep2

						for (int k = 0; k < _utakmice.getElement2(i).GetIgraci().size(); k++)
						{
							Igrac svakiIgrac = _utakmice.getElement2(i).GetIgraci()[k];

							this_thread::sleep_for(chrono::seconds(2));

							thread t1(&Prventstvo::SendMail, this, svakiIgrac.GetID(), pogodak.GetVrijemePogotka(), igracKojiJeDaoGol, _utakmice.getElement1(i), _utakmice.getElement2(i));

							t1.join();

						}

						return true;


					}

				}

				// proci kroz igrace rep2

				for (int j = 0; j < _utakmice.getElement2(i).GetIgraci().size(); j++)
				{

					// pronaci igraca koji ima IP ili ID isti onog koji je proslijedjen

					if (strcmp(IDiliIP, _utakmice.getElement2(i).GetIgraci()[j].GetID()) == 0 ||
						strcmp(IDiliIP, _utakmice.getElement2(i).GetIgraci()[j].GetImePrezime()) == 0) {

						// kada smo pronasli igraca sada mu trebamo dodati pogodak

						//_utakmice.getElement1(i).GetIgraci()[j].GetPogoci().push_back(new Pogodak(pogodak));

						if (!_utakmice.getElement2(i).GetIgraci()[j].DodajPogodak(pogodak)) {
							return false;
						}


						Igrac igracKojiJeDaoGol = _utakmice.getElement2(i).GetIgraci()[j];

						// poslati mail svakom igracu rep1

						for (int k = 0; k < _utakmice.getElement1(i).GetIgraci().size(); k++)
						{
							Igrac svakiIgrac = _utakmice.getElement1(i).GetIgraci()[k];

							this_thread::sleep_for(chrono::seconds(2));

							thread t1(&Prventstvo::SendMail, this, svakiIgrac.GetID(), pogodak.GetVrijemePogotka(), igracKojiJeDaoGol, _utakmice.getElement1(i), _utakmice.getElement2(i));

							t1.join();


						}

						// poslati mail svakom igracu rep2

						for (int k = 0; k < _utakmice.getElement2(i).GetIgraci().size(); k++)
						{
							Igrac svakiIgrac = _utakmice.getElement2(i).GetIgraci()[k];

							this_thread::sleep_for(chrono::seconds(2));

							thread t1(&Prventstvo::SendMail, this, svakiIgrac.GetID(), pogodak.GetVrijemePogotka(), igracKojiJeDaoGol, _utakmice.getElement1(i), _utakmice.getElement2(i));

							t1.join();

						}


						return true;


					}

				}






			}
		}

	}

	///*
	//-------------------------------------------
	//(3) BOSNA_I_HERCEGOVINA : ENGLESKA (1)
	//-------------------------------------------
	//Denis Music               Goran Skondric
	//Jasmin Azemovic
	//Jasmin Azemovic
	//-------------------------------------------
	//*/

	friend ostream& operator << (ostream& COUT, Prventstvo& obj) {


		// proci kroz sve utakmice

		for (int i = 0; i < obj._utakmice.getTrenutno(); i++)
		{	
			//-------------------------------------------
			//(3) BOSNA_I_HERCEGOVINA : ENGLESKA (1)
			//-------------------------------------------

			COUT << crt << "(" << obj._utakmice.getElement1(i).GetBrojGolova() << ") " << obj._utakmice.getElement1(i) << " : " << obj._utakmice.getElement2(i) << " (" << obj._utakmice.getElement2(i).GetBrojGolova() << ")" << crt;

			//Denis Music               
			//Jasmin Azemovic
			//Jasmin Azemovic
			//                          Goran Skondric
			//-------------------------------------------

			// proci kroz igrace rep1

			for (int j = 0; j < obj._utakmice.getElement1(i).GetIgraci().size(); j++)
			{

				// proci kroz golove igraca rep1

				for (int k = 0; k < obj._utakmice.getElement1(i).GetIgraci()[j].GetPogoci().size(); k++)
				{

					COUT << obj._utakmice.getElement1(i).GetIgraci()[j].GetImePrezime() << endl;

				}
			
			}

			// proci kroz igrace rep2

			for (int j = 0; j < obj._utakmice.getElement2(i).GetIgraci().size(); j++)
			{

				// proci kroz golove igraca rep2

				for (int k = 0; k < obj._utakmice.getElement2(i).GetIgraci()[j].GetPogoci().size(); k++)
				{

					COUT << "                          " << obj._utakmice.getElement2(i).GetIgraci()[j].GetImePrezime() << endl;

				}

			}

			COUT << "-------------------------------------------" << endl << endl;


		}


		return COUT;
	}


	//vraca sve igrace koji su na takmicenju postigli broj pogodaka koji je veci ili jednak proslijedjenoj vrijednosti
	//vector<Igrac*> igraci = euro2024(2);
	//for (size_t i = 0; i < igraci.size(); i++)
	//	cout << igraci[i]->GetImePrezime() << endl;

	vector<Igrac*> operator () (int brPogodaka) {

		vector<Igrac*> igraci;

		// proci kroz sve utakmice

		for (int i = 0; i < _utakmice.getTrenutno(); i++)
		{
			// proci kroz igrace rep1

			for (int j = 0; j < _utakmice.getElement1(i).GetIgraci().size(); j++)
			{

				// provjeriti da li je igrac dao vise ili jednako pogodaka od proslijedjene vrijednosti

				if (_utakmice.getElement1(i).GetIgraci()[j].GetPogoci().size() >= brPogodaka) {

					igraci.push_back(new Igrac(_utakmice.getElement1(i).GetIgraci()[j]));

				}

			}

			// proci kroz igrace rep2

			for (int j = 0; j < _utakmice.getElement2(i).GetIgraci().size(); j++)
			{

				// provjeriti da li je igrac dao vise ili jednako pogodaka od proslijedjene vrijednosti

				if (_utakmice.getElement2(i).GetIgraci()[j].GetPogoci().size() >= brPogodaka) {

					igraci.push_back(new Igrac(_utakmice.getElement2(i).GetIgraci()[j]));

				}

			}


		}


		return igraci;


	}

	//Vrijeme
//	prviPogodak201633(20, 16, 33),
//	drugiPogodak202319(20, 23, 19),
//	treciPogodak205108(20, 51, 8),
//	cetvrtiPogodak210654(21, 6, 54);

//                          Vrijeme(20, 15, 15), Vrijeme(20, 24, 15));
	vector<Igrac*> operator () (Vrijeme vrijemeOd, Vrijeme vrijemeDo) {

		vector<Igrac*> igraci;

		// prolazak kroz sve utakmice

		for (int i = 0; i < _utakmice.getTrenutno(); i++)
		{
			// proci kroz igrace rep1

			for (int j = 0; j < _utakmice.getElement1(i).GetIgraci().size(); j++)
			{
				// proci kroz golove igraca rep1

				for (int k = 0; k < _utakmice.getElement1(i).GetIgraci()[j].GetPogoci().size(); k++)
				{
					Igrac igracKojiJeDaoPogodak = _utakmice.getElement1(i).GetIgraci()[j];
					Pogodak pogodak = *_utakmice.getElement1(i).GetIgraci()[j].GetPogoci()[k];

					// pronasli pogodak u datom range-u

					if (pogodak.GetVrijemePogotka().toSeconds() >= vrijemeOd.toSeconds()
						&& pogodak.GetVrijemePogotka().toSeconds() <= vrijemeDo.toSeconds()) {

						igraci.push_back(new Igrac(igracKojiJeDaoPogodak));

					}
				}
			}

			// proci kroz igrace rep2

			for (int j = 0; j < _utakmice.getElement2(i).GetIgraci().size(); j++)
			{
				// proci kroz golove igraca rep2

				for (int k = 0; k < _utakmice.getElement2(i).GetIgraci()[j].GetPogoci().size(); k++)
				{
					Igrac igracKojiJeDaoPogodak = _utakmice.getElement2(i).GetIgraci()[j];
					Pogodak pogodak = *_utakmice.getElement2(i).GetIgraci()[j].GetPogoci()[k];

					// pronasli pogodak u datom range-u

					if (pogodak.GetVrijemePogotka().toSeconds() >= vrijemeOd.toSeconds()
						&& pogodak.GetVrijemePogotka().toSeconds() <= vrijemeDo.toSeconds()) {

						igraci.push_back(new Igrac(igracKojiJeDaoPogodak));

					}
				}
			}


		}



		return igraci;
	}



};
const char* GetOdgovorNaPrvoPitanje() {
	cout << "Pitanje -> Pojasnite osnovne preduslove koji moraju biti ispunjeni da bi se realizovao polimorfizam(navesti kratki primjer) ? \n";
	return "Odgovor -> OVDJE UNESITE VAS ODGOVOR";
}
const char* GetOdgovorNaDrugoPitanje() {
	cout << "Pitanje -> Pojasnite razloge koristenja kljucnih rijeci abstract i ciste virtualne metode, te razlike izmedju njih ? \n";
	return "Odgovor -> OVDJE UNESITE VAS ODGOVOR";
}
void main() {
	cout << PORUKA;
	cin.get();
	cout << GetOdgovorNaPrvoPitanje() << endl;
	cin.get();
	cout << GetOdgovorNaDrugoPitanje() << endl;
	cin.get();
	/*
	Globalna funkcija GenerisiID vraca ID igraca na osnovu vrijednosti
   proslijedjenih parametara. Funkcija generise
	ID sa maksimalno 4 cifre, ne racunajuci inicijale tj. prva slova
   imena i prezimena.
	Podrazumijeva se da ce uvijek biti proslijedjene validne
   vrijednosti parametara. Ukoliko se proslijede
	mala pocetna slova imena ili prezimena, potrebno ih je
   konvertovati u velika.
	U okviru generisanog ID-a, proslijedjena cjelobrojna vrijednost
   treba biti u obrnutom redoslijedu cifara.
	*/

	cout << GenerisiID("Denis Music", 3) << endl;      //treba vratiti D000M3
	cout << GenerisiID("Jasmin Azemovic", 14) << endl; //treba vratiti J00A41
	cout << GenerisiID("Goran Skondric", 156) << endl; //treba vratiti G0S651
	cout << GenerisiID("emina junuz", 1798) << endl;   //treba vratiti EJ8971

	cout << GenerisiID2(3) << endl;     // treba vratiti ID#000-3
	cout << GenerisiID2(14) << endl;    // treba vratiti ID#00-14
	cout << GenerisiID2(156) << endl;   // treba vratiti ID#0-156
	cout << GenerisiID2(1798) << endl;  // treba vratiti ID#1798

	////Za validaciju ID-a koristiti funkciju ValidirajID koja treba, koristeci regex, osigurati postivanje osnovnih pravila
	////vezanih za format koja su definisana u prethodnom dijelu zadatka.
	if (ValidirajID("D000M3"))
		cout << "ID VALIDAN" << endl;
	if (ValidirajID("J00A41"))
		cout << "ID VALIDAN" << endl;
	if (!ValidirajID("G00S651"))
		cout << "ID NIJE VALIDAN" << endl;
	if (!ValidirajID("Ej8971"))
		cout << "ID NIJE VALIDAN" << endl;

	//Za validaciju ID-a koristiti funkciju ValidirajID koja treba, koristeci regex, osigurati postivanje osnovnih pravila
//vezanih za format koja su definisana u prethodnom dijelu zadatka.

	if (ValidirajID2("ID#000-3"))
		cout << "ID VALIDAN" << endl;
	if (ValidirajID2("ID#0-156"))
		cout << "ID VALIDAN" << endl;
	if (!ValidirajID2("ID#120-3"))
		cout << "ID NIJE VALIDAN" << endl;
	if (!ValidirajID2("ID#00-02"))
		cout << "ID NIJE VALIDAN" << endl;



	int kolekcijaTestSize = 9;
	Kolekcija<int, int, 10> kolekcija1;

	for (int i = 0; i < kolekcijaTestSize; i++)
		kolekcija1.AddElement(i, i);//dodaje vrijednosti u kolekciju
	cout << kolekcija1 << crt;


	/* metoda InsertAt treba da doda vrijednosti prvog i drugog
   parametra na lokaciju koja je definisana trecim parametrom. Povratna
   vrijednost metode
	je objekat (pozivaoc metode, u konkretnom slucaju objekat
   kolekcija1) u okviru koga su, na definisanu lokaciju, dodati
   zahtijevani parametri.
	Nakon izvrsenja metode InsertAt, oba objekta, kolekcija1 i
   kolekcija2, bi trebali posjedovati sljedeci sadrzaj:
	10 10
	0 0
	1 1
	2 2
	* ....
	*/
	Kolekcija<int, int, 10> kolekcija2 = kolekcija1.InsertAt(10, 10, 0);
	cout << kolekcija2 << crt;
	cout << kolekcija1 << crt;



	/*Metoda RemoveRange prihvata lokacija OD i DO, te u tom opsegu
   uklanja sve elemente iz kolekcije. U slucaju da zahtijevani opseg ne
   postoji u kolekciji
	metoda treba baciti izuzetak. Na kraju, metoda treba da vrati
   pokazivac na novi objekat tipa kolekcija koji sadrzi samo uklonjene
   elemente*/

   // Not the professor here, ovdje ne treba vratiti pokazivac, 
   // to je izgleda greska tokom pravljenja postavke za ispit ostala
	Kolekcija<int, int, 10> kolekcija3 = kolekcija1.RemoveRange(1, 3);
	cout << kolekcija3 << endl;
	cout << kolekcija1 << crt;

	//Kolekcija<int, int, 10>* kolekcija3 = kolekcija1.RemoveRange(1, 3);
	//cout << *kolekcija3 << endl;
	//cout << kolekcija1 << crt;


	/*kolekcija3 bi trebala sadrzavati sljedece elemente:
	0 0
	1 1
	2 2
	dok bi kolekcija1 trebala sadrzavati sljedece elemente:
	10 10
	3 3
	4 4
	......
	*/
	kolekcija1 = kolekcija3;
	cout << kolekcija1;
	Vrijeme
		prviPogodak201633(20, 16, 33),
		drugiPogodak202319(20, 23, 19),
		treciPogodak205108(20, 51, 8),
		cetvrtiPogodak210654(21, 6, 54);


	Igrac denis("Denis Music"), jasmin("Jasmin Azemovic"),
		goran("Goran Skondric"), adil("Adil Joldic");






	if (strcmp(denis.GetID(), "D000M1") == 0 && strcmp(jasmin.GetID(), "J000A2") == 0)
		cout << "ID se uspjesno generise!" << endl;

	Pogodak prviPogodak(prviPogodak201633, "podaci o prvom pogotku"),
		drugiPogodak(drugiPogodak202319, "podaci o drugom pogotku"),
		treciPogodak(treciPogodak205108, "podaci o trecem pogotku"),
		cetvrtiPogodak(cetvrtiPogodak210654, "podaci o cetvrtom pogotku");

	//denis.GetPogoci().push_back(new Pogodak(prviPogodak));
	//denis.DodajPogodak(drugiPogodak);

	//Igrac igracKopija = denis;

	//cout << igracKopija << endl;
	//cout << jasmin << endl;
	//cout << goran << endl;
	//cout << adil << endl;

	Reprezentacija BIH(BOSNA_I_HERCEGOVINA), ENG(ENGLESKA);
	BIH.AddIgrac(denis);
	BIH.AddIgrac(jasmin);
	ENG.AddIgrac(goran);
	ENG.AddIgrac(adil);

	try
	{
		BIH.AddIgrac(denis);//onemoguciti dodavanje istih igraca - provjeravati ID
	}
	catch (exception& obj)
	{
		cout << obj.what();
	}

	Prventstvo euro2024;
	euro2024.AddUtakmicu(BIH, ENG);
	try
	{
		euro2024.AddUtakmicu(BIH, ENG);//onemoguciti ponovne susrete drzava tokom istog prvenstva
	}
	catch (exception& obj)
	{
		cout << obj.what();
	}
	//omoguciti dodavanje pogotka po ID-u ili imenu i prezimenu
	if (euro2024.AddPogodak(BOSNA_I_HERCEGOVINA, ENGLESKA, "D000M1", prviPogodak))
		cout << "Pogodak uspjesno dodat" << endl;
	//onemoguciti dodavanje istih pogodaka
	if (!euro2024.AddPogodak(BOSNA_I_HERCEGOVINA, ENGLESKA, "Denis Music", prviPogodak))
		cout << "Pogodak NIJE uspjesno dodat" << endl;
	if (euro2024.AddPogodak(BOSNA_I_HERCEGOVINA, ENGLESKA, "J000A2", drugiPogodak))
		cout << "Pogodak uspjesno dodat" << endl;
	if (euro2024.AddPogodak(BOSNA_I_HERCEGOVINA, ENGLESKA, "Jasmin Azemovic", treciPogodak))
		cout << "Pogodak uspjesno dodat" << endl;
	if (euro2024.AddPogodak(BOSNA_I_HERCEGOVINA, ENGLESKA, "Goran Skondric", cetvrtiPogodak))
		cout << "Pogodak uspjesno dodat" << endl;
	////nakon svakog evidentiranog pogotka, svim igracima te utakmice (pod pretpostavkom da su validne email adrese sa ID - ovima igraca),
	////u zasebnom thread-u, poslati email. u razmaku od 2 sekunde, sa sljedecim sadrzajem :
	///*
	//To: D000M1@euro2024.com
	//From: info@euro2024.com
	//Subject: Informacija
	//Postovani,
	//U 20:35:16 sati igrac Jasmin Azemovic je zabiljezio svoj 1
 //  pogodak na ovoj utakmici.
	//Trenutni rezultat je:
	//BOSNA_I_HERCEGOVINA 2 : 0 ENGLESKA
	//Puno srece u nastavku susreta.
	//Neka bolji tim pobijedi.
	//*/
	////ispisuje detaljnije informacije o susretu, kako je navedeno u narednom ispisu
	cout << euro2024;
	///*
	//-------------------------------------------
	//(3) BOSNA_I_HERCEGOVINA : ENGLESKA (1)
	//-------------------------------------------
	//Denis Music Goran Skondric
	//Jasmin Azemovic
	//Jasmin Azemovic
	//-------------------------------------------
	//*/
	//vraca sve igrace koji su na takmicenju postigli broj pogodaka koji je veci ili jednak proslijedjenoj vrijednosti
	vector<Igrac*> igraci = euro2024(2);
	for (size_t i = 0; i < igraci.size(); i++)
		cout << igraci[i]->GetImePrezime() << endl;

	////vraca sve igrace koji su na takmicenju postigli pogodak u vremenu koje se nalazi izmedju proslijedjenih vrijednosti

	cout << crt;

	vector<Igrac*> igraci2 = euro2024(Vrijeme(20, 15, 15), Vrijeme(20, 24, 15));

	for (size_t i = 0; i < igraci2.size(); i++)
		cout << igraci2[i]->GetImePrezime() << endl;


	cin.get();
	system("pause>0");
}