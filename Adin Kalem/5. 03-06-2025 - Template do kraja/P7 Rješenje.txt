#include <iostream>
using namespace std;

char* GetNizKaraktera(const char* tekst) {
	if (tekst == nullptr)
		return nullptr;
	int vel = strlen(tekst) + 1;
	char* novi = new char[vel];
	strcpy_s(novi, vel, tekst);
	return novi;
}


template<class T>
class Kolekcija {
public:
	T* _niz;
	int _max;
	int _trenutno;

	Kolekcija(int max = 10) {

		_trenutno = 0;
		_max = max;

		_niz = new T[_max];

	}

	Kolekcija(const Kolekcija& obj) {

		_trenutno = obj._trenutno;
		_max = obj._max;

		_niz = new T[_max];
		
		for (int i = 0; i < _trenutno; i++)
		{
			_niz[i] = obj._niz[i];
		}

	}

	Kolekcija& operator = (const Kolekcija& obj) {
		if (this != &obj) {

			delete[] _niz;

			_trenutno = obj._trenutno;
			_max = obj._max;

			_niz = new T[_max];

			for (int i = 0; i < _trenutno; i++)
			{
				_niz[i] = obj._niz[i];
			}
		}
		return *this;
	}

	~Kolekcija() {

		delete[] _niz;
		_niz = nullptr;

	}

	friend ostream& operator << (ostream& COUT, const Kolekcija& obj) {

		for (int i = 0; i < obj._trenutno; i++)
		{
			COUT << obj._niz[i] << endl;
		}

		return COUT;

	}




	void AddElement(T el) { // <-- Zivotinja
		// Dodaje element tipa T u niz
		// Onemogućiti izlazak niza izvan opsega bacajem izuzetka tipa Exception
		// Onemogućiti dupliranje elemenata bacajem izuzetka tipa Exception


		if (_max == _trenutno) {
			throw exception("Niz je popunjen");
		}

		for (int i = 0; i < _trenutno; i++)
		{
			//  Zivotinja == Zivotinja ..
			if (el == _niz[i]) {
				throw exception("Dupliranje nije dozvoljeno");
			}
		}


		_niz[_trenutno] = el;

		_trenutno++;

	}


	bool IsEmpty() {
		// Vršiti provjeru da li je niz prazan

		if (_trenutno == 0) {
			return true;
		}
		return false;


	}


	bool RemoveLast() {
		// Uklanja zadnji element iz niza

		if (IsEmpty() == true) {
			return false;
		}


		_trenutno--;

		return true;


	}


	bool RemoveAt(int lokacija) {
		// Uklanja element na određenoj poziciji

		if (IsEmpty() == true || lokacija < 0 || lokacija > _trenutno) {
			return false;
		}


		for (int i = lokacija; i < _trenutno - 1; i++)
		{
			_niz[i] = _niz[i + 1];
		}
		
		_trenutno--;

		return true;



	}


	bool RemoveAt(T el) {
		// Uklanja element koji je jednak proslijeđenom

		for (int i = 0; i < _trenutno; i++)
		{
			if (el == _niz[i]) { // C == niz[i] --> i = 2 

				for (int j = i; j < _trenutno - 1; j++)
				{

					_niz[j] = _niz[j + 1];

				}
				_trenutno--;
				return true;

			}
		}
		return false;

	}


	void InsertAt(T el, int lokacija) {
		// Dodaje element na određenu lokaciju


		for (int i = _trenutno; i > lokacija; i--)
		{

			_niz[i] = _niz[i - 1];

		}

		_niz[lokacija] = el;

		_trenutno++;


	}


	T* GetNajmanjiElement() {
		// Vraća najmanji element iz niza i to kao pokazivač

		if (IsEmpty() == true) {
			return nullptr;
		}

		// 15	6	13	17	7	4	2

		T* najmanji = new T(_niz[0]); // 15 


		for (int i = 0; i < _trenutno; i++)
		{
			//      4     >  2
			if (*najmanji > _niz[i]) {

				*najmanji = _niz[i]; // 2

			}
		}

		return najmanji;

	}


};

class Zivotinja {
private:
	char* _naziv;
	int _tezina;
public:


	Zivotinja(const char* naziv = "---", int tezina = 0) {

		_naziv = GetNizKaraktera(naziv);
		_tezina = tezina;

	}

	Zivotinja(const Zivotinja& obj) {

		_naziv = GetNizKaraktera(obj._naziv);
		_tezina = obj._tezina;

	}

	Zivotinja& operator = (const Zivotinja& obj) {
		if (this != &obj) {

			delete[] _naziv;


			_naziv = GetNizKaraktera(obj._naziv);
			_tezina = obj._tezina;
		}
		return *this;
	}


	~Zivotinja() {

		delete[] _naziv;
		_naziv = nullptr;

	}

	friend ostream& operator << (ostream& COUT, const Zivotinja& obj) {
		COUT << obj._naziv << " - "<<obj._tezina << " kg";
		return COUT;
	}

	// Operator == na način da poredi po vrsti životinje da li su dvije životinje iste

	bool operator == (const Zivotinja& obj) {

		return strcmp(_naziv , obj._naziv) == 0;

	}

	// Operator > na način da poredi da li je težina prve životinje veća od težine druge

	bool operator > (const Zivotinja& obj) {

		return _tezina > obj._tezina;

	}


};

void main() {


	Zivotinja zivotinja1("Slon", 4000);
	Zivotinja zivotinja2("Maca", 3);
	Zivotinja zivotinja3("Cuko", 10);
	Zivotinja zivotinja4("Ptica", 1);
	Zivotinja zivotinja5("Ajkula", 300);

	Kolekcija<Zivotinja> zooloskiVrt(10);

	zooloskiVrt.AddElement(zivotinja1);
	zooloskiVrt.AddElement(zivotinja2);
	zooloskiVrt.AddElement(zivotinja3);
	zooloskiVrt.AddElement(zivotinja4);
	zooloskiVrt.AddElement(zivotinja5);

	//zooloskiVrt.RemoveLast();

	//zooloskiVrt.RemoveAt(2);

	//zooloskiVrt.RemoveAt(zivotinja4);

	Zivotinja zivotinjaX("Zmaj", 1000);

	zooloskiVrt.InsertAt(zivotinjaX, 0);

	cout << "Najmanja zivotinja u zooloskom vrtu je " << *zooloskiVrt.GetNajmanjiElement() << endl;

	cout << zooloskiVrt;




	//int ascii = 65; // 65 = A 

	//Kolekcija<char> kolekcija;

	//for (int i = 0; i < 9; i++)
	//{
	//	kolekcija.AddElement(ascii + i); // 66 67 68 , A B C ... 
	//}

	//kolekcija.RemoveLast();

	//kolekcija.RemoveAt(3);

	//kolekcija.RemoveAt('C');

	//kolekcija.InsertAt('Z', 2);

	//cout << "Najmanji element kolekcije je " << *kolekcija.GetNajmanjiElement() << endl;

	//cout << kolekcija;



	//try {
	//	// baciti exception ako je niz popunjen
	//	kolekcija.AddElement('B');
	//}
	//catch (exception& err) {
	//	cout << err.what() << endl;
	//}

	//try {
	//	// baciti exception ako je niz popunjen
	//	kolekcija.AddElement('K');
	//	kolekcija.AddElement('L');
	//}
	//catch (exception& err) {
	//	cout << err.what() << endl;
	//}






	system("pause>0");
}
