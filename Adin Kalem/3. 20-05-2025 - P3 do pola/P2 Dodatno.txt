#include<iostream>
using namespace std;


char* GetNizKaraktera(const char* tekst) {

	int vel = strlen(tekst) + 1;

	char* temp = new char[vel];

	strcpy_s(temp, vel, tekst);

	return temp;
}



class Datum
{
public:
	int* _dan;
	int* _mjesec;
	int* _godina;


	Datum(int dan = 1, int mjesec = 1, int godina = 2000)
	{
		_dan = new int(dan);
		_mjesec = new int(mjesec);
		_godina = new int(godina);

	}

	Datum(const Datum& datum)
	{
		_dan = new int(*datum._dan);
		_mjesec = new int(*datum._mjesec);
		_godina = new int(*datum._godina);
	}

	Datum& operator=(const Datum& datum)
	{
		if (this != &datum)
		{
			delete _dan;
			delete _mjesec;
			delete _godina;

			_dan = new int(*datum._dan);
			_mjesec = new int(*datum._mjesec);
			_godina = new int(*datum._godina);
		}
		return *this;
	}


	~Datum()
	{
		delete _dan;
		_dan = nullptr;
		delete _mjesec;
		_mjesec = nullptr;
		delete _godina;
		_godina = nullptr;
		cout << "Dealokacija uspjesna. " << endl;
	}

	void ispis()
	{
		cout << "Vas datum je: " << *_dan << "." << *_mjesec << "." << *_godina << endl;
	}

	// cout << jedan;
	
	friend ostream& operator << (ostream& COUT, const Datum& datum) {

		COUT << *datum._dan << "." << *datum._mjesec << "." << *datum._godina << endl;

		return COUT;
	}


};

class Kandidat
{
public:
	char* _imePrezime;
	char* _JBMG;

	Kandidat(const char* ime = "---", const char* jbmg = "---")
	{
		_imePrezime = GetNizKaraktera(ime);
		_JBMG = GetNizKaraktera(jbmg);
	}

	Kandidat(const Kandidat& kandidat)
	{
		_imePrezime = GetNizKaraktera(kandidat._imePrezime);
		_JBMG = GetNizKaraktera(kandidat._JBMG);
	}

	Kandidat& operator=(const Kandidat& kandidat)
	{
		if (this != &kandidat)
		{
			delete[] _imePrezime;
			delete[] _JBMG;

			_imePrezime = GetNizKaraktera(kandidat._imePrezime);
			_JBMG = GetNizKaraktera(kandidat._JBMG);
		}
		return *this;
	}


	~Kandidat()
	{
		delete[]_imePrezime;
		_imePrezime = nullptr;
		delete[]_JBMG;
		_JBMG = nullptr;
	}

	void ispis()
	{
		cout << "Ime kandidata je " << _imePrezime << endl;
		cout << "Maticni broj kandidata je: " << _JBMG << endl;
	}


	friend ostream& operator << (ostream& COUT, const Kandidat& kandidat) {

		COUT << kandidat._imePrezime << " [" << kandidat._JBMG << "]" << endl;


		return COUT;
	}

};

class Osoba
{
public:
	Datum _datumRodjenja;
	char* _imePrezime;
	char* _JBMG;
	char* _prebivaliste;


	Osoba(Datum datum = Datum(), const char* imePrezime = "---", const char* jbmg = "---", const char* prebivaliste = "Sarajevo")
	{
		_datumRodjenja = datum;
		

		_imePrezime = GetNizKaraktera(imePrezime);
		_JBMG = GetNizKaraktera(jbmg);
		_prebivaliste = GetNizKaraktera(prebivaliste);


	}
	Osoba(const Osoba& osoba)
	{
		int vel1 = strlen(osoba._imePrezime) + 1;
		int vel2 = strlen(osoba._JBMG) + 1;
		int vel3 = strlen(osoba._prebivaliste) + 1;
		_imePrezime = new char[vel1];
		_JBMG = new char[vel2];
		_prebivaliste = new char[vel3];
		strcpy_s(_imePrezime, vel1, osoba._imePrezime);
		strcpy_s(_JBMG, vel2, osoba._JBMG);
		strcpy_s(_prebivaliste, vel3, osoba._prebivaliste);
	}

	Osoba& operator=(const Osoba& osoba)
	{
		if (this != nullptr)
		{
			int vel1 = strlen(osoba._imePrezime) + 1;
			int vel2 = strlen(osoba._JBMG) + 1;
			int vel3 = strlen(osoba._prebivaliste) + 1;
			_imePrezime = new char[vel1];
			_JBMG = new char[vel2];
			_prebivaliste = new char[vel3];
			strcpy_s(_imePrezime, vel1, osoba._imePrezime);
			strcpy_s(_JBMG, vel2, osoba._JBMG);
			strcpy_s(_prebivaliste, vel3, osoba._prebivaliste);
		}
		return *this;
	}

	~Osoba()
	{
		delete[]_imePrezime;
		_imePrezime = nullptr;
		delete[]_JBMG;
		_JBMG = nullptr;
		delete[]_prebivaliste;
		_prebivaliste = nullptr;
	}

	void ispis() {
		cout << "Datum rodjenja osobe je: ";
		_datumRodjenja.ispis();
		cout << "Ime i prezime je " << _imePrezime << endl;
		cout << "JBMG osobe je: " << _JBMG << endl;
		cout << "Mjesto prebivalista je: " << _prebivaliste << endl;
	}

};

class GlasackiListic {
public:
	Osoba* _glasac;
	Kandidat* _kandidat;


	GlasackiListic() {
		_glasac = new Osoba();
		_kandidat = new Kandidat();
	}


	GlasackiListic(const Osoba& glasac, const Kandidat& kandidat) {
		_glasac = new Osoba(glasac);
		_kandidat = new Kandidat(kandidat);
	}


	GlasackiListic(const GlasackiListic& listic) {
		_glasac = new Osoba(*listic._glasac);
		_kandidat = new Kandidat(*listic._kandidat);
	}


	GlasackiListic& operator=(const GlasackiListic& listic) {
		if (this != &listic) {
			delete _glasac;
			delete _kandidat;
			_glasac = new Osoba(*listic._glasac);
			_kandidat = new Kandidat(*listic._kandidat);
		}
		return *this;
	}


	~GlasackiListic() {
		delete _glasac;
		delete _kandidat;
		_glasac = nullptr;
		_kandidat = nullptr;
	}
	void ispis() {
		cout << "GLASAC:" << endl;
		_glasac->ispis();
		cout << "KANDIDAT:" << endl;
		_kandidat->ispis();
	}

};

class Izbori
{
public:
	char* _glasackoMjesto;
	GlasackiListic* _glasovi;
	int _trenutnoGlasova;
	int _maxBrojGlasova;

	Izbori()
	{
		_trenutnoGlasova = 0;
		_maxBrojGlasova = 3;
		const char* mjesto = "Tarcin";
		int vel = strlen(mjesto) + 1;
		_glasackoMjesto = new char[vel];
		strcpy_s(_glasackoMjesto, vel, mjesto);
		_glasovi = new GlasackiListic[_maxBrojGlasova];
	}

	Izbori(const char* mjesto, int max, int trenutno)
	{
		_trenutnoGlasova = trenutno;
		_maxBrojGlasova = max;
		int vel = strlen(mjesto) + 1;
		_glasackoMjesto = new char[vel];
		strcpy_s(_glasackoMjesto, vel, mjesto);
		_glasovi = new GlasackiListic[_maxBrojGlasova];
	}

	Izbori(const Izbori& izbori)
	{
		_trenutnoGlasova = izbori._trenutnoGlasova;
		_maxBrojGlasova = izbori._maxBrojGlasova;
		int vel = strlen(izbori._glasackoMjesto) + 1;
		_glasackoMjesto = new char[vel];
		strcpy_s(_glasackoMjesto, vel, izbori._glasackoMjesto);
		_glasovi = new GlasackiListic[_maxBrojGlasova];
		for (int i = 0; i < _trenutnoGlasova; i++)
		{
			_glasovi[i] = izbori._glasovi[i];
		}
	}

	Izbori& operator=(const Izbori& izbori)
	{
		if (this != &izbori)
		{
			delete[]_glasackoMjesto;
			_glasackoMjesto = nullptr;
			_trenutnoGlasova = izbori._trenutnoGlasova;
			_maxBrojGlasova = izbori._maxBrojGlasova;
			int vel = strlen(izbori._glasackoMjesto) + 1;
			_glasackoMjesto = new char[vel];
			strcpy_s(_glasackoMjesto, vel, izbori._glasackoMjesto);
			_glasovi = new GlasackiListic[_maxBrojGlasova];
			for (int i = 0; i < _trenutnoGlasova; i++)
			{
				_glasovi[i] = izbori._glasovi[i];
			}
		}
		return *this;
	}

	~Izbori()
	{
		delete[]_glasackoMjesto;
		_glasackoMjesto = nullptr;
		delete[]_glasovi;
		_glasovi = nullptr;
	}

	void ispis()
	{
		cout << "Glasacko mjesto je: " << _glasackoMjesto << endl;
		for (int i = 0; i < _trenutnoGlasova; i++)
		{
			_glasovi[i].ispis();
		}
	}


	bool AddGlasackiListic(GlasackiListic listic)
	{

		if (_trenutnoGlasova >= _maxBrojGlasova)
			return false;


		for (int i = 0; i < _trenutnoGlasova; i++)
		{
			if (strcmp(_glasovi[i]._glasac->_JBMG, listic._glasac->_JBMG) == 0)
				return false;
		}


		int godinaRodjenja = *listic._glasac->_datumRodjenja._godina;
		const int TEKUCA_GODINA = 2025;
		int starost = TEKUCA_GODINA - godinaRodjenja;
		if (starost < 18)
			return false;


		if (strcmp(_glasackoMjesto, listic._glasac->_prebivaliste) != 0)
			return false;


		_glasovi[_trenutnoGlasova++] = listic;
		return true;
	}


};


int main()
{
	Datum jedan;
	cout << jedan;
	jedan.ispis();

	Datum rodj(28, 8, 2004);
	cout << rodj;
	rodj.ispis();
	cout << endl;

	//Kandidat proba;
	//proba.ispis();

	//Kandidat adin("Adin Kalem", "2808004170039");
	//adin.ispis();

	//Kandidat adinDva(adin);
	//adinDva.ispis();
	//cout << endl;

	//Osoba dif;
	//dif.ispis();
	//cout << endl;
	//Osoba neki(jedan, "Neki Mahmutovic", "1103004170037", "Tarcin");
	//neki.ispis();
	//cout << endl;


	//GlasackiListic listic(neki, adinDva);
	//listic.ispis();
	//cout << endl;
	//Izbori i("Tarcin", 3, 0);
	//i.AddGlasackiListic(listic);
	//i.ispis();
	system("pause>0");
}