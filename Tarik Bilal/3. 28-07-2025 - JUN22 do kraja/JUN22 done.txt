#include <iostream>
#include <regex>
#include <vector>
#include <thread>
#include <fstream>
#include <mutex>
#include <string>
using namespace std;

const char* PORUKA = "\n-------------------------------------------------------------------------------\n"
"0. PROVJERITE DA LI PREUZETI ZADACI PRIPADAJU VASOJ GRUPI (G1/G2)\n"
"1. SVE KLASE TREBAJU POSJEDOVATI ADEKVATAN DESTRUKTOR\n"
"2. NAMJERNO IZOSTAVLJANJE KOMPLETNIH I/ILI POJEDINIH DIJELOVA DESTRUKTORA CE BITI OZNACENO KAO TM\n"
"3. SPASAVAJTE PROJEKAT KAKO BI SE SPRIJECILO GUBLJENJE URADJENOG ZADATKA\n"
"4. ATRIBUTI, NAZIVI FUNKCIJA, TE BROJ I TIP PARAMETARA MORAJU BITI IDENTICNI ONIMA KOJI SU KORISTENI U TESTNOM CODE-U, "
"OSIM U SLUCAJU DA POSTOJI ADEKVATAN RAZLOG ZA NJIHOVU MODIFIKACIJU. OSTALE "
"POMOCNE FUNKCIJE MOZETE IMENOVATI I DODAVATI PO ZELJI.\n"
"5. IZUZETAK BACITE SAMO U FUNKCIJAMA U KOJIMA JE TO NAZNACENO.\n"
"6. FUNKCIJE KOJE NE IMPLEMENTIRATE TREBAJU BITI OBRISANE (KAKO POZIV TAKO I DEFINICIJA)!\n"
"7. NA KRAJU ISPITA SVOJE RJESENJE KOPIRATE U .DOCX FAJL (IMENOVAN BROJEM INDEKSA)!\n"
"8. RJESENJA ZADATKA POSTAVITE NA FTP SERVER U ODGOVARAJUCI FOLDER!\n"
"9. NEMOJTE POSTAVLJATI VISUAL STUDIO PROJEKTE, VEC SAMO .DOCX FAJL SA VASIM RJESENJEM!\n"
"10.SVE NEDOZVOLJENE RADNJE TOKOM ISPITA CE BITI SANKCIONISANE!\n"
"11. ZA POTREBE TESTIRANJA, U MAINU, BUDITE SLOBODNI DODATI TESTNIH PODATAKA (POZIVA FUNKCIJA) KOLIKO GOD SMATRATE DA JE POTREBNO!\n"
"-------------------------------------------------------------------------------\n";
const char* crt = "\n-------------------------------------------\n";
enum Karakteristike { NARUDZBA, KVALITET, PAKOVANJE, ISPORUKA };

ostream& operator<< (ostream& COUT, const Karakteristike& obj) {

	const char* KopijaKarakteristika[] = { "NARUDZBA","KVALITET","PAKOVANJE","ISPORUKA" };

	COUT << KopijaKarakteristika[obj];

	return COUT;
}

/*

	// regex_match ---> redosljed je bitan ,  vedad.keskin@edu.fit.ba   ,,    +387 6x xxx xxxx

	// regex_search ---> lozinke, username redosljed nije bitan , vise od 8, jedno veliko, jedan znak .. 

	// FINALNI REZULTAT -> [AB]012-{ab}

	// 1. [ ] - RANGE  ---> malo slovo [a-z] , veliko [A-Z] , jedan broj [0-9] , [- ]

	// 2. { } - SIZE   ---> tri necega {3}  ,  2 ili vise {2,} , 8 ili manje {,8}  ,  od 2 do 5 {2,5} 

	// 3. ( ) - TACAN TEKST ---> gmail (gmail) ,  yahoo ili gmail  (gmail|yahoo)  ,  com  (com) (-| )

	// 4. SPECIJALNI ZNAKOVI ( ) [ ] { } / \  ----> moramo ispred napisati \\  altgr + q 

	// 5. AKO NESTO NIJE OBAVEZNO (OPCIONALNI PARAMETRI) iza moramo napisati ? 

	// 6. KADA ZELIMO NECEGA DA SE PONAVALJA NEOGRANICENO DOK SE NE POJAVI IDUCE PRAVILO --> + 

	// 7. KADA ZELIMO BILO KOJI KARAKTER ---> . 

	// 8. AKO ZELIMO TACKU KAO TACKU --> [.] ili (.) 

	// 9. @ REGEX KOD JE @


	// vedad.keskin@edu.ba

	// regex kod : [a-z]+[.][a-z]+@(edu|yahoo|outlook|gmail)[.](com|ba)

	// regex stranica : https://regex101.com/

		* za validaciju broja pasosa koristiti funkciju ValidirajBrojPasosa koja treba, koristeci regex, osigurati postivanje
	sljedeceg formata:
	- pocetak sadrzi jedan ili dva velika slova unutar uglastih zagrada
	- nakon toga slijede tri ili cetiri broja
	- nakon toga moze, a ne mora, doci znak crtica (-) ili razmak ( )
	- nakon toga slijede dva mala slova unutar viticastih zagrada

	pomenutu funkciju iskoristiti u konstruktoru klase Kupac, te ukoliko jedinstveni kod  nije u validnom formatu onda njegova vrijednost treba biti postavljena na NOT VALID
	*/


bool ValidirajJedinstveniKod(string tekst) {
	regex pattern("\\[[A-Z]{1,2}\\][0-9]{3,4}[- ]?\\{[a-z]{2}\\}");

	return regex_match(tekst, pattern); // 99% 
}

char* GetNizKaraktera(const char* tekst) {
	if (tekst == nullptr)
		return nullptr;
	char* novi = new char[strlen(tekst) + 1];
	strcpy_s(novi, strlen(tekst) + 1, tekst);
	return novi;
}

unique_ptr<char[]> GetUniqeNiz(const char* tekst) {
	if (tekst == nullptr)
		return nullptr;
	unique_ptr<char[]> novi (new char[strlen(tekst) + 1]);
	strcpy_s(novi.get(), strlen(tekst) + 1, tekst);
	return novi;
}

template<class T1, class T2, int max>
class Rijecnik {
	T1* _elementi1[max];
	T2* _elementi2[max];
	int* _trenutno;
	bool _omoguciDupliranje;

public:
	Rijecnik(bool omoguciDupliranje = true) {
		_omoguciDupliranje = omoguciDupliranje;
		_trenutno = new int(0);
	}

	Rijecnik(const Rijecnik& obj) {
		_omoguciDupliranje = obj._omoguciDupliranje;
		_trenutno = new int(*obj._trenutno);

		for (size_t i = 0; i < *_trenutno; i++)
		{
			_elementi1[i] = new T1(*obj._elementi1[i]);
			_elementi2[i] = new T2(*obj._elementi2[i]);
		}
	}

	Rijecnik& operator =(const Rijecnik& obj) {
		if (this != &obj) {
			for (size_t i = 0; i < *_trenutno; i++)
			{
				delete _elementi1[i];
				delete _elementi2[i];
			}
			delete _trenutno;

			_omoguciDupliranje = obj._omoguciDupliranje;
			_trenutno = new int(*obj._trenutno);
			for (size_t i = 0; i < *_trenutno; i++)
			{
				_elementi1[i] = new T1(*obj._elementi1[i]);
				_elementi2[i] = new T2(*obj._elementi2[i]);
			}
		}
		return *this;
	}
	~Rijecnik() {
		for (size_t i = 0; i < *_trenutno; i++)
		{
			delete _elementi1[i]; _elementi1[i] = nullptr;
			delete _elementi2[i]; _elementi2[i] = nullptr;
		}
		delete _trenutno; _trenutno = nullptr;
	}

	T1& getElement1(int lokacija)const { return *_elementi1[lokacija]; }
	T2& getElement2(int lokacija)const { return *_elementi2[lokacija]; }
	int getTrenutno() const { return *_trenutno; }

	friend ostream& operator<< (ostream& COUT, const Rijecnik& obj) {
		for (size_t i = 0; i < *obj._trenutno; i++)
			COUT << obj.getElement1(i) << " " << obj.getElement2(i) << endl;
		return COUT;
	}

	void AddElement(T1 el1, T2 el2) {

		if (*_trenutno == max)
			throw exception("Rijecnik je popunjen, nije moguce vise dodavanje elemenata!");


		if (!_omoguciDupliranje) {
			for (size_t i = 0; i < *_trenutno; i++)
			{
				if (*_elementi1[i] == el1 || *_elementi2[i] == el2)
					throw exception("Dupliranje elemenata nije moguce!");
			}
		}


		_elementi1[*_trenutno] = new T1(el1);
		_elementi2[*_trenutno] = new T2(el2);

		(*_trenutno)++;
	}
	/* metoda RemoveAt treba da ukloni i vrati (kao povratnu vrijednost) clanoverijecnika koji se nalaze na lokaciji definisanoj prvim parametrom.
	* Nakon izvrsenja metode RemoveAt, objekat rijecnik1 bi trebao posjedovati sljedeci sadrzaj:
	* 0  0
	* 1  1
	* 3  3
	* 4  4
	* ....
	*
	* a objekat rijecnik2 samo jedan par:
	*  2  2
	*/
	//Rijecnik RemoveAt(int lok) {

	//	Rijecnik rijecnik2;

	//	rijecnik2.AddElement(*_elementi1[lok], *_elementi2[lok]);



	//	for (size_t i = lok; i < *_trenutno - 1; i++)
	//	{
	//		// DUPLE ADRESE
	//		// A123213      = A123213
	//		//_elementi1[i] = _elementi1[i + 1];
	//		//_elementi2[i] = _elementi2[i + 1];
	//		 
	//		//*_elementi1[i] = *_elementi1[i + 1];
	//		//*_elementi2[i] = *_elementi2[i + 1];

	//		_elementi1[i] = new T1(*_elementi1[i + 1]);
	//		_elementi2[i] = new T2(*_elementi2[i + 1]);
	//	}


	//	(*_trenutno)--;

	//	return rijecnik2;
	//}

	Rijecnik RemoveAt(int lok) {

		Rijecnik rjecnik2;	// prazan kolekcije
		Rijecnik rjecnik1;	// prazan kolekcije

		for (int i = 0; i < *_trenutno; i++)
		{
			if (i == lok) {
				rjecnik2.AddElement(*_elementi1[i], *_elementi2[i]);
			}
			else {
				rjecnik1.AddElement(*_elementi1[i], *_elementi2[i]);
			}
		}

		*this = rjecnik1;

		return rjecnik2;
	}


};

class Datum {
	int* _dan, * _mjesec, * _godina;
public:
	Datum(int dan = 1, int mjesec = 1, int godina = 2000) {
		_dan = new int(dan);
		_mjesec = new int(mjesec);
		_godina = new int(godina);
	}
	Datum(const Datum& obj) {
		_dan = new int(*obj._dan);
		_mjesec = new int(*obj._mjesec);
		_godina = new int(*obj._godina);
	}
	Datum& operator =(const Datum& obj) {
		if (this != &obj) {
			delete _dan;
			delete _mjesec;
			delete _godina;
			_dan = new int(*obj._dan);
			_mjesec = new int(*obj._mjesec);
			_godina = new int(*obj._godina);
		}
		return *this;
	}
	~Datum() {
		delete _dan; _dan = nullptr;
		delete _mjesec; _mjesec = nullptr;
		delete _godina; _godina = nullptr;
	}
	friend ostream& operator<< (ostream& COUT, const Datum& obj) {
		COUT << *obj._dan << "." << *obj._mjesec << "." << *obj._godina;
		return COUT;
	}

	bool operator ==(const Datum& obj) {
		return *_dan == *obj._dan && *_mjesec == *obj._mjesec && *_godina == *obj._godina;
	}

	int sumaDana() {
		return *_dan + *_mjesec * 30 + *_godina * 365;
	}

};

class ZadovoljstvoKupca {
	char* _komentar;
	//uz komentar, kupci mogu ocijeniti svaku od karakteristika proizvoda, a int se odnosi na ocjenu u rasponu od 1 - 10.
	//onemoguciti dupliranje karakteristika tj. svaki karakteristika se moze ocijeniti samo jednom...u suprotnom baciti objekat tipa exception
	Rijecnik<Karakteristike, int, 4>* _ocjeneKarakteristika;
public:
	ZadovoljstvoKupca(const char* komentar = "") {
		//kreirajte funkciju GetNizKaraktera ili na drugi adekvatan nacin izvrsite inicijalizaciju pokazivaca
		_komentar = GetNizKaraktera(komentar);
		_ocjeneKarakteristika = new Rijecnik<Karakteristike, int, 4>();
	}

	ZadovoljstvoKupca(const ZadovoljstvoKupca& obj) {
		_komentar = GetNizKaraktera(obj._komentar);
		_ocjeneKarakteristika = new Rijecnik<Karakteristike, int, 4>(*obj._ocjeneKarakteristika);
	}

	ZadovoljstvoKupca& operator =(const ZadovoljstvoKupca& obj) {
		if (this != &obj) {
			delete[] _komentar;
			delete _ocjeneKarakteristika;

			_komentar = GetNizKaraktera(obj._komentar);
			_ocjeneKarakteristika = new Rijecnik<Karakteristike, int, 4>(*obj._ocjeneKarakteristika);
		}
		return *this;
	}

	~ZadovoljstvoKupca() {
		delete[] _komentar; _komentar = nullptr;
		delete _ocjeneKarakteristika; _ocjeneKarakteristika = nullptr;
	}

	char* GeKomentar() { return _komentar; }
	Rijecnik<Karakteristike, int, 4>* GetOcjeneKarakteristika() { return _ocjeneKarakteristika; }


	float getProsjek()const {

		float brojac = 0;
		float prosjek = 0;

		for (size_t i = 0; i < _ocjeneKarakteristika->getTrenutno(); i++)
		{
			prosjek += _ocjeneKarakteristika->getElement2(i);
			brojac++;
		}

		if (brojac == 0) {
			return 0;
		}

		return prosjek / brojac;

	}

	/* Primjer ispisa:
	   -------------------------------------------
	   Kupovina 30.6.2022 za kupce:
			   1.Denis Music denis@fit.ba [BH]235-{mo}
			   2.Jasmin Azemovic jasmin@fit.ba [MO]235{sa}
	   -------------------------------------------
	   Zadovoljstvo kupca:
	   Nismo pretjerano zadovoljni kvalitetom, a ni pakovanjem.
			 NARUDZBA(7)
			 KVALITET(4)
			 PAKOVANJE(3)
			 ISPORUKA(6)
	   -------------------------------------------
	   Prosjecna ocjena -> 5
   */
	friend ostream& operator<< (ostream& COUT, const ZadovoljstvoKupca& obj) {
		COUT << obj._komentar << endl;
		for (size_t i = 0; i < obj._ocjeneKarakteristika->getTrenutno(); i++)
		{
			COUT << "\t" << obj._ocjeneKarakteristika->getElement1(i) << "(" << obj._ocjeneKarakteristika->getElement2(i) << ")" << endl;
		}

		COUT << "-------------------------------------------" << endl << "Prosjecna ocjena -> " << obj.getProsjek() << endl;

		return COUT;
	}

	bool operator ==(const ZadovoljstvoKupca& obj) {
		if (strcmp(_komentar, obj._komentar) != 0)
			return false;

		for (size_t i = 0; i < obj._ocjeneKarakteristika->getTrenutno(); i++)
		{
			if (obj._ocjeneKarakteristika->getElement1(i) != _ocjeneKarakteristika->getElement1(i) &&
				_ocjeneKarakteristika->getElement2(i) != obj._ocjeneKarakteristika->getElement2(i))
				return false;
		}

		return true;
	}

	void AddOcjenuKarakteristike(Karakteristike karakteristike, int ocjena) {

		for (size_t i = 0; i < _ocjeneKarakteristika->getTrenutno(); i++)
		{
			if (_ocjeneKarakteristika->getElement1(i) == karakteristike)
				throw exception("Karakteristika je vec ocjenjena!");
		}

		_ocjeneKarakteristika->AddElement(karakteristike, ocjena);
	}
};

class Kupac {
	unique_ptr<char[]>_imePrezime;
	string _emailAdresa;
	string _jedinstveniKod;
public:
	Kupac(const char* imePrezime, string emailAdresa, string jedinstveniKod) {
		_imePrezime = GetUniqeNiz(imePrezime);
		_emailAdresa = emailAdresa;

		//ValidirajJedinstveniKod(jedinstveniKod) ? _jedinstveniKod = jedinstveniKod : _jedinstveniKod = "NOT VALID";
		
		// POHRANA = IZRAZ ? AKO JE TRUE : AKO JE FALSE;

		_jedinstveniKod = ValidirajJedinstveniKod(jedinstveniKod) ? jedinstveniKod : "NOT VALID";


	}

	Kupac(const Kupac& obj) {
		_imePrezime = GetUniqeNiz(obj._imePrezime.get());
		_emailAdresa = obj._emailAdresa;
		_jedinstveniKod = obj._jedinstveniKod;
	}
	Kupac& operator =(const Kupac& obj) {
		if (this != &obj) {

			_imePrezime.reset();


			_imePrezime = GetUniqeNiz(obj._imePrezime.get());
			_emailAdresa = obj._emailAdresa;
			_jedinstveniKod = obj._jedinstveniKod;
		}
		return *this;
	}

	~Kupac() {

		_imePrezime.reset();
	
	}

	string GetEmail() { return _emailAdresa; }
	string GetJedinstveniKod() { return _jedinstveniKod; }
	char* GetImePrezime() { return _imePrezime.get(); }

	friend ostream& operator<< (ostream& COUT, const Kupac& obj) {
		COUT << obj._imePrezime << " " << obj._emailAdresa << " " << obj._jedinstveniKod << endl;
		return COUT;
	}

	bool operator ==(const Kupac& obj) {
		return _emailAdresa == obj._emailAdresa && _jedinstveniKod == obj._jedinstveniKod;
	}
};

mutex m;

class Kupovina {
	Datum _datumKupovine;
	//jedna kupovina moze podrazumjevati isporuku proizvoda vecem broju kupaca
	//onemoguciti dodavanje kupaca sa istom email adresom ili jedinstvenim kodomu okviru jedne kupovine
	vector<Kupac> _kupaci;
	//za svaku kupovinu se moze ostaviti samo jedan komentar odnosno ocjena zadovoljstva, bez obzirana broj kupaca
	ZadovoljstvoKupca _zadovoljstvoKupca;

public:
	Kupovina(Datum& datum, Kupac& kupac) : _datumKupovine(datum) {
		_kupaci.push_back(kupac);
	}

	Kupovina(const Kupovina& obj) {
		_datumKupovine = obj._datumKupovine;
		_kupaci = obj._kupaci;
		_zadovoljstvoKupca = obj._zadovoljstvoKupca;
	}

	Kupovina& operator =(const Kupovina& obj) {
		if (this != &obj) {

			_kupaci.clear();

			_datumKupovine = obj._datumKupovine;
			_kupaci = obj._kupaci;
			_zadovoljstvoKupca = obj._zadovoljstvoKupca;

		}
		return *this;
	}

	~Kupovina() {

	}

	vector<Kupac>& GetKupci() { return _kupaci; }
	ZadovoljstvoKupca GetZadovoljstvoKupca() { return _zadovoljstvoKupca; }

	friend ostream& operator<< (ostream& COUT, Kupovina& obj) {
		COUT << crt << "Kupovina " << obj._datumKupovine << " za kupce: " << endl;
		for (size_t i = 0; i < obj._kupaci.size(); i++)
		{
			COUT << "\t" << i + 1 << "." << obj._kupaci[i];
		}
		COUT << crt << "Zadovoljstvo kupca: " << endl << obj._zadovoljstvoKupca << crt;
		return COUT;
	}

	//onemoguciti dodavanje kupaca sa istom email adresom ili jedinstvenim kodomu u okviru jedne kupovine
	bool AddKupca(Kupac kupac) {
		for (size_t i = 0; i < _kupaci.size(); i++)
		{
			if (_kupaci[i] == kupac)
				return false;
		}

		_kupaci.push_back(kupac);
		return true;
	}
	//ukoliko se kupovini  doda zadovoljstvo koji sadrzi najmanje dvije karakteristike sa ocjenom manjom od 5, svim kupcima, 
	//koji su dodati u kupovinu, u zasebnom thread-u, se salje email sa sljedecim sadrzajem:
	void SetZadovoljstvoKupca(ZadovoljstvoKupca zadovoljstvo) {

		_zadovoljstvoKupca = zadovoljstvo;

		int brojac = 0;

		for (size_t i = 0; i < _zadovoljstvoKupca.GetOcjeneKarakteristika()->getTrenutno(); i++)
		{
			if (_zadovoljstvoKupca.GetOcjeneKarakteristika()->getElement2(i) < 5)
				brojac++;
		}

		if (brojac >= 2) {
			thread t1(&Kupovina::posaljiMail, this);
			t1.join();
		}
	}

	/*
	  To: denis@fit.ba;jasmin@fit.ba;
	  Subject: Informacija

	  Postovani,

	  Zaprimili smo Vase ocjene, a njihova prosjecna vrijednost je X.X.
	  Zao nam je zbog toga, te ce Vas u najkracem periodu kontaktirati nasa Sluzba za odnose sa kupcima.

	  Nadamo se da cete i dalje poslovati sa nama
	  Puno pozdrava
  */
	void posaljiMail() {

		m.lock();

		cout << "To: ";
		for (size_t i = 0; i < _kupaci.size(); i++)
		{
			cout << _kupaci[i].GetEmail() << ";";
		}
		cout << endl<<  "Subject: Informacija" << endl << endl;
		cout << "Postovani," << endl;
		cout << endl;
		cout << "Zaprimili smo Vase ocjene, a njihova prosjecna vrijednost je " << _zadovoljstvoKupca.getProsjek() << endl;
		cout << "Zao nam je zbog toga, te ce Vas u najkracem periodu kontaktirati nasa Sluzba za odnose sa kupcima." << endl;
		cout << endl;
		cout << "Nadamo se da cete i dalje poslovati sa nama" << endl;
		cout << "Puno pozdrava" << endl;

		m.unlock();
	}


};

const char* GetOdgovorNaPrvoPitanje() {
	cout << "Pitanje -> \Nabrojite i ukratko pojasnite osnovne ios modove koji se koriste u radu sa fajlovima?\n";
	return "Odgovor -> OVDJE UNESITE VAS ODGOVOR";
}
const char* GetOdgovorNaDrugoPitanje() {
	cout << "Pitanje -> Pojasnite prednosti i nedostatke visestrukog nasljedjivaja, te ulogu virtualnog nasljedjivanja u tom kontekstu?\n";
	return "Odgovor -> OVDJE UNESITE VAS ODGOVOR";
}

void main() {

	cout << PORUKA;
	cin.get();

	cout << GetOdgovorNaPrvoPitanje() << endl;
	cin.get();
	cout << GetOdgovorNaDrugoPitanje() << endl;
	cin.get();

	Datum datum30062022(30, 6, 2022);

	const int rijecnikTestSize = 9;
	Rijecnik<int, int, rijecnikTestSize> rijecnik1(false);

	for (int i = 0; i < rijecnikTestSize - 1; i++)
		rijecnik1.AddElement(i, i);//dodaje vrijednosti u rijecnik
	cout << rijecnik1;
	try {
		//ukoliko nije dozvoljeno dupliranje elemenata (provjeravaju se T1 i T2), metoda AddElement treba baciti objekat tipa exception
		rijecnik1.AddElement(3, 3);
	}
	catch (exception& err) {
		cout << err.what() << crt;
	}
	rijecnik1.AddElement(9, 9);

	try
	{
		//ukoliko je rijecnik popunjen, metoda AddElement treba baciti objekat tipa exception
		rijecnik1.AddElement(10, 10);
	}
	catch (exception& err) {
		cout << err.what() << crt;
	}

	cout << rijecnik1 << crt;

	/* metoda RemoveAt treba da ukloni i vrati (kao povratnu vrijednost)clanoverijecnika koji se nalaze na lokaciji definisanoj prvim parametrom.
	* Nakon izvrsenja metode RemoveAt, objekat rijecnik1 bi trebao posjedovati sljedeci sadrzaj:
	* 0  0
	* 1  1
	* 3  3
	* 4  4
	* ....
	*
	* a objekat rijecnik2 samo jedan par:
	*  2  2
	*/
	Rijecnik<int, int, rijecnikTestSize> rijecnik2 = rijecnik1.RemoveAt(2);
	cout << rijecnik2 << crt;
	cout << rijecnik1 << crt;


	/*
	* za validaciju broja pasosa koristiti funkciju ValidirajBrojPasosa koja treba, koristeci regex, osigurati postivanje
	sljedeceg formata:
	- pocetak sadrzi jedan ili dva velika slova unutar uglastih zagrada
	- nakon toga slijede tri ili cetiri broja
	- nakon toga moze, a ne mora, doci znak crtica (-) ili razmak ( )
	- nakon toga slijede dva mala slova unutar viticastih zagrada

	pomenutu funkciju iskoristiti u konstruktoru klase Kupac, te ukoliko jedinstveni kod  nije u validnom formatu onda njegova vrijednost treba biti postavljena na NOT VALID
	*/

	if (ValidirajJedinstveniKod("[BH]235-{mo}"))
		cout << "Jedinstveni kod validan" << endl;
	if (ValidirajJedinstveniKod("[MO]235{sa}"))
		cout << "Jedinstveni kod validan" << endl;
	if (ValidirajJedinstveniKod("[B]2356 {ih}"))
		cout << "Jedinstveni kod validan" << endl;
	if (!ValidirajJedinstveniKod("[s]2356{ih}"))
		cout << "Jedinstveni kod NIJE validan" << endl;
	if (!ValidirajJedinstveniKod("[BH]2356{h}"))
		cout << "Jedinstveni kod NIJE validan" << endl;
	if (!ValidirajJedinstveniKod("BH2356{ih}"))
		cout << "Jedinstveni kod NIJE validan" << endl;

	cout << endl;

	Kupac denis("Denis Music", "denis@fit.ba", "[BH]235-{mo}");
	Kupac jasmin("Jasmin Azemovic", "jasmin@fit.ba", "[MO]235{sa}");
	Kupac adel("Adel Handzic", "adel@edu.fit.ba", "[B]2356 {ih}");
	Kupac jedinstveniKodNotValid("Ime Prezime", "korisnik@klix.ba", "BH2356{ih}");//_jedinstveniKod = NOT VALID

	cout << denis << endl;
	cout << jedinstveniKodNotValid << endl;

	//kupovini  se prilikom kreiranja mora dodijeliti kupac koji je kreator kupovine
	Kupovina kupovina(datum30062022, denis);
	if (kupovina.AddKupca(jasmin))
		cout << "Kupac uspjesno dodan!" << endl;

	ZadovoljstvoKupca zadovoljstvoKupca("Nismo pretjerano zadovoljni kvalitetom, a ni pakovanjem");
	zadovoljstvoKupca.AddOcjenuKarakteristike(NARUDZBA, 7);
	zadovoljstvoKupca.AddOcjenuKarakteristike(KVALITET, 4);

	try {
		zadovoljstvoKupca.AddOcjenuKarakteristike(KVALITET, 4); //kakrakteristika je vec ocjenjena
	}
	catch (exception& err) {
		cout << err.what() << crt;
	}

	zadovoljstvoKupca.AddOcjenuKarakteristike(PAKOVANJE, 3);
	zadovoljstvoKupca.AddOcjenuKarakteristike(ISPORUKA, 6);

	cout << zadovoljstvoKupca;

	//u okviru kupovine postavlja vrijednost atributa _zadovoljstvoKupca
	kupovina.SetZadovoljstvoKupca(zadovoljstvoKupca);

	//ukoliko se kupovini  doda zadovoljstvo koji sadrzi najmanje dvije karakteristike sa ocjenom manjom od 5, svim kupcima, 
	//koji su dodati u kupovinu, u zasebnom thread-u, se salje email sa sljedecim sadrzajem:
   /*
	   To: denis@fit.ba;jasmin@fit.ba;
	   Subject: Informacija

	   Postovani,

	   Zaprimili smo Vase ocjene, a njihova prosjecna vrijednost je X.X.
	   Zao nam je zbog toga, te ce Vas u najkracem periodu kontaktirati nasa Sluzba za odnose sa kupcima.

	   Nadamo se da cete i dalje poslovati sa nama
	   Puno pozdrava
   */

   //ispisuje sve podatke o kupovini, kupcima, komentar, ocjene pojedinih karakteristika i prosjecnu ocjenu.
	cout << kupovina << endl;
	/* Primjer ispisa:
	   -------------------------------------------
	   Kupovina 30.6.2022 za kupce:
			   1.Denis Music denis@fit.ba [BH]235-{mo}
			   2.Jasmin Azemovic jasmin@fit.ba [MO]235{sa}
	   -------------------------------------------
	   Zadovoljstvo kupca:
	   Nismo pretjerano zadovoljni kvalitetom, a ni pakovanjem.
			 NARUDZBA(7)
			 KVALITET(4)
			 PAKOVANJE(3)
			 ISPORUKA(6)
	   -------------------------------------------
	   Prosjecna ocjena -> 5
   */

	Kupovina kupovinaSaAdelom = kupovina;
	if (kupovinaSaAdelom.AddKupca(adel))
		cout << "Kupac uspjesno dodan!" << endl;
	if (!kupovinaSaAdelom.AddKupca(denis))
		cout << "Kupac je vec dodan!" << endl;

	cout << kupovinaSaAdelom << endl;

	///*metoda GetBrojZnakova treba prebrojati koliko se unutar fajla, cije ime je proslijedjeno kao parametar, nalazi: velikih slova, malih slova i razmaka..*/
	//tuple<int, int, int> brojac = kupovinaSaAdelom.GetBrojZnakova("sadrzaj.txt");
	//cout << "Velikih slova: " << get<0>(brojac) << endl;
	//cout << "Malih slova: " << get<1>(brojac) << endl;
	//cout << "Razmaka: " << get<2>(brojac) << endl;
	///*
	//ukolikoo je sadrzaj fajla npr. "Denis Music" povratne vrijednosti metode GetBrojZnakova bi trebale biti 2 8 1. za potrebe testiranja kreirajte fajl sa zeljenim sadzajem
	//*/

	cin.get();
	system("pause>0");
}