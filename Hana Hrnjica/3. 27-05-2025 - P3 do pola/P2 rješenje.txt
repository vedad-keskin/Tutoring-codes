#include <iostream>
#include<cstring>
using namespace std;


char* GetNizKaraktera(const char* tekst) {

	int vel = strlen(tekst) + 1;

	char* novi = new char[vel];

	strcpy_s(novi, vel, tekst);

	return novi;

}

class Datum {
public:
	int* _dan, * _mjesec, * _godina;
	//Kreirati i implementirati
	//1. Defaultni konstruktor


	//2. Konstruktor koji prima parametre
	Datum(int dan = 1, int mjesec = 1, int godina = 2000)
	{
		_dan = new int(dan);
		_mjesec = new int(mjesec);
		_godina = new int(godina);
	}


	//3. Konstruktor kopije
	Datum(const Datum& datum)
	{
		_dan = new int(*datum._dan);
		_mjesec = new int(*datum._mjesec);
		_godina = new int(*datum._godina);
	}
	//4. Operator dodjele
	Datum& operator=(const Datum& datum)
	{
		if (this != &datum)
		{
			delete _dan;
			delete _mjesec;
			delete _godina;


			_dan = new int(*datum._dan);
			_mjesec = new int(*datum._mjesec);
			_godina = new int(*datum._godina);
		}
		return *this;

	}
	//5. Destruktor
	~Datum()
	{
		delete _dan;
		_dan = nullptr;
		delete _mjesec;
		_mjesec = nullptr;
		delete _godina;
		_godina = nullptr;
	}
	//6. Operator ispisa 
	void Ispis()
	{
		cout << "Dan: " << *_dan << endl;
		cout << "Mjesec: " << *_mjesec << endl;
		cout << "Godina: " << *_godina << endl;
		cout << "______________________________" << endl;
	}

	// cout << datum0;

	friend ostream& operator << (ostream& COUT, const Datum& obj) {

		COUT << *obj._dan << "." << *obj._mjesec << "." << *obj._godina << endl;

		return COUT;
	}

};

class Kandidat {
public:
	char* _imePrezime;
	char* _JMBG;
	//Kreirati i implementirati
	//1. Defaultni konstruktor

	//2. Konstruktor koji prima parametre
	Kandidat(const char* imePrezime = "Nema imena", const char* JMBG = "Nema JMBG")
	{

		_imePrezime = GetNizKaraktera(imePrezime);
		_JMBG = GetNizKaraktera(JMBG);
	

	}
	//3. Konstruktor kopije
	Kandidat(const Kandidat& kandidat)
	{
		_imePrezime = GetNizKaraktera(kandidat._imePrezime);
		_JMBG = GetNizKaraktera(kandidat._JMBG);
	}
	//4. Operator dodjele
	Kandidat& operator=(const Kandidat& kandidat)
	{
		if (this != &kandidat)
		{
			delete[] _imePrezime;
			delete[] _JMBG;

			_imePrezime = GetNizKaraktera(kandidat._imePrezime);
			_JMBG = GetNizKaraktera(kandidat._JMBG);
		}
		return *this;
	}
	//5. Destruktor
	~Kandidat()
	{
		delete[] _imePrezime;
		_imePrezime = nullptr;
		delete[] _JMBG;
		_JMBG = nullptr;
	}
	//6. Operator ispisa 
	void Ispis()
	{
		cout << "Ime i prezime kandidat: " << _imePrezime << endl;
		cout << "JMBG kandidata:          " << _JMBG << endl;
		cout << "________________________________________" << endl;
	}

	friend ostream& operator << (ostream& COUT, const Kandidat& obj) {


		COUT << obj._imePrezime << " [" << obj._JMBG << "]" << endl;

		return COUT;
	}
};

class Osoba {
public:
	Datum _datumRodjenja;
	char* _imePrezime;
	char* _JMBG;
	char* _prebivaliste;
	//Kreirati i implementirati
	//1. Defaultni konstruktor

	//2. Konstruktor koji prima parametre
	Osoba(Datum datum = Datum() , const char* imePrezime = "Nema imena", const char* JMBG = "Nema jmbg", const char* prebivaliste = "Sarajevo")
		: _datumRodjenja(datum)
	{
		
		_imePrezime = GetNizKaraktera(imePrezime);
		_JMBG = GetNizKaraktera(JMBG);
		_prebivaliste = GetNizKaraktera(prebivaliste);

	}
	//3. Konstruktor kopije
	Osoba(const Osoba& osoba) : _datumRodjenja(osoba._datumRodjenja)
	{

		_imePrezime = GetNizKaraktera(osoba._imePrezime);
		_JMBG = GetNizKaraktera(osoba._JMBG);
		_prebivaliste = GetNizKaraktera(osoba._prebivaliste);
	}
	//4. Operator dodjele
	Osoba& operator=(const Osoba& osoba)
	{
		if (this != &osoba)
		{

			delete[] _imePrezime;
			delete[] _JMBG;
			delete[] _prebivaliste;


			_datumRodjenja = osoba._datumRodjenja;
			_imePrezime = GetNizKaraktera(osoba._imePrezime);
			_JMBG = GetNizKaraktera(osoba._JMBG);
			_prebivaliste = GetNizKaraktera(osoba._prebivaliste);
		}
		return *this;
	}

	//5. Destruktor
	~Osoba()
	{
		delete[] _imePrezime;
		_imePrezime = nullptr;
		delete[] _JMBG;
		_JMBG = nullptr;
		delete[] _prebivaliste;
		_prebivaliste = nullptr;
	}
	//6. Operator ispisa 
	void Ispis()
	{
		cout << "Ime i prezime osobe: " << _imePrezime << endl;
		cout << "JMBG: " << _JMBG << endl;
		cout << "Prebivaliste: " << _prebivaliste << endl;
		cout << "Datum rodjenja: " << endl;
		cout << _datumRodjenja;
	}

	friend ostream& operator << (ostream& COUT, const Osoba& obj) {

		COUT << obj._imePrezime << " [" << obj._JMBG << "] iz "<< obj._prebivaliste <<" rodjen "<< obj._datumRodjenja << endl;

		return COUT;
	}
};

class GlasackiListic {
public:
	Osoba* _glasac;
	Kandidat* _kandidat;
	//Kreirati i implementirati
	//1. Defaultni konstruktor
	GlasackiListic()
	{
		_glasac = nullptr;
		_kandidat = nullptr;
	}
	//2. Konstruktor koji prima parametre
	GlasackiListic(Osoba glasac, Kandidat kandidat)
	{
		_glasac = new Osoba(glasac);
		_kandidat = new Kandidat(kandidat);
	}
	//3. Konstruktor kopije
	GlasackiListic(const GlasackiListic& glas)
	{
		_glasac = new Osoba(*glas._glasac);
		_kandidat = new Kandidat(*glas._kandidat);
	}
	//4. Operator dodjele
	GlasackiListic& operator=(const GlasackiListic& glas)
	{
		if (this != &glas)
		{
			delete _glasac;
			delete _kandidat;

			_glasac = new Osoba(*glas._glasac);
			_kandidat = new Kandidat(*glas._kandidat);
		}
		return *this;
	}
	//5. Destruktor
	~GlasackiListic()
	{
		delete _glasac;
		_glasac = nullptr;
		delete _kandidat;
		_kandidat = nullptr;
	}
	//6. Operator ispisa 
	void Ispis()
	{
		cout << "Glasac: " << endl;
		if (_glasac != nullptr)
			_glasac->Ispis();

		cout << "Kandidat: " << endl;
		if (_kandidat != nullptr)
			_kandidat->Ispis();
		cout << "_______________________________" << endl;
	}

};


class Izbori {
public:
	char* _glasackoMjesto;
	GlasackiListic* _glasovi;
	int _trenutnoGlasova;
	int _maxBrojGlasova;
	//Kreirati i implementirati
	//1. Defaultni konstruktor
	Izbori()
	{
		_glasackoMjesto = nullptr;
		_glasovi = nullptr;
		_trenutnoGlasova = 0;
		_maxBrojGlasova = 3;
	}
	//2. Konstruktor koji prima parametre
	Izbori(const char* glasackoMjesto, int maxBrojGlasova) {

		int vel = strlen(glasackoMjesto) + 1;
		_glasackoMjesto = new char[vel];
		strcpy_s(_glasackoMjesto, vel, glasackoMjesto);
		_maxBrojGlasova = maxBrojGlasova;
		_trenutnoGlasova = 0;
		_glasovi = new GlasackiListic[_maxBrojGlasova];
	}
	//3. Konstruktor kopije
	Izbori(const Izbori& izbori)
	{
		int vel = strlen(izbori._glasackoMjesto) + 1;
		_glasackoMjesto = new char[vel];
		strcpy_s(_glasackoMjesto, vel, izbori._glasackoMjesto);
		_maxBrojGlasova = izbori._maxBrojGlasova;
		_trenutnoGlasova = izbori._trenutnoGlasova;

		_glasovi = new GlasackiListic[_maxBrojGlasova];
		for (int i = 0; i < _trenutnoGlasova; i++)
		{
			_glasovi[i] = izbori._glasovi[i];
		}
	}
	//4. Operator dodjele
	Izbori& operator=(const Izbori& izbori)
	{
		if (this != &izbori)
		{
			delete[] _glasackoMjesto;
			delete[] _glasovi;

			int vel = strlen(izbori._glasackoMjesto) + 1;
			_glasackoMjesto = new char[vel];
			strcpy_s(_glasackoMjesto, vel, izbori._glasackoMjesto);
			_maxBrojGlasova = izbori._maxBrojGlasova;
			_trenutnoGlasova = izbori._trenutnoGlasova;

			_glasovi = new GlasackiListic[_maxBrojGlasova];
			for (int i = 0; i < _trenutnoGlasova; i++)
			{
				_glasovi[i] = izbori._glasovi[i];
			}
		}
		return *this;
	}
	//5. Destruktor
	~Izbori()
	{
		delete[] _glasackoMjesto;
		_glasackoMjesto = nullptr;
		delete[] _glasovi;
		_glasovi = nullptr;
	}
	//6. Operator ispisa 
	void Ispis()
	{
		cout << "Glasacko mjesto: " << _glasackoMjesto << endl;
		cout << "Broj glasova: " << _trenutnoGlasova << endl;
		for (int i = 0; i < _trenutnoGlasova; i++)
		{
			_glasovi[i].Ispis();
		}
	}

	bool AddGlasackiListic(GlasackiListic listic)
	{
		//funkcija treba da omoguci dodavanje informacija o novom glasu i tom prilikom:
		//-     onemoguciti da se doda vise listica nego sto je dozvoljeno
		if (_trenutnoGlasova >= _maxBrojGlasova)
			return false;

		//-     onemoguciti da ista osoba glasa vise puta
		Osoba* glasac = listic._glasac;
		if (!glasac)
			return false;

		//-     onemoguciti glasanje osobama mladjim od 18 godina (uzeti u obzir godinu rodjenja)
		int godinaRodjenja = *glasac->_datumRodjenja._godina;
		int godinaNow = 2025;
		if ((godinaNow - godinaRodjenja) < 18)
			return false;

		//-     onemoguciti glasanje osobama iz drugih opstina
		if (strcmp(glasac->_prebivaliste, _glasackoMjesto) != 0)
			return false;

		//-     u zavisnosti od uspjesnosti operacije funkcija vraca true ili false
		for (int i = 0; i < _trenutnoGlasova; i++)
		{
			if (strcmp(_glasovi[i]._glasac->_JMBG, glasac->_JMBG) == 0)
				return false;
		}
		_glasovi[_trenutnoGlasova++] = listic;
		return true;

	}


};

void main() {

	Datum datum0;
	Datum datum1(12, 5, 2024);
	Datum datum2(22, 4, 2025);


	Kandidat kandidat0;
	Kandidat kandidat1("Hana Hrnjica", "0308003123455");
	Kandidat kandidat2("Hamid Hrnjica", "1809001236778");

	Osoba osoba0;
	Osoba osoba1(Datum(15, 7, 1995), "Selma Gosto", "1507995170034", "Konjic");
	Osoba osoba2(Datum(10, 10, 2004), "Amina Gosto", "1010200833333", "Konjic");
	Osoba osoba3(Datum(20, 3, 1990), "Ema Hrnjica", "2003990112233", "Mostar");
	Osoba osoba4(Datum(1, 1, 1990), "Amila Hujdur", "1507995170034", "Konjic");


	GlasackiListic listic1(osoba1, kandidat1);
	GlasackiListic listic2(osoba2, kandidat2);
	GlasackiListic listic3(osoba3, kandidat2);
	GlasackiListic listic4(osoba4, kandidat2);

	Izbori izbori("Konjic", 3);

	cout << (izbori.AddGlasackiListic(listic1) ? "Glas 1 dodat.\n" : "Glas 1 NIJE dodat.\n");
	cout << (izbori.AddGlasackiListic(listic2) ? "Glas 2 dodat.\n" : "Glas 2 NIJE dodat.\n");
	cout << (izbori.AddGlasackiListic(listic3) ? "Glas 3 dodat.\n" : "Glas 3 NIJE dodat.\n");
	cout << (izbori.AddGlasackiListic(listic4) ? "Glas 4 dodat.\n" : "Glas 4 NIJE dodat.\n");

	cout << endl << "==== PODACI O IZBORIMA ====" << endl;
	izbori.Ispis();
	system("pause>0");
}