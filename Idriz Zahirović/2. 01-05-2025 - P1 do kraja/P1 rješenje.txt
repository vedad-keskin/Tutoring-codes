#include <iostream>
using namespace std;


// POKAZIVACI

// 1. ALOKACIJA --> new

// ( ) <--- to znaci da u memoriji trazimo da imamo jedan int

// [ ] <-- to znaci da u memoriji trazimo vise od jednog char-a 

// 2. DEREFERENCIRANJE --> za ispis i za kopiranje

// ( ) <--- moramo isped staviti * --> _ECTS = 0000018303797AE0 *_ECTS -> 0

// [ ] <--- ne pisemo * ispred ---> _naziv = Nema naziva

// 3. DESTRUKTOR ILI DEALOKACIJA delete i nullptr

// ( ) <----	delete _ECTS 

// [ ] <---     delete[] _naziv;

class Predmet {
public:				 //    dft c.	//
	char* _naziv;	 // Nema naziva	//
	int _ocjena;   	 //      5		//
	int* _ECTS;		 //      0    	//

	// dft. constr.

	Predmet() {

		_ocjena = 5;

		_ECTS = new int(0);

		//char dftNaziv[] = "Nema naziva";
		const char* dftNaziv2 = "Nema naziva";

		int vel = strlen(dftNaziv2) + 1; // 11

		_naziv = new char[vel];

		strcpy_s(_naziv, vel, dftNaziv2); // 1. gdje hocu da nesto pohranim , 2. koliko slova hoces da prekopiras , 3. sta hoces da prekopiras


	}

	// user-def constr.

	// 	Predmet predmet1("Programiranje II", 9, 7);

	Predmet(const char* naziv, int ocjena, int ects) {

		_ocjena = ocjena;

		_ECTS = new int(ects);

		int vel = strlen(naziv) + 1;

		_naziv = new char[vel];

		strcpy_s(_naziv, vel, naziv);

	}

	// copy constr. 

	// Predmet predmetKopija2(predmet1);

	// & <--- posalji original 
	// const <--- neka je vrijednost konstantna (ne moze se mijenjati)

				 // Predmet predmet <-- pravi se kopija tog predmeta
	Predmet(const Predmet& predmet) {

		_ocjena = predmet._ocjena;

		_ECTS = new int(*predmet._ECTS);

		int vel = strlen(predmet._naziv) + 1;

		_naziv = new char[vel];

		strcpy_s(_naziv, vel, predmet._naziv);

	}

	// predmetOperatorDodjele = predmet1; // operator dodjele


	Predmet& operator = (const Predmet& predmet) {

		if (this != &predmet) {

			_ocjena = predmet._ocjena;

			_ECTS = new int(*predmet._ECTS);

			int vel = strlen(predmet._naziv) + 1;

			_naziv = new char[vel];

			strcpy_s(_naziv, vel, predmet._naziv);

		}


		return *this;

	}




	// destruktor ili dealokacija 

	// TILDA --> alt gr + 1 

	~Predmet() {

		delete _ECTS;
		_ECTS = nullptr;

		delete[] _naziv;
		_naziv = nullptr;

	}



	// ctrl + l --> brise citavu liniju

	void Ispis() {

		cout << "Naziv predmeta : " << _naziv << endl;
		cout << "Ocjena predmeta : " << _ocjena << endl;
		cout << "ECTS predmeta : " << *_ECTS << endl; // ctrl + d

	}



};





class Student {
	char* _imePrezime; // niz [ ] char

	Predmet* _polozeni; // ( ) ili [ ] 
	int _trenutno;      // koliko je student polozio predmeta
	int _max;           // koliko maksimalno student moze poloziti predmeta
public:


	Student() {

		//const char* dftNaziv = "Nema imena i prezimena";

		int vel = strlen("Nema imena i prezimena") + 1;

		_imePrezime = new char[vel];

		strcpy_s(_imePrezime, vel, "Nema imena i prezimena");

		_trenutno = 0; 

		_max = 3;

		_polozeni = new Predmet[_max];


	}

	Student(const char* imeprezime, int max) {

		int vel = strlen(imeprezime) + 1;
		_imePrezime = new char[vel];
		strcpy_s(_imePrezime, vel, imeprezime);

		_trenutno = 0;
		_max = max;

		_polozeni = new Predmet[_max];


	}

	Student(const Student& student) {

		int vel = strlen(student._imePrezime) + 1;
		_imePrezime = new char[vel];
		strcpy_s(_imePrezime, vel, student._imePrezime);

		_trenutno = student._trenutno;
		_max = student._max;

		_polozeni = new Predmet[_max];

		for (int i = 0; i < _trenutno; i++) // 0 1 2 
		{
			_polozeni[i] = student._polozeni[i];
		}

	}

	// 	studentOperatorDodjele = student;
	Student& operator = (const Student& student) {
		if (this != &student) {

			delete[] _imePrezime;
			delete[] _polozeni;


			int vel = strlen(student._imePrezime) + 1;
			_imePrezime = new char[vel];
			strcpy_s(_imePrezime, vel, student._imePrezime);

			_trenutno = student._trenutno;
			_max = student._max;

			_polozeni = new Predmet[_max];

			for (int i = 0; i < _trenutno; i++) // 0 1 2 
			{
				_polozeni[i] = student._polozeni[i];
			}

		}
		return *this;
	}

	~Student() {

		delete[] _imePrezime;
		_imePrezime = nullptr;
		delete[] _polozeni;
		_polozeni = nullptr;

	}

	void Ispis() {

		cout << "Ime i prezime: " << _imePrezime << endl;

		cout << "Polozeni predmeti studenta : " << endl << endl;

		//                       2  --->  0  1  2
		for (int i = 0; i < _trenutno; i++)
		{
			_polozeni[i].Ispis(); // pol[0] = PRII , pol[1] = MATII 
			cout << endl << "=========================" << endl << endl;
		}



	}

	// 	student.AddPolozeniPredmet(predmet1); <-- MATII
	void AddPolozeniPredmet(Predmet predmet) {
		// Dodaje novi polozeni predmet u niz
		// Voditi ra훾una da se ne mo탑e prekora훾iti kapacitet niza
		// Voditi ra훾una da se ne moze dodavati isti predmet (istog naziva)		        
		//    3  ==  3
		if (_max == _trenutno) {
			cout << "Student je popunio maksimalan broj polozenih predmeta" << endl;
			return;
		}

		// 2             0 1 
		for (int i = 0; i < _trenutno; i++)
		{
			// pol[0] = PRII , pol[1] = MATII 

			//   MATII == MATII 


			//				 char*  ==   char* 
			//          strcmp (  naziv1   ,  naziv2 ) == 0 

			if (strcmp(   _polozeni[i]._naziv , predmet._naziv  ) == 0 ) {
				cout << "Student je vec polozio odabrani predmet" << endl;
				return;
			}

		}


		_polozeni[_trenutno] = predmet; // pol[0] = PRII , pol[1] = MATII , pol[2] = WRD

		_trenutno++; // 0 ---> 1 ---> 2 ---> 3


	}

};



void main() {


	Predmet predmet1("Programiranje II", 9, 7);
	Predmet predmet2("Matematika II", 6, 5);
	Predmet predmet3("Web razvoj i dizajn", 7, 6);
	Predmet predmet4("Operativni sistemi", 7, 4);

	//Student student0; 

	Student student("Vedad Keskin", 3);

	student.AddPolozeniPredmet(predmet1);
	student.AddPolozeniPredmet(predmet2); // MATII
	student.AddPolozeniPredmet(predmet2); // MATII
	student.AddPolozeniPredmet(predmet3);
	student.AddPolozeniPredmet(predmet4);

	Student studentKopija = student;

	Student studentOperatorDodjele;

	studentOperatorDodjele = student;

	studentOperatorDodjele.Ispis();





	system("pause>0");
}

