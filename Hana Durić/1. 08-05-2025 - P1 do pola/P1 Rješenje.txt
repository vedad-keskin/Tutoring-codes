#include <iostream>
using namespace std;

// POKAZIVACI 

// 1. ALOKACIJA -- new 

// ( ) ---> kreiraj nam jedan int

// [ ] ---> kreiran nam prostora u memorije da se pohrani vise necega 

// 2. DEREFERENCIRANJE - ispis i kopiranja

// ( ) ---> *_ECTS = 0   ,  _ECTS = 00000196B9177A00

// [ ] ---> _naziv = Nema predmeta , *_naziv = N 

// 3. DESTRUKTOR / DEALOACKIJA - delete nullptr

// ( ) ---> delete _ECTS;

// [ ] ---> delete[] _naziv;

class Predmet {
public:			   // dft. constr.	// user-def constr.	//
//char _naziv[50]; // Nema predmeta	// 					//
    char* _naziv;  // Nema predmeta	// Programiranje II //      
	int _ocjena;   //      5		//       9			//
	int* _ECTS;	   //      0		//       7			//

	  
	// dft. constr.

	Predmet() {

		_ocjena = 5;

		_ECTS = new int(0);

		//string dftNaziv1 = "Nema predmeta";
		//char dftNaziv2[] = "Nema predmeta";
		const char* dftNaziv3 = "Nema predmeta"; // string literal - read only memory

		int vel = strlen(dftNaziv3) + 1; // 14

		_naziv = new char[vel];

		strcpy_s(_naziv , vel, dftNaziv3); // 1. gdje nesto hocemo da pohranimo , 2. koliko slova zelis da kopiras , 3. sta hocemo da prekopiramo

	}

	// user-def constr.

	// 	Predmet predmet1("Programiranje II", 9, 7);

	Predmet(const char* naziv, int ocjena, int ects ) {

		_ocjena = ocjena;

		_ECTS = new int(ects);

		int vel = strlen(naziv) + 1;

		_naziv = new char[vel];

		strcpy_s(_naziv, vel, naziv); // 1. gdje , 2. koliko , 3. sta

	}

	// Predmet predmetKopija2(predmet1);	    // copy constr.

	// & --> original saljemo
	// bez & --> pravim kopiju
	// const --> nesto je konstantno i ne moze se mijenjati

	Predmet(const Predmet& predmet) { // original

		_ocjena = predmet._ocjena;

		_ECTS = new int(*predmet._ECTS);

		int vel = strlen(predmet._naziv) + 1;

		_naziv = new char[vel];

		strcpy_s(_naziv, vel, predmet._naziv);

	}

	// 	predmetOperatorDodjele = predmet1;      // operator dodjele

	Predmet& operator = (const Predmet& predmet) {

		if (this != &predmet) {

			delete _ECTS;
			delete[] _naziv;


			_ocjena = predmet._ocjena;

			_ECTS = new int(*predmet._ECTS);

			int vel = strlen(predmet._naziv) + 1;

			_naziv = new char[vel];

			strcpy_s(_naziv, vel, predmet._naziv);
		}


		return *this;

	}



	// destructor

	// alt gr + 1 ~ TILDA
	~Predmet() {

		cout << "DESTRUKTOR SE POZVAO" << endl;

		delete _ECTS;
		_ECTS = nullptr;

		delete[] _naziv;
		_naziv = nullptr;


	}


	void Ispis() {

		cout << "Naziv predmeta : " << _naziv << endl; // ctrl + d
		cout << "Ocjena predmeta : " << _ocjena << endl;
		cout << "ECTS predmeta : " << *_ECTS << endl; 

	}




};



class Student {
	char* _imePrezime;
	Predmet* _polozeni;
	int _trenutno;
	int _max;
public:
	// Kreirati i implementirati
	// 1. Defaultni konstruktor
	// 2. Konstruktor koji prima parametre
	// 3. Konstruktor kopije
	// 4. Operator dodjele
	// 5. Destruktor
	// 6. Ispis ili COUT 
	// 7. Potrebne funkcije



	void AddPolozeniPredmet(Predmet predmet) {
		// Dodaje novi polozeni predmet u niz
		// Voditi ra훾una da se ne mo탑e prekora훾iti kapacitet niza
		// Voditi ra훾una da se ne moze dodavati isti predmet (istog naziva)		        


	}

};



void main() {


	Predmet predmet0; // <--- dft. constr.

	Predmet predmet1("Programiranje II", 9, 7); // <--- user-def. constr
	Predmet predmet2("Matematika II", 6, 4);    // <--- user-def. constr

	//Predmet predmetKopija1 = predmet1;	// copy constr.
	Predmet predmetKopija2(predmet1);	    // copy constr.

	Predmet predmetOperatorDodjele;
	predmetOperatorDodjele = predmetOperatorDodjele;      // operator dodjele

	//predmet0.Ispis(); // <--- poziv ispisa
	//predmet1.Ispis(); // <--- poziv ispisa
	//predmet2.Ispis(); // <--- poziv ispisa
	predmetOperatorDodjele.Ispis(); // <--- poziv ispisa




	system("pause>0");
}

