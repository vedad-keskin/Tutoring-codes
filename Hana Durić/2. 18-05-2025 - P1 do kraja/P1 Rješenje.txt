#include <iostream>
using namespace std;

// POKAZIVACI 

// 1. ALOKACIJA -- new 

// ( ) ---> kreiraj nam jedan int

// [ ] ---> kreiran nam prostora u memorije da se pohrani vise necega 

// 2. DEREFERENCIRANJE - ispis i kopiranja

// ( ) ---> *_ECTS = 0   ,  _ECTS = 00000196B9177A00

// [ ] ---> _naziv = Nema predmeta , *_naziv = N 

// 3. DESTRUKTOR / DEALOACKIJA - delete nullptr

// ( ) ---> delete _ECTS;

// [ ] ---> delete[] _naziv;

class Predmet {
public:			   // dft. constr.	// user-def constr.	//
	//char _naziv[50]; // Nema predmeta	// 					//
	char* _naziv;  // Nema predmeta	// Programiranje II //      
	int _ocjena;   //      5		//       9			//
	int* _ECTS;	   //      0		//       7			//


	// dft. constr.

	Predmet() {

		_ocjena = 5;

		_ECTS = new int(0);

		//string dftNaziv1 = "Nema predmeta";
		//char dftNaziv2[] = "Nema predmeta";
		const char* dftNaziv3 = "Nema predmeta"; // string literal - read only memory

		int vel = strlen(dftNaziv3) + 1; // 14

		_naziv = new char[vel];

		strcpy_s(_naziv, vel, dftNaziv3); // 1. gdje nesto hocemo da pohranimo , 2. koliko slova zelis da kopiras , 3. sta hocemo da prekopiramo

	}

	// user-def constr.

	// 	Predmet predmet1("Programiranje II", 9, 7);

	Predmet(const char* naziv, int ocjena, int ects) {

		_ocjena = ocjena;

		_ECTS = new int(ects);

		int vel = strlen(naziv) + 1;

		_naziv = new char[vel];

		strcpy_s(_naziv, vel, naziv); // 1. gdje , 2. koliko , 3. sta

	}

	// Predmet predmetKopija2(predmet1);	    // copy constr.

	// & --> original saljemo
	// bez & --> pravim kopiju
	// const --> nesto je konstantno i ne moze se mijenjati

	Predmet(const Predmet& predmet) { // original

		_ocjena = predmet._ocjena;

		_ECTS = new int(*predmet._ECTS);

		int vel = strlen(predmet._naziv) + 1;

		_naziv = new char[vel];

		strcpy_s(_naziv, vel, predmet._naziv);

	}

	// 	predmetOperatorDodjele = predmet1;      // operator dodjele

	Predmet& operator = (const Predmet& predmet) {

		if (this != &predmet) {

			delete _ECTS;
			delete[] _naziv;


			_ocjena = predmet._ocjena;

			_ECTS = new int(*predmet._ECTS);

			int vel = strlen(predmet._naziv) + 1;

			_naziv = new char[vel];

			strcpy_s(_naziv, vel, predmet._naziv);
		}


		return *this;

	}



	// destructor

	// alt gr + 1 ~ TILDA
	~Predmet() {

		delete _ECTS;
		_ECTS = nullptr;

		delete[] _naziv;
		_naziv = nullptr;


	}


	void Ispis() {

		cout << "Naziv predmeta : " << _naziv << endl; // ctrl + d
		cout << "Ocjena predmeta : " << _ocjena << endl;
		cout << "ECTS predmeta : " << *_ECTS << endl;

	}




};



class Student {
	char* _imePrezime;  // [ ] 


	Predmet* _polozeni; // [ ] 
	int _trenutno;      // koliko trenutno imamo pohranjenih Predmeta u nizu _polozeni
	int _max;           // koliko maksimalno mozemo imati Predmeta u nizu _polozeni
public:

	Student() {

		const char* dftNaziv = "Nema imena i prezimena"; 
		int vel = strlen(dftNaziv) + 1;
		_imePrezime = new char[vel];
		strcpy_s(_imePrezime, vel, dftNaziv);

		_trenutno = 0;
		_max = 3;

		_polozeni = new Predmet[_max];

	}

	Student(const char* imePrezime, int max) {

		int vel = strlen(imePrezime) + 1;
		_imePrezime = new char[vel];
		strcpy_s(_imePrezime, vel, imePrezime);

		_trenutno = 0;
		_max = max;

		_polozeni = new Predmet[_max];

	}

	Student(const Student& student) {

		int vel = strlen(student._imePrezime) + 1;
		_imePrezime = new char[vel];
		strcpy_s(_imePrezime, vel, student._imePrezime);

		_trenutno = student._trenutno;
		_max = student._max;

		_polozeni = new Predmet[_max];

		for (int i = 0; i < _trenutno; i++) // 0 1 2 
		{
			_polozeni[i] = student._polozeni[i];
		}

	}

	// studentOperatorDodjele = student;

	Student& operator = (const Student& student) {

		if (this != &student) {

			delete[] _imePrezime; // ctrl + d
			delete[] _polozeni;



			int vel = strlen(student._imePrezime) + 1;
			_imePrezime = new char[vel];
			strcpy_s(_imePrezime, vel, student._imePrezime);

			_trenutno = student._trenutno;
			_max = student._max;

			_polozeni = new Predmet[_max];

			for (int i = 0; i < _trenutno; i++) // 0 1 2 
			{
				_polozeni[i] = student._polozeni[i];
			}

		}

		return *this;

	}


	~Student() {

		delete[] _imePrezime; // ctrl + d
		_imePrezime = nullptr;
		delete[] _polozeni; // drzis alt i strelicama ides gore dole 
		_polozeni = nullptr;

	}

	void Ispis() {

		cout << "Ime i prezime : " << _imePrezime << endl;

		cout << "Polozeni predmeti studenta : " << endl << endl;

		
		for (int i = 0; i < _trenutno; i++) // i = 0 , 1 , 2 
		{
			_polozeni[i].Ispis(); // pol[0] , pol[1] , pol[2] 
			cout << endl<< "=================== " << endl << endl;
		}

	}


	// student.AddPolozeniPredmet(predmet1); <--- MATII
	
	void AddPolozeniPredmet(Predmet predmet) {
		// Dodaje novi polozeni predmet u niz
		// Voditi ra훾una da se ne mo탑e prekora훾iti kapacitet niza
		// Voditi ra훾una da se ne moze dodavati isti predmet (istog naziva)		
		

		//     3 == 3 
		if (_max == _trenutno) {

			cout << "Student ne moze poloziti vise predmeta" << endl;
			return;

		}

		for (int i = 0; i < _trenutno; i++) // i = 0 , 1 
		{
			// pol[0] = PRII , pol[1] = MATII   == MATII  

			//                char* == char*
			//            strcmp ( naziv1   ,  naziv2 ) == 0 


			if (strcmp(  _polozeni[i]._naziv , predmet._naziv ) == 0) 
			{

				cout << "Odabrani predmet je vec polozen" << endl;
				return;

			}

		}




		// pol[0] = PRII
		// pol[1] = MATII
		// pol[2] = WRD

		_polozeni[_trenutno] = predmet; 

		_trenutno++; // 0 ----> 1 ----> 2 ----> 3 

	}

};



void main() {


	//Predmet predmet0; // <--- dft. constr.

	Predmet predmet1("Programiranje II", 9, 7); // <--- user-def. constr
	Predmet predmet2("Matematika II", 6, 4);    // <--- user-def. constr
	Predmet predmet3("Web razvoj i dizajn", 7, 5);    // <--- user-def. constr
	Predmet predmet4("Operativni sistemi", 6, 5);    // <--- user-def. constr

	Student student("Vedad Keskin", 3);   // <--- dft. constr.


	student.AddPolozeniPredmet(predmet1);
	student.AddPolozeniPredmet(predmet2);  // <-- MATII 
	student.AddPolozeniPredmet(predmet2);  // <-- MATII 
	student.AddPolozeniPredmet(predmet3);
	student.AddPolozeniPredmet(predmet4);


	Student studentKopija = student;

	Student studentOperatorDodjele;  // <--- dft. constr.

	studentOperatorDodjele = student;


	studentOperatorDodjele.Ispis();

	//Predmet predmetKopija1 = predmet1;	// copy constr.
	//Predmet predmetKopija2(predmet1);	    // copy constr.

	//Predmet predmetOperatorDodjele;
	//predmetOperatorDodjele = predmetOperatorDodjele;      // operator dodjele

	////predmet0.Ispis(); // <--- poziv ispisa
	////predmet1.Ispis(); // <--- poziv ispisa
	////predmet2.Ispis(); // <--- poziv ispisa
	//predmetOperatorDodjele.Ispis(); // <--- poziv ispisa




	system("pause>0");
}

