#include <iostream>
using namespace std;
char* GetNizKaraktera(const char* tekst) {
	if (tekst == nullptr)
		return nullptr;
	int vel = strlen(tekst) + 1;
	char* novi = new char[vel];
	strcpy_s(novi, vel, tekst);
	return novi;
}


template<class T>
class Kolekcija {
public:
	T* _niz;
	int _max;
	int _trenutno;
	//Kreirati i implementirati 
	// 7. Potrebne funkcije

	Kolekcija(int max = 5) {
		_trenutno = 0;
		_max = max;
		_niz = new T[_max];
	}
	Kolekcija(const Kolekcija& original) {
		_trenutno = 0;
		_max = original._max;
		_niz = new T[_max];
		for (size_t i = 0; i < _trenutno; i++)
			_niz[i] = original._niz[i];
	}
	Kolekcija operator=(const Kolekcija& original) {
		if (this != &original) {
			delete[] _niz;
			_trenutno = 0;
			_max = original._max;
			for (size_t i = 0; i < _trenutno; i++)
				_niz[i] = original._niz[i];
		}
		return *this;
	}
	~Kolekcija() {
		delete _niz;
		_niz = nullptr;
	}

	void AddElement(T el) {
		// Dodaje element tipa T u niz
		if (_trenutno == _max)
			throw exception("Prekoracenje opsega.");


		for (size_t i = 0; i < _trenutno; i++)
		{
			//    Ziv == Ziv .. 
			if (_niz[i] == el)
				throw exception("Unijeli ste postojeci element.");
		}


		_niz[_trenutno] = el;
		_trenutno++;
	}


	bool IsEmpty() {
		// Vršiti provjeru da li je niz prazan
		if (_niz == nullptr || _trenutno == 0)
			return true;
		return false;
	}


	bool Remove() {
		// Uklanja zadnji element iz niza
		if (IsEmpty())
			return false;

		_trenutno--;


		return true;
	}


	bool RemoveAtL(int lokacija) {
		// Uklanja element na određenoj poziciji
		if (lokacija > _trenutno || lokacija < 0 || IsEmpty())
			return false;

		for (size_t i = lokacija; i < _trenutno - 1; i++)
			_niz[i] = _niz[i + 1];

		_trenutno--;

		return true;
	}


	bool RemoveAt(T el) {
		// Uklanja element koji je jednak proslijeđenom

		for (size_t i = 0; i < _trenutno; i++)
			if (_niz[i] == el) {
				RemoveAtL(i);
				return true;
			}
		return false;
	}


	void InsertAt(T el, int lokacija) {
		// Dodaje element na određenu lokaciju
		//for (size_t i = lokacija; i < _trenutno + 1; i++)
		//{
		//	if (lokacija == i) {
		//		_niz[i + 1] = _niz[i];
		//		_niz[i] = el;
		//	}
		//}


		for (int i = _trenutno; i > lokacija; i--)
		{
			_niz[i] = _niz[i - 1];
		}
		_niz[lokacija] = el;

		_trenutno++;


	}
	//T* GetNajmanjiElement() {
//	 //Vraća najmanji element iz niza i to kao pokazivač
//	T* najmanji = new T(_niz[0]);

//	for (size_t i = 0; i < _trenutno; i++)
//	{
//		if (*najmanji > _niz[i])
//			*najmanji = _niz[i];
//	}

//	return najmanji;
//}


	T* GetNajmanjiElement() {
		// Vraća najmanji element iz niza i to kao pokazivač
		T najmanji = _niz[0];

		for (size_t i = 0; i < _trenutno; i++)
		{
			// Ziv > 
			if (najmanji > _niz[i])
				najmanji = _niz[i];
		}

		return new T(najmanji);
	}

	friend ostream& operator << (ostream& COUT, const Kolekcija& obj) {

		for (int i = 0; i < obj._trenutno; i++)
		{
			COUT << obj._niz[i] << endl;
		}

		return COUT;
	}


};

class Zivotinja {
private:
	char* _naziv;
	int _tezina;
public:



	Zivotinja(const char* naziv = "---", int tezina = 5) {
		_naziv = GetNizKaraktera(naziv);
		_tezina = tezina;
	}
	Zivotinja(const Zivotinja& original) {
		_naziv = GetNizKaraktera(original._naziv);
		_tezina = original._tezina;
	}
	Zivotinja& operator=(const Zivotinja& original) {
		if (this != &original) {
			delete[] _naziv;
			_naziv = GetNizKaraktera(original._naziv);
			_tezina = original._tezina;
		}
		return *this;
	}
	~Zivotinja()
	{
		delete[] _naziv;
		_naziv = nullptr;
	}
	friend ostream& operator<<(ostream& COUT, const Zivotinja& original) {
		COUT << original._naziv << endl;
		COUT << original._tezina << "kg." << endl;
		return COUT;
	}

	// Operator == na način da poredi po vrsti životinje da li su dvije životinje iste

	bool operator==(const Zivotinja& original) {
		return strcmp(_naziv, original._naziv) == 0;
	}

	//// Operator > na način da poredi da li je težina prve životinje veća od težine druge

	bool operator>(const Zivotinja& original) {
		return (_tezina > original._tezina) ? true : false;
	}
};

void main() {



	Zivotinja zivotinja1("Slon", 4000);
	Zivotinja zivotinja2("Maca", 3);
	Zivotinja zivotinja3("Cuko", 10);
	Zivotinja zivotinja4("Ptica", 1);
	Zivotinja zivotinja5("Ajkula", 300);

	Kolekcija<Zivotinja> zooloskiVrt(10);

	zooloskiVrt.AddElement(zivotinja1);
	zooloskiVrt.AddElement(zivotinja2);
	zooloskiVrt.AddElement(zivotinja3);
	zooloskiVrt.AddElement(zivotinja4);
	zooloskiVrt.AddElement(zivotinja5);

	zooloskiVrt.Remove();

	zooloskiVrt.RemoveAtL(2);

	zooloskiVrt.RemoveAt(zivotinja4);

	Zivotinja zivotinjaX("Zmaj", 1000);

	zooloskiVrt.InsertAt(zivotinjaX, 0);

	cout << "Najmanja zivotinja u zooloskom vrtu je " << *zooloskiVrt.GetNajmanjiElement() << endl;

	cout << zooloskiVrt;












	//int ascii = 65; // 65 = A 

	//Kolekcija<char> kolekcija(10);

	//for (int i = 0; i < 9; i++)
	//{
	//	kolekcija.AddElement(ascii + i); // 66 67 68 , A B C ... 
	//}


	//kolekcija.Remove();
	//
	//kolekcija.RemoveAt(3);
	//
	//kolekcija.RemoveAt('C');
	//
	//kolekcija.InsertAt('Z', 1);
	//
	//cout << "Najmanji element kolekcije je " << *kolekcija.GetNajmanjiElement() << endl;




	//try {
	//	// baciti exception ako je niz popunjen
	//	kolekcija.AddElement('B');
	//}
	//catch (exception& err) {
	//	cout << err.what() << endl;
	//}


//try {
//	// baciti exception ako je niz popunjen
//	kolekcija.AddElement('K');
//	kolekcija.AddElement('L');
//}
//catch (exception& err) {
//	cout << err.what() << endl;
//}





	system("pause>0");
}
