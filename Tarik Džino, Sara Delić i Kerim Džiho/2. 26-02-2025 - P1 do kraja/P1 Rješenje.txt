#include <iostream>
using namespace std;

// POKAZIVACI : 

// 1. ALOKACIJA ( new ) 

// ako je jedna vrijednost --> ( ) 

// ako je vise vrijednosti --> [ ] 

// 2. DEREFERENCIRANJE ( ispis , kopiranje )

// ako je jedna vrijednost --> ( ) -->  _ECTS -> 000002205A2481E0 , *_ECTS -> 0 

// ako je vise vrijednosti --> [ ] -->  _naziv --> Nema predmeta

// 3. DEALOCIRANJE / DESKTRUKTOR  --> ( delete , nullptr )

// ako je jedna vrijednost --> ( ) -->	delete _ECTS;

// ako je vise vrijednosti --> [ ] -->  delete[] _naziv;



class Predmet {
public:             //      dft      //     user def.    //
	char* _naziv;  	// Nema predmeta // Programiranje II //
	int _ocjena;	//      5		 //       9			 //
	int* _ECTS;		//      0		 //       7			 //


	// dft. constructor

	Predmet() {

		_ocjena = 5;

		_ECTS = new int(0);

		//char tekst1[] = "Nema Predmeta";
		//string tekst2 = "Nema predmeta";
		const char* dftNaziv = "Nema predmeta";

		int vel = strlen(dftNaziv) + 1; // 14 

		_naziv = new char[vel]; // na pocetku je taj niz prazan 

		// 1. gdje hocete da pohranite nesto 
		// 2. koliko ce karaktera biti prekopirano 
		// 3. sta zelimo da pohranimo
		strcpy_s(_naziv, vel, dftNaziv); 


	}


	// user-def constr. , standardni/obicni constr.

	//	Predmet predmet1("Programiranje II", 9, 7);
	Predmet(const char* naziv, int ocjena, int ects) {

		_ocjena = ocjena;

		_ECTS = new int(ects);


		int vel = strlen(naziv) + 1;

		_naziv = new char[vel];

		strcpy_s(_naziv, vel, naziv); // 1. gdje, 2. koliko, 3. sta


	}

	// copy constr. 

	// 	Predmet predmetKopija(predmet1);

	// bez & -> pravimo kopiju ali isto tako pravimo i duplu memoriju
	// sa & -> saljemo original ali se taj original moze mijenjati
	// const -> osigurava da se nesto ne smije mijenjati 

	Predmet(const Predmet& predmet) { // salje originalni predmet

		_ocjena = predmet._ocjena;

		_ECTS = new int(*predmet._ECTS);

		int vel = strlen(predmet._naziv) + 1;

		_naziv = new char[vel];

		strcpy_s(_naziv, vel, predmet._naziv);

	}

	//	predmet5 = predmet1; // <-- operator dodjele

	Predmet& operator = (const Predmet& predmet) {

		if (this != &predmet) {


			delete _ECTS;
			delete[] _naziv;


			_ocjena = predmet._ocjena;

			_ECTS = new int(*predmet._ECTS);

			int vel = strlen(predmet._naziv) + 1;

			_naziv = new char[vel];

			strcpy_s(_naziv, vel, predmet._naziv);

		}


		return *this;
	}




	// destructor
	// 
	// TILDA -> alt gr + 1
	~Predmet() {

		delete _ECTS;
		_ECTS = nullptr;

		delete[] _naziv;
		_naziv = nullptr;

	}

	// pr1 nacin ispisa

	void Ispis() {

		cout << "Naziv predmeta: " << _naziv << endl;
		cout << "Ocjena predmeta: " << _ocjena << endl;
		cout << "ECTS predmeta: " << *_ECTS << endl;

		cout << endl << "====================" << endl <<endl;

	}





};





class Student {
	char* _imePrezime;   // niz karaktera [ ] char

	Predmet* _polozeni;  // [ ] niz Predmeta
	int _trenutno;       // koliko trenutno imamo pohranjenih predmeta u nizu
	int _max;            // koliko maksimalno mozete imati pohranjenih predmeta
public:


	Student() {

		const char* dftImePrezime = "Nema imena i prezime";
		int vel = strlen(dftImePrezime) + 1;
		_imePrezime = new char[vel];
		strcpy_s(_imePrezime, vel, dftImePrezime);

		_trenutno = 0;
		_max = 3;

		_polozeni = new Predmet[_max];


	}


	// 	Student student("Vedad Keskin", 3);
	Student(const char* imeprezime, int max) {

		int vel = strlen(imeprezime) + 1;
		_imePrezime = new char[vel];
		strcpy_s(_imePrezime, vel, imeprezime);


		_trenutno = 0;
		_max = max;

		_polozeni = new Predmet[_max];



	}

	Student(const Student& student) {

		int vel = strlen(student._imePrezime) + 1;
		_imePrezime = new char[vel];
		strcpy_s(_imePrezime, vel, student._imePrezime);


		_trenutno = student._trenutno;

		_max = student._max;

		_polozeni = new Predmet[_max];

		for (int i = 0; i < _trenutno; i++) // 0 1 
		{
			_polozeni[i] = student._polozeni[i];
		}


	}

	// 	studentOperatorDodjele = student;

	Student& operator = (const Student& student) {

		if (this != &student) {

			delete[] _imePrezime;
			delete[] _polozeni;


			int vel = strlen(student._imePrezime) + 1;
			_imePrezime = new char[vel];
			strcpy_s(_imePrezime, vel, student._imePrezime);


			_trenutno = student._trenutno;

			_max = student._max;

			_polozeni = new Predmet[_max];

			for (int i = 0; i < _trenutno; i++) // 0 1 
			{
				_polozeni[i] = student._polozeni[i];
			}

		}

		return *this;

	}



	~Student() {

		delete[] _imePrezime;
		_imePrezime = nullptr;
		delete[] _polozeni;
		_polozeni = nullptr;

	}









	void Ispis() {

		cout << "Ime i prezime studenta: " << _imePrezime << endl;
		cout << "=========== POLOZENI PREDMETI =============" << endl << endl;

		for (int i = 0; i < _trenutno; i++) // 0 1 2
		{
			_polozeni[i].Ispis(); // pol[0] , pol[1] , pol[2] 
		}


	}


	// 	student.AddPolozeniPredmet(predmet1); -> MATII
	void AddPolozeniPredmet(Predmet predmet) {
		// Dodaje novi polozeni predmet u niz
		// Voditi računa da se ne može dodavati isti predmet (istog naziva)
		// Voditi računa da se ne može prekoračiti kapacitet niza

		if (_trenutno == _max) {
			cout << "Student ne moze imati vise polozenih predmeta" << endl;
			return;
		}

		for (int i = 0; i < _trenutno; i++) // 0 1 
		{
			//          char*       == char*
			//      strcmp(  naziv1   ,   naziv2    ) == 0 

			if ( strcmp( _polozeni[i]._naziv , predmet._naziv) == 0) {

				cout << "Student vec ima odabrani polozeni predmet" << endl;
				return;

			}


		}


		_polozeni[_trenutno] = predmet; // pol[0] = PRII , pol[1] = MATII , pol[2] = WRD

		_trenutno++; // 0 --> 1 --> 2 --> 3

	}

};



void main() {

	//Predmet predmet0;  // <--- dft constr.
	//predmet0.Ispis();  // <--- poziv ispisa


	//predmet2.Ispis();
	//predmet3.Ispis();

	//predmet1.Ispis();

	//Predmet predmetKopija = predmet1;  // <-- copy constr. 
	//Predmet predmetKopija(predmet1); // <-- copy constr. 

	//predmetKopija.Ispis();

	//Predmet predmetOperatorDodjele;

	//predmetOperatorDodjele = predmetOperatorDodjele; // <-- operator dodjele

	//predmetOperatorDodjele.Ispis();

	Predmet predmet1("Programiranje II", 9, 7); // <--- usr. def constr.
	Predmet predmet2("Matematika II", 6, 5); // <--- usr. def constr.
	Predmet predmet3("Web razvoj i dizajn", 7, 5); // <--- usr. def constr.
	Predmet predmet4("Operativni sistemi", 7, 5); // <--- usr. def constr.

	//Student student0;
	//student0.Ispis();

	Student student("Vedad Keskin", 3);

	student.AddPolozeniPredmet(predmet1);
	student.AddPolozeniPredmet(predmet2);
	student.AddPolozeniPredmet(predmet2); // dupliranje
	student.AddPolozeniPredmet(predmet3);
	student.AddPolozeniPredmet(predmet4); // prekoracenje maxa


	//Student studentKopija = student; // <-- copy constr.
	//studentKopija.Ispis();

	Student studentOperatorDodjele;

	studentOperatorDodjele = student;

	studentOperatorDodjele.Ispis();


	system("pause>0");
}

