#include<iostream>
#include<iomanip>
using namespace std;

char* GetNizKaraktera(const char* tekst) {
	if (tekst == nullptr)
		return nullptr;
	int vel = strlen(tekst) + 1;
	char* novi = new char[vel];
	strcpy_s(novi, vel, tekst);
	return novi;
}

class Artikal {
	char* _sifra;
	char* _naziv;
	double _cijena;
	int _kolicinaNaSkladistu;
public:

	Artikal(const char* sifra = "SIF001", const char* naziv = "---", double cijena = 0, int kolicina = 0) {

		_sifra = GetNizKaraktera(sifra);
		_naziv = GetNizKaraktera(naziv);
		_cijena = cijena;
		_kolicinaNaSkladistu = kolicina;

	}

	Artikal(const Artikal& obj) {

		_sifra = GetNizKaraktera(obj._sifra);
		_naziv = GetNizKaraktera(obj._naziv);
		_cijena = obj._cijena;
		_kolicinaNaSkladistu = obj._kolicinaNaSkladistu;

	}

	Artikal& operator=(const Artikal& obj) {

		if (this != &obj) {
			delete[]_sifra;
			delete[]_naziv;

			_sifra = GetNizKaraktera(obj._sifra);
			_naziv = GetNizKaraktera(obj._naziv);
			_cijena = obj._cijena;
			_kolicinaNaSkladistu = obj._kolicinaNaSkladistu;
		}
		return *this;
	}

	~Artikal() {
		delete[]_sifra; _sifra = nullptr;
		delete[]_naziv; _naziv = nullptr;
	}

	friend ostream& operator <<(ostream& COUT, const Artikal& obj) {

		cout << obj._naziv << " [ " << obj._sifra << " ] " << obj._cijena << "KM" << endl;
		cout << "Kolicina na skladistu: " << obj._kolicinaNaSkladistu << endl;

		return COUT;
	}

	Artikal& operator +=(int kolicina) {	//operatori (+=) i (-=)
		if (kolicina < 0) {
			cout << "nije dozvoljena negativna vrijednost!" << endl;
			return *this;
		}
		_kolicinaNaSkladistu += kolicina;
		return *this;
	}

	Artikal& operator -=(int kolicina) {
		if (kolicina < 0) {
			cout << "nije dozvoljena negativna vrijednost!" << endl;
			return *this;
		}
		_kolicinaNaSkladistu -= kolicina;
		return *this;
	}

	Artikal& operator ++() {	//operatori (++) i (--)
		_cijena += 1;
		return *this;
	}

	Artikal& operator --() {
		_cijena -= 1;
		return *this;
	}

	//Artikal& operator ++(int) {	//sufiksni/postfiksni ++ -> (a++)
	//	Artikal temp = *this;
	//	_cijena += 1;
	//	return temp;
	//}

	bool operator ==(const Artikal& obj) {
		if (strcmp(_sifra, obj._sifra) == 0)
			return true;
		return false;
	}

	int GetKolicinaNaSkladistu() { return _kolicinaNaSkladistu; }
	double GetCijena() { return _cijena; }
	char* GetSifra() { return _sifra; }
	char* GetNaziv() { return _naziv; }
};

class StavkaRacuna {
	Artikal* _artikal;
	int* _kolicina;
public:

	StavkaRacuna(Artikal artikal = Artikal(), int kolicina = 0) {  //default i parametarski konstruktor
		_artikal = new Artikal(artikal);
		_kolicina = new int(kolicina);
	}

	StavkaRacuna(const StavkaRacuna& obj) {		//copy konstr
		_artikal = new Artikal(*obj._artikal);
		_kolicina = new int(*obj._kolicina);
	}

	StavkaRacuna& operator=(const StavkaRacuna& obj) {	//operator (=)
		if (this != &obj) {
			delete _artikal; _artikal = nullptr;
			delete _kolicina; _kolicina = nullptr;

			_artikal = new Artikal(*obj._artikal);
			_kolicina = new int(*obj._kolicina);
		}
		return *this;
	}

	~StavkaRacuna() {	//destruktor
		delete _artikal; _artikal = nullptr;
		delete _kolicina; _kolicina = nullptr;
	}

	/// COUT ///
	
	//friend ostream& operator <<(ostream& COUT, const StavkaRacuna& obj) {
	//	if (obj._artikal != nullptr)
	//		COUT << *obj._artikal << "\n Kupljena kolicina:" << "................... " << *obj._kolicina << " kom" << endl;
	//	return COUT;
	//}

	friend ostream& operator <<(ostream& COUT, const StavkaRacuna& obj) {
		if (obj._artikal != nullptr)
			COUT << left << setw(30) << setfill('.') << (string(obj._artikal->GetNaziv()) + ":") << " " << *obj._kolicina << " kom" << setfill(' ') << endl;
		return COUT;
	}

	// Operator += koji uvećava stanje na skladištu artikla

	StavkaRacuna& operator +=(int kolicina) {
		_artikal->operator+= (kolicina);
		return *this;
	}

	// Operator -= koji umanjuje stanje na skladištu artikla

	StavkaRacuna& operator -=(int kolicina) {
		_artikal->operator-=(kolicina);
		return *this;
	}

	// Operator == koji poredi stavke na osnovu sifre

	bool operator ==(const StavkaRacuna& obj) {
		if (strcmp(_artikal->GetSifra(), obj._artikal->GetSifra()) == 0)
			return true;
		return false;
	}

	// Operator ++ koji uvećava količinu stavke racuna

	StavkaRacuna& operator ++() {
		*_kolicina += 1;
		return *this;
	}


	double GetCijena() { // vraća cijenu stavke racuna (kolicina * cijena artikla) 
		return *_kolicina * _artikal->GetCijena();
	}

	double GetKolicina() { // vraća količinu stavke računa 
		return *_kolicina;
	}

};


class Racun {
	static int _id; // unikatni identifikator, koristi se za povećanje broja računa uz osiguravanje unikatnosti 
	int _brojRacuna;
	StavkaRacuna* _stavke;
	int _trenutno;
	int _max;
	double _iznosBezPDV;
	double _iznosSaPDV;
	bool _naplaceno;
public:
		
	Racun(int max = 3) {

		_brojRacuna = _id++;
		_trenutno = 0;
		_max = max;

		_stavke = new StavkaRacuna[_max];

		_iznosBezPDV = 0;
		_iznosSaPDV = 0;

		_naplaceno = false;

	}

	Racun(const Racun& obj) {

		_brojRacuna = obj._brojRacuna;
		_trenutno = obj._trenutno;
		_max = obj._max;

		_stavke = new StavkaRacuna[obj._max];

		for (size_t i = 0; i < _trenutno; i++)
		{
			_stavke[i] = obj._stavke[i];
		}

		_iznosBezPDV = obj._iznosBezPDV;
		_iznosSaPDV = obj._iznosSaPDV;

		_naplaceno = obj._naplaceno;

	}

	Racun& operator=(const Racun& obj) {
		if (this != &obj) {
			delete[]_stavke;

			_brojRacuna = obj._brojRacuna;
			_trenutno = obj._trenutno;
			_max = obj._max;

			_stavke = new StavkaRacuna[obj._max];

			for (size_t i = 0; i < _trenutno; i++)
			{
				_stavke[i] = obj._stavke[i];
			}

			_iznosBezPDV = obj._iznosBezPDV;
			_iznosSaPDV = obj._iznosSaPDV;

			_naplaceno = obj._naplaceno;
		}
		return *this;
	}

	~Racun() {
		delete[]_stavke;
		_stavke = nullptr;
	}

	// Operator () - Dodaje nove artikle u _stavke (ulazni parametri su Artikal i kolicina)
	// Voditi računa o tome da li je račun već naplaćen
	// Prilikom svakog dodavanja artikla, ažurirati vrijednosti iznosBezPDV i iznosSaPDV

	// racun1(artikal1, 3); //

	Racun& operator ()(Artikal artikal, int kolicina){
		
		StavkaRacuna stavka(artikal, kolicina);

		stavka.operator-=(kolicina);

		_stavke[_trenutno] = stavka;
		_trenutno++;

		_iznosBezPDV += stavka.GetCijena() * kolicina;
		_iznosSaPDV += stavka.GetCijena() + (stavka.GetCijena() * 0.17);

		return *this;
	}

	void PrintRacun() {
		// Ispisuje sve stavke računa zajedno sa iznosom za plaćanje sa i bez PDV-a
		// Voditi računa da nema duplikata
		// Voditi računa da nema prekoračenja niza
		// Voditi računa da se jedan račun ne može dva puta isprintati (paziti na bool _naplaceno)

	}

};
int Racun::_id = 1000;

void main() {

	Artikal artikal1("SIF105", "Keks", 2.5, 79);
	Artikal artikal2("SIF002", "Banana", 3.4, 20);
	Artikal artikal3("SIF005", "Cokolada", 8, 55);

	/*cout << artikal1 << endl;
	cout << artikal2 << endl;
	cout << artikal3 << endl;
	
	cout << "==============================================" << endl << endl;

	cout << "(stanje na skladistu ++)" << endl << endl;
	cout << (artikal1 += 1) << endl;
	cout << (artikal2 -= 10) << endl;
	
	cout << "==============================================" << endl << endl;

	cout << "(cijena++)" << endl << endl;
	cout << ++artikal1 << endl;
	cout << --artikal2 << endl;
	
	cout << "==============================================" << endl << endl;

	StavkaRacuna stavka1(artikal1, 2);
	StavkaRacuna stavka2(artikal2, 15);
	StavkaRacuna stavka3(artikal3, 5);
	
	cout << stavka1 << endl;
	cout << stavka2 << endl;
	cout << stavka3 << endl;
	cout << "==============================================" << endl << endl;*/


	


	system("pause>0");
}
