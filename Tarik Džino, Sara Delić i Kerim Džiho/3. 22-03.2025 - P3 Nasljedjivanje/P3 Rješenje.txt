#include <iostream>
using namespace std;


char* GetNizKaraktera(const char* sadrzaj) {

	int vel = strlen(sadrzaj) + 1;
	char* novi = new char[vel];
	strcpy_s(novi, vel, sadrzaj);
	return novi;

}

// BAZNA KLASA


class Osoba {
protected: // 1. razlika 
	char* _imePrezime;
	char* _JMBG;
public:

	//                 Denis Music                   21123123123
	Osoba(const char* imeprezime = "---", const char* jmbg = "---") {

		_imePrezime = GetNizKaraktera(imeprezime);
		_JMBG = GetNizKaraktera(jmbg);

	}

	Osoba(const Osoba& obj) {

		_imePrezime = GetNizKaraktera(obj._imePrezime);
		_JMBG = GetNizKaraktera(obj._JMBG);

	}

	Osoba& operator = (const Osoba& obj) {
		if (this != &obj) {

			delete[] _imePrezime;
			delete[] _JMBG;

			_imePrezime = GetNizKaraktera(obj._imePrezime);
			_JMBG = GetNizKaraktera(obj._JMBG);

		}
		return *this;
	}

	virtual ~Osoba() { // 2. razlika

		delete[] _imePrezime;
		_imePrezime = nullptr;
		delete[] _JMBG;
		_JMBG = nullptr;

	}


	virtual void Info() = 0; // 3. razlika


	friend ostream& operator << (ostream& COUT, const Osoba& obj) {

		COUT << obj._imePrezime << " ["<<obj._JMBG<<"]" << endl;

		return COUT;
	}

};


// IZVEDENA KLASA 

class Profesor : public Osoba  { // 1. razlika
public:
	char* _titula;


	// 	Profesor profesor1("prof. dr.", "Denis Music", "2131312321");

	Profesor(const char* titula = "prof.", const char* imeprezime = "---", const char* jmbg = "---") 
		: Osoba(imeprezime , jmbg)  { // 2. razlika

		_titula = GetNizKaraktera(titula);

	}

	Profesor(const Profesor& obj) : Osoba(obj) { // 3. razlika

		_titula = GetNizKaraktera(obj._titula);


	}

	Profesor& operator = (const Profesor& obj) {
		if (this != &obj) {

			delete[] _titula;


			Osoba::operator=(obj); // 4. razlika
			

			_titula = GetNizKaraktera(obj._titula);

		}
		return *this;
	}

	void Info() { // 5. razlika

		cout << *this;

	}


	~Profesor() {

		delete[] _titula;
		_titula = nullptr;

	}

	friend ostream& operator << (ostream& COUT, const Profesor& obj) {

		// Dodatni nacin
		//COUT << obj._titula << " ";
		//COUT << Osoba(obj) << endl;

		COUT << obj._titula << " " << obj._imePrezime << " ["<<obj._JMBG<<"]" << endl;

		return COUT;
	}


};


class Predmet {
public:
	char* _naziv; // [ ]
	int* _ECTS;   // ( ) 
	Profesor* _predmetniProfesor; // ( ) 


	Predmet(const char* naziv = "---", int ects = 0, Profesor profesor = Profesor() ) {

		_naziv = GetNizKaraktera(naziv);
		_ECTS = new int(ects);
		_predmetniProfesor = new Profesor(profesor);

	}

	Predmet(const Predmet& obj) {

		_naziv = GetNizKaraktera(obj._naziv);
		_ECTS = new int(*obj._ECTS);
		_predmetniProfesor = new Profesor(*obj._predmetniProfesor);

	}


	Predmet& operator = (const Predmet& obj) {
		if (this != &obj) {

			delete[] _naziv;
			delete _ECTS;
			delete _predmetniProfesor;

			_naziv = GetNizKaraktera(obj._naziv);
			_ECTS = new int(*obj._ECTS);
			_predmetniProfesor = new Profesor(*obj._predmetniProfesor);

		}
		return *this;
	}


	~Predmet() {

		delete[] _naziv;
		_naziv = nullptr;
		delete _ECTS;
		_ECTS = nullptr;
		delete _predmetniProfesor;
		_predmetniProfesor = nullptr;

	}

	friend ostream& operator << (ostream& COUT, const Predmet& obj) {
		COUT << obj._naziv << " ["<< *obj._ECTS << "]" << " kojeg predaje "<< *obj._predmetniProfesor << endl;
		return COUT;
	}


};


// IZVEDENA KLASA

class Student : public Osoba { // 1. korak
public:
	char* _brojIndeksa;          // [ ]
	Predmet* _polozeniPredmeti;  // [ ]
	int* _trenutno;              // ( ) 
	int _max;

	Student(const char* indeks = "IB000000", const char* imeprezime = "---", const char* jmbg = "---", int max = 3)
		: Osoba(imeprezime,jmbg) { // 2. korak

		_brojIndeksa = GetNizKaraktera(indeks);

		_trenutno = new int(0);
		_max = max;

		_polozeniPredmeti = new Predmet[_max];

	}

	Student(const Student& obj) : Osoba(obj) { // 3. korak

		_brojIndeksa = GetNizKaraktera(obj._brojIndeksa);

		_trenutno = new int(*obj._trenutno);
		_max = obj._max;

		_polozeniPredmeti = new Predmet[_max];

		for (int i = 0; i < *_trenutno; i++)
		{
			_polozeniPredmeti[i] = obj._polozeniPredmeti[i];
		}

	}

	Student& operator = (const Student& obj) {
		if (this != &obj) {

			delete[] _brojIndeksa;
			delete[] _polozeniPredmeti;
			delete _trenutno;


			Osoba::operator=(obj); // 4. korak


			_brojIndeksa = GetNizKaraktera(obj._brojIndeksa);

			_trenutno = new int(*obj._trenutno);
			_max = obj._max;

			_polozeniPredmeti = new Predmet[_max];

			for (int i = 0; i < *_trenutno; i++)
			{
				_polozeniPredmeti[i] = obj._polozeniPredmeti[i];
			}

		}
		return *this;
	}

	void Info() { // 5. korak

		cout << *this;

	}

	~Student() {

		delete[] _brojIndeksa;
		_brojIndeksa = nullptr;
		delete[] _polozeniPredmeti;
		_polozeniPredmeti = nullptr;
		delete _trenutno;
		_trenutno = nullptr;

	}


	void DodajPredmet(Predmet predmet) {

		if (_max == *_trenutno) {

			cout << "Niz je popunjen" << endl;
			return;

		}


		for (int i = 0; i < *_trenutno; i++)
		{

			if (strcmp( predmet._naziv , _polozeniPredmeti[i]._naziv ) == 0) {

				cout << "Predmet vec postoji" << endl;
				return;

			}

		}


		_polozeniPredmeti[*_trenutno] = predmet;

		(*_trenutno)++;

	}


	friend ostream& operator << (ostream& COUT, const Student& obj) {

		COUT << obj._imePrezime << " ["<<obj._JMBG<<"] - ("<<obj._brojIndeksa<<")"  << endl;
		COUT << "POLOZENI PREDMETI : " << endl << endl;

		for (int i = 0; i < *obj._trenutno; i++)
		{
			COUT << obj._polozeniPredmeti[i];
		}


		return COUT;
	}




};






void main() {



	Profesor profesor1("prof. dr.", "Denis Music", "2131312321");
	Profesor profesor2("prof. dr.", "Elmir Babovic", "2131312321");
	Profesor profesor3("prof.", "Nina Bijedic", "2131312321");


	//Profesor profesorKopija = profesor1;
	//Profesor profesorOperator = profesor1;

	Predmet predmet1("Programiranje II", 7, profesor1);
	Predmet predmet2("Web razvoj i dizajn", 6, profesor2);
	Predmet predmet3("Matematika II", 5, profesor3);

	Student student("IB180079", "Vedad Keskin", "12129981500001", 3);


	student.DodajPredmet(predmet1);
	student.DodajPredmet(predmet2);
	student.DodajPredmet(predmet2);
	student.DodajPredmet(predmet3);
	student.DodajPredmet(predmet3);


	student.Info();


	system("PAUSE>0");
}