#include <iostream>
using namespace std;

// POKAZIVACI : 

// 1. ALOKACIJA ( new ) 

// ---> ( ) --> jedan integner

// ---> [ ] --> vise od jedne vrijednosti 

// 2. DEREFERENCIRANJE (ispis , za kopiranje)

// ---> ( ) --->  _ECTS -> 000002205A2481E0 , *_ECTS -> 0 

// ---> [ ] --->  _naziv --> Nema predmeta

// 3. DEALOCIRANJE / DESKTRUKTOR  --> delete nullptr

// ---> ( ) ---> 		delete _ECTS;

// ---> [ ] --->        delete[] _naziv;



class Predmet {
public:             //      dft      // 
	char* _naziv;  	// Nema predmeta // 
	int _ocjena;	//      5		 //
	int* _ECTS;		//      0		 //


	// dft. constructor

	Predmet() {

		_ocjena = 5;

		_ECTS = new int(0);

		//char tekst1[] = "Nema Predmeta";
		//string tekst2 = "Nema predmeta";
		const char* dftNaziv = "Nema predmeta";

		int vel = strlen(dftNaziv) + 1; // 14 

		_naziv = new char[vel]; // na pocetku je taj niz prazan 

		// 1. gdje hocete da pohranite nesto 
		// 2. koliko ce karaktera biti prekopirano 
		// 3. sta zelimo da pohranimo
		strcpy_s(_naziv, vel, dftNaziv); 


	}


	// user-def constr. , standardni/obicni constr.

	//	Predmet predmet1("Programiranje II", 9, 7);
	Predmet(const char* naziv, int ocjena, int ects) {

		_ocjena = ocjena;

		_ECTS = new int(ects);


		int vel = strlen(naziv) + 1;

		_naziv = new char[vel];

		strcpy_s(_naziv, vel, naziv); // 1. gdje, 2. koliko, 3. sta


	}

	// copy constr. 

	// 	Predmet predmetKopija(predmet1);

	// bez & -> pravimo kopiju ali isto tako pravimo i duplu memoriju
	// sa & -> saljemo original ali se taj original moze mijenjati
	// const -> osigurava da se nesto ne smije mijenjati 

	Predmet(const Predmet& predmet) { // salje originalni predmet

		_ocjena = predmet._ocjena;

		_ECTS = new int(*predmet._ECTS);

		int vel = strlen(predmet._naziv) + 1;

		_naziv = new char[vel];

		strcpy_s(_naziv, vel, predmet._naziv);

	}

	//	predmet5 = predmet1; // <-- operator dodjele

	Predmet& operator = (const Predmet& predmet) {

		if (this != &predmet) {


			delete _ECTS;
			delete[] _naziv;


			_ocjena = predmet._ocjena;

			_ECTS = new int(*predmet._ECTS);

			int vel = strlen(predmet._naziv) + 1;

			_naziv = new char[vel];

			strcpy_s(_naziv, vel, predmet._naziv);

		}


		return *this;
	}





	// TILDA -> alt gr + 1
	~Predmet() {

		cout << "POZVAO SE DESTRUKTOR" << endl;

		delete _ECTS;
		_ECTS = nullptr;

		delete[] _naziv;
		_naziv = nullptr;


	}



	void Ispis() {

		cout << "Naziv predmeta: " << _naziv << endl;
		cout << "Ocjena predmeta: " << _ocjena << endl;
		cout << "ECTS predmeta: " << *_ECTS << endl;

		cout << endl << "====================" << endl <<endl;

	}





};





class Student {
	char* _imePrezime;
	Predmet* _polozeni;
	int _trenutno;
	int _max;
public:
	//Kreirati i implementirati
	//1. Defaultni konstruktor
	//2. Konstruktor koji prima parametre
	//3. Konstruktor kopije
	//4. Operator dodjele
	//5. Destruktor
	//6. Ispis ili COUT 
	//7. Potrebne funkcije



	void AddPolozeniPredmet(Predmet predmet) {
		//Dodaje novi polozeni predmet u niz
		//Voditi računa da se ne moze dodavati isti predmet (istog naziva)

	}

	void Ispis() {

	}
};



void main() {

	//Predmet predmet0;  // <--- dft constr.
	//predmet0.Ispis();  // <--- poziv ispisa

	//Predmet predmet2("Matematika II", 6, 5); // <--- usr. def constr.
	//Predmet predmet3("Web razvoj i dizajn", 7, 5); // <--- usr. def constr.
	//predmet2.Ispis();
	//predmet3.Ispis();

	Predmet predmet1("Programiranje II", 9, 7); // <--- usr. def constr.
	predmet1.Ispis();

	//Predmet predmetKopija = predmet1;  // <-- copy constr. 
	//Predmet predmetKopija(predmet1); // <-- copy constr. 

	//predmetKopija.Ispis();

	Predmet predmetOperatorDodjele;

	predmetOperatorDodjele = predmetOperatorDodjele; // <-- operator dodjele

	predmetOperatorDodjele.Ispis();



	system("pause>0");
}

