#include <iostream>
#include <string>
#include <vector>
#include <regex>
#include <thread>
#include <mutex>
#include <fstream>
#include <memory>



using namespace std;
const char* PORUKA = "\n-------------------------------------------------------------------------------\n"
"0. PROVJERITE DA LI PREUZETI ZADACI PRIPADAJU VASOJ GRUPI (G1/G2)\n"
"1. SVE KLASE TREBAJU POSJEDOVATI ADEKVATAN DESTRUKTOR\n"
"2. NAMJERNO IZOSTAVLJANJE KOMPLETNIH I/ILI POJEDINIH DIJELOVA DESTRUKTORA CE BITI OZNACENO KAO TM\n"
"3. SPASAVAJTE PROJEKAT KAKO BI SE SPRIJECILO GUBLJENJE URADJENOG ZADATKA\n"
"4. ATRIBUTI, NAZIVI METODA (SVE ISTO VAZI I ZA FUNKCIJE), TE BROJ ITIP PARAMETARA MORAJU BITI IDENTICNI "
"ONIMA KOJI SU KORISTENI U TESTNOM CODE - U, OSIM U SLUCAJU DA POSTOJI ADEKVATAN RAZLOG ZA NJIHOVU MODIFIKACIJU. "
"OSTALE POMOCNE METODE MOZETE IMENOVATI I DODAVATI PO ZELJI.\n"
"5. IZUZETAK BACITE SAMO U METODAMA U KOJIMA JE TO NAZNACENO.\n"
"6. SVE METODE POZVANE U MAIN-U ZADATKA TREBAJU POSTOJATI. UKOLIKO NISTE ZADOVOLJNI IMPLEMENTACIJOM "
"POTREBNO JE DA IMPLEMENTIRATE BAREM TIJELO TIH METODA (METODA MOZE BITI PRAZNA), "
"A AKO METODA TREBA VRATITI NEKI PODATAK ONDA MOZETE VRATITI BILO KOJU TJ.ZELJENU VRIJEDNOST ZAHTIJEVANOG TIPA.!\n"
"7. NA KRAJU ISPITA SVOJE RJESENJE KOPIRAJTE U .DOCX FAJL (IMENOVAN BROJEM INDEKSA npr.IB150051.docx)!\n"
"8. RJESENJA ZADATKA POSTAVITE NA FTP SERVER U ODGOVARAJUCI FOLDER!\n"
"9. NEMOJTE POSTAVLJATI VISUAL STUDIO PROJEKTE, VEC SAMO .DOCX FAJL SA VASIM RJESENJEM!\n"
"10.SVE NEDOZVOLJENE RADNJE TOKOM ISPITA CE BITI SANKCIONISANE!\n"
"11.ZA POTREBE TESTIRANJA, U MAIN-U, BUDITE SLOBODNI DODATI TESTNIH PODATAKA(POZIVA METODA) KOLIKO GOD SMATRATE DA JE POTREBNO!\n"
"12.ZA IZRADU ISPITNOG RJESENJA KORISTITI VISUAL STUDIO 2022 I RJESENJE TESTIRAJTE U OBA MODA(F5 i Ctrl + F5)!\n"
"13.NA KRAJU ISPITA PROVJERITE DA LI STE RJEÃ… ENJE KOPIRALI U ADEKVATAN FOLDER NA FTP SERVERU\n"
"-------------------------------------------------------------------------------\n";
const char* crt = "\n-------------------------------------------\n";
enum Drzava {
	ENGLESKA, SPANIJA, HOLANDIJA, FRANCUSKA, BOSNA_I_HERCEGOVINA
};

ostream& operator << (ostream& COUT, const Drzava& obj) {

	const char* KopijeDrzava[] {
		"ENGLESKA", "SPANIJA", "HOLANDIJA", "FRANCUSKA", "BOSNA_I_HERCEGOVINA"
	};

	COUT << KopijeDrzava[obj];

	return COUT;
}



char* GetNizKaraktera(const char* sadrzaj, bool dealociraj = false) {
	if (sadrzaj == nullptr)return nullptr;
	int vel = strlen(sadrzaj) + 1;
	char* temp = new char[vel];
	strcpy_s(temp, vel, sadrzaj);
	if (dealociraj)
		delete[]sadrzaj;
	return temp;
}

/*
Globalna funkcija GenerisiID vraca ID igraca na osnovu vrijednosti
proslijedjenih parametara. Funkcija generise
 ID sa maksimalno 4 cifre, ne racunajuci inicijale tj. prva slova
imena i prezimena.
 Podrazumijeva se da ce uvijek biti proslijedjene validne
vrijednosti parametara. Ukoliko se proslijede
 mala pocetna slova imena ili prezimena, potrebno ih je
konvertovati u velika.
 U okviru generisanog ID-a, proslijedjena cjelobrojna vrijednost
treba biti u obrnutom redoslijedu cifara.
 */
 //cout << GenerisiID("Denis Music", 3) << endl;      //treba vratiti D000M3
 //cout << GenerisiID("Jasmin Azemovic", 14) << endl; //treba vratiti J00A41
 //cout << GenerisiID("Goran Skondric", 156) << endl; //treba vratiti G0S651
 //cout << GenerisiID("emina junuz", 1798) << endl;   //treba vratiti EJ8971

int ReverseNum(int id) { // 5

	int temp = 0;

	while (id != 0)
	{
		temp *= 10;
		temp += id % 10; 
		id /= 10;
	}

	return temp;
}

char FirstLetterOfSurname(const char* imeprezime) {

	for (int i = 0; i < strlen(imeprezime); i++)
	{
		if (isspace(imeprezime[i])) {
			return imeprezime[i + 1];
		}
	}
}

char* GenerisiID(const char* imeprezime, int id) {

	// ako ne znas uraditi func. 

	//char result[30];

	//sprintf_s(result, "%s%d", imeprezime, id); // c - char , s - string d - decimal

	//return GetNizKaraktera(result);


	char FirstLetterN = toupper(imeprezime[0]);
	char FirstLetterS = toupper(FirstLetterOfSurname(imeprezime));
	int reverseNumber = ReverseNum(id);

	const char* zeros;

	if (id < 10) {
		zeros = "000";
	}
	else if (id < 100) {

		zeros = "00";
	}
	else if (id < 1000) {

		zeros = "0";
	}
	else {
		zeros = "";
	}

	char result[10];

	sprintf_s(result, "%c%s%c%d", FirstLetterN, zeros, FirstLetterS, reverseNumber); // c - char , s - string d - decimal

	return GetNizKaraktera(result);


}

/*
Globalna funkcija GenerisiID vraca ID igraca (format: ID#00-ID) na
osnovu int vrijednosti proslijedjene
 kao parametar. Funkcija generise ID sa maksimalno 4 cifre, ne
racunajuci ostale, podrazumijevane, znakove.
 Podrazumijeva se da ce uvijek biti proslijedjena validna int
vrijednost.
 */
 //cout << GenerisiID(3) << endl;//treba vratiti ID#000-3
 //cout << GenerisiID(14) << endl;//treba vratiti ID#00-14
 //cout << GenerisiID(156) << endl;//treba vratiti ID#0-156
 //cout << GenerisiID(1798) << endl;//treba vratiti ID#1798

	 //Za validaciju ID-a koristiti funkciju ValidirajID koja treba, koristeci regex, osigurati postivanje osnovnih pravila
	 //vezanih za format koja su definisana u prethodnom dijelu zadatka.

//char* GenerisiID(int id) {
//
//	char temp[10];
//
//	if (id < 10) { // ID#000-3
//
//		sprintf_s(temp, "ID#000-%d", id); // %d - decimal , %s - string , %c - char
//
//	}
//	else if (id < 100) { // ID#00-14
//
//		sprintf_s(temp, "ID#00-%d", id); // %d - decimal , %s - string , %c - char
//
//	}
//	else if (id < 1000) { // ID#0-156
//
//		sprintf_s(temp, "ID#0-%d", id); // %d - decimal , %s - string , %c - char
//
//	}
//	else { // ID#1798
//
//		sprintf_s(temp, "ID#%d", id); // %d - decimal , %s - string , %c - char
//
//	}
//
//	return GetNizKaraktera(temp);
//
//}

 //cout << GenerisiID("Denis Music", 3) << endl;      //treba vratiti D 000 M3
 //cout << GenerisiID("Jasmin Azemovic", 14) << endl; //treba vratiti J 00 A41
 //cout << GenerisiID("Goran Skondric", 156) << endl; //treba vratiti G 0 S651
 //cout << GenerisiID("emina junuz", 1798) << endl;   //treba vratiti E J 8971

bool ValidirajID(const char* ID) {

	regex reg("[A-Z](000[A-Z][1-9]|00[A-Z][0-9][1-9]|0[A-Z][0-9]{2}[1-9]|[A-Z][0-9]{3}[1-9])");

	return regex_match(ID, reg);

}

//cout << GenerisiID(3) << endl;//treba vratiti ID#000-3
//cout << GenerisiID(14) << endl;//treba vratiti ID#00-14
//cout << GenerisiID(156) << endl;//treba vratiti ID#0-156
//cout << GenerisiID(1798) << endl;//treba vratiti ID#1798

//Za validaciju ID-a koristiti funkciju ValidirajID koja treba, koristeci regex, osigurati postivanje osnovnih pravila
//vezanih za format koja su definisana u prethodnom dijelu zadatka.

//bool ValidirajID(const char* ID) {
//
//	regex reg("(ID#)(000-[1-9]|00-[1-9][0-9]|0-[1-9][0-9]{2}|[1-9][0-9]{3})");
//
//	return regex_match(ID, reg);
//
//}



template<class T1, class T2, int max>
class Kolekcija {
	T1 _elementi1[max];
	T2 _elementi2[max];
	int* _trenutno;
public:



	Kolekcija() {

		_trenutno = new int(0);

	}

	// STATICKI NIZ T1 _elementi1[max];


	Kolekcija(const Kolekcija& obj) {

		_trenutno = new int(*obj._trenutno);

		for (int i = 0; i < *_trenutno; i++)
		{
			_elementi1[i] = obj._elementi1[i];
			_elementi2[i] = obj._elementi2[i];
		}

	}

	// niz pokazivaca T1* _elementi1[max];


	//Kolekcija(const Kolekcija& obj) {

	//	_trenutno = new int(*obj._trenutno);

	//	for (int i = 0; i < *_trenutno; i++)
	//	{
	//		_elementi1[i] = new T1(*obj._elementi1[i]);
	//		_elementi2[i] = new T2(*obj._elementi2[i]);
	//	}

	//}

	//// pok na niz T1* _elementi1;

	//Kolekcija(const Kolekcija& obj) {

	//	_trenutno = new int(*obj._trenutno);

	//	_elementi1 = new T1[*_trenutno];
	//	_elementi2 = new T2[*_trenutno];

	//	for (int i = 0; i < *_trenutno; i++)
	//	{
	//		_elementi1[i] = obj._elementi1[i];
	//		_elementi2[i] = obj._elementi2[i];
	//	}

	//}


	Kolekcija& operator = (const Kolekcija& obj) {
		if (this != &obj) {

			delete _trenutno;

			_trenutno = new int(*obj._trenutno);

			for (int i = 0; i < *_trenutno; i++)
			{
				_elementi1[i] = obj._elementi1[i];
				_elementi2[i] = obj._elementi2[i];
			}
		}
		return *this;
	}

	// STATICKI NIZ T1 _elementi1[max];

	void AddElement(T1 el1, T2 el2) {

		//if (max == *_trenutno) {
		//	throw exception("Niz je popunjen");
		//}

		//for (int i = 0; i < *_trenutno; i++)
		//{
		//	if (el1 == _elementi1[i] || el2 == _elementi2[i]) {
		//		throw exception("Dupliranje nije dozvoljeno");
		//	}
		//}

		_elementi1[*_trenutno] = el1;
		_elementi2[*_trenutno] = el2;

		(*_trenutno)++;

	}

	// niz pokazivaca T1* _elementi1[max];

	//void AddElement(T1 el1, T2 el2) {

	//	if (max == *_trenutno) {
	//		throw exception("Niz je popunjen");
	//	}

	//	for (int i = 0; i < *_trenutno; i++)
	//	{
	//		if (el1 == *_elementi1[i] || el2 == *_elementi2[i]) {
	//			throw exception("Dupliranje nije dozvoljeno");
	//		}
	//	}

	//	_elementi1[*_trenutno] = new T1(el1);
	//	_elementi2[*_trenutno] = new T2(el2);

	//	(*_trenutno)++;

	//}

	////// pok na niz T1* _elementi1;

	//void AddElement(T1 el1, T2 el2) {

	//	for (int i = 0; i < *_trenutno; i++)
	//	{
	//		if (el1 == _elementi1[i] || el2 == _elementi2[i]) {
	//			throw exception("Dupliranje nije dozvoljeno");
	//		}
	//	}

	//	T1* temp1 = _elementi1;
	//	T2* temp2 = _elementi2;

	//	_elementi1 = new T1[*_trenutno + 1];
	//	_elementi2 = new T2[*_trenutno + 1];

	//	for (int i = 0; i < *_trenutno; i++)
	//	{
	//		_elementi1[i] = temp1[i];
	//		_elementi2[i] = temp2[i];
	//	}

	//	_elementi1[*_trenutno] = el1;
	//	_elementi2[*_trenutno] = el2;

	//	(*_trenutno)++;


	//}

	// STATICKI NIZ T1 _elementi1[max];

	~Kolekcija() {
		delete _trenutno; _trenutno = nullptr;
	}

	// niz pokazivaca T1* _elementi1[max];

	//~Kolekcija() {

	//	for (int i = 0; i < *_trenutno; i++)
	//	{
	//		delete _elementi1[i];
	//		_elementi1[i] = nullptr;
	//		delete _elementi2[i];
	//		_elementi2[i] = nullptr;
	//	}

	//	delete _trenutno; _trenutno = nullptr;
	//}


	//// pok na niz T1* _elementi1;

	//~Kolekcija() {

	//	delete[] _elementi1;
	//	_elementi1 = nullptr;
	//	delete[] _elementi2;
	//	_elementi2 = nullptr;

	//	delete _trenutno; _trenutno = nullptr;
	//}

		///* metoda InsertAt treba da doda vrijednosti prvog i drugog
 //  parametra na lokaciju koja je definisana trecim parametrom. Povratna
 //  vrijednost metode
	//je objekat (pozivaoc metode, u konkretnom slucaju objekat
 //  kolekcija1) u okviru koga su, na definisanu lokaciju, dodati
 //  zahtijevani parametri.
	//Nakon izvrsenja metode InsertAt, oba objekta, kolekcija1 i
 //  kolekcija2, bi trebali posjedovati sljedeci sadrzaj:
	//10 10
	//0 0
	//1 1
	//2 2
	//* ....
	//*/

	Kolekcija<int, int, 10> InsertAt(T1 el1, T2 el2, int lokacija) {

		Kolekcija<int, int, 10> kolekcija2;

		for (int i = 0; i < *_trenutno; i++) // 0 1 2 3 ..
		{
			if (i == lokacija) {
				kolekcija2.AddElement(el1, el2);
			}
			kolekcija2.AddElement(_elementi1[i], _elementi2[i]);
		}

		*this = kolekcija2;

		return kolekcija2;

	}

	///*Metoda RemoveRange prihvata lokacija OD i DO, te u tom opsegu
//  uklanja sve elemente iz kolekcije. U slucaju da zahtijevani opseg ne
//  postoji u kolekciji
   //metoda treba baciti izuzetak. Na kraju, metoda treba da vrati
//  pokazivac na novi objekat tipa kolekcija koji sadrzi samo uklonjene
//  elemente*/

//  // Not the professor here, ovdje ne treba vratiti pokazivac, 
//  // to je izgleda greska tokom pravljenja postavke za ispit ostala
	///*kolekcija3 bi trebala sadrzavati sljedece elemente:
	//0 0
	//1 1
	//2 2
	//dok bi kolekcija1 trebala sadrzavati sljedece elemente:
	//10 10
	//3 3
	//4 4
	//......
	//*/
	//                                          1                3
	Kolekcija<int, int, 10>* RemoveRange(int lokacijaOd, int lokacijaDo) {

		Kolekcija<int, int, 10>* kolekcija3 = new Kolekcija<int, int, 10>();

		Kolekcija<int, int, 10> kolekcija1;


		for (int i = 0; i < *_trenutno; i++)
		{
			if (i >= lokacijaOd && i <= lokacijaDo) {

				kolekcija3->AddElement(_elementi1[i], _elementi2[i]);

			}
			else {

				kolekcija1.AddElement(_elementi1[i], _elementi2[i]);

			}
		}

		*this = kolekcija1;


		return kolekcija3;



	}


	T1& getElement1(int lokacija) { return _elementi1[lokacija]; }
	T2& getElement2(int lokacija) { return _elementi2[lokacija]; }
	int getTrenutno() const { return *_trenutno; }


	friend ostream& operator<< (ostream& COUT, Kolekcija& obj) {
		for (size_t i = 0; i < *obj._trenutno; i++)
			COUT << obj.getElement1(i) << " " << obj.getElement2(i) << endl;
		return COUT;
	}
};


class Vrijeme { // Datum 95% , Vrijeme 5% 
	int* _sat, * _minuta, * _sekunda;
public:
	Vrijeme(int sat = 10, int minuta = 0, int sekunda = 0) {
		_sat = new int(sat);
		_minuta = new int(minuta);
		_sekunda = new int(sekunda);
	}

	Vrijeme(const Vrijeme& obj) {

		_sat = new int(*obj._sat);
		_minuta = new int(*obj._minuta);
		_sekunda = new int(*obj._sekunda);

	}

	Vrijeme& operator = (const Vrijeme& obj) {
		if (this != &obj) {
			delete _sat; 
			delete _minuta;
			delete _sekunda;


			_sat = new int(*obj._sat);
			_minuta = new int(*obj._minuta);
			_sekunda = new int(*obj._sekunda);
		}
		return *this;
	}

	bool operator == (const Vrijeme& obj) {

		return *_sat == *obj._sat && *_minuta == *obj._minuta && *_sekunda == *obj._sekunda;

	}

	int SumaSekundi() {

		return *_sekunda + *_minuta * 60 + *_sat * 3600;

	}

	~Vrijeme() {
		delete _sat; _sat = nullptr;
		delete _minuta; _minuta = nullptr;
		delete _sekunda; _sekunda = nullptr;
	}

	friend ostream& operator<< (ostream& COUT, const Vrijeme& obj) {
		COUT << *obj._sat << ":" << *obj._minuta << ":" << *obj._sekunda;
		return COUT;
	}
};
class Pogodak {
	Vrijeme* _vrijemePogotka;
	char* _napomena;
public:
	Pogodak(Vrijeme vrijeme, const char* napomena) {
		_napomena = GetNizKaraktera(napomena);
		_vrijemePogotka = new Vrijeme(vrijeme);
	}

	Pogodak(const Pogodak& obj) {

		_napomena = GetNizKaraktera(obj._napomena);
		_vrijemePogotka = new Vrijeme(*obj._vrijemePogotka);

	}

	Pogodak& operator = (const Pogodak& obj) {
		if (this != &obj) {
			delete[] _napomena;
			delete _vrijemePogotka;

			_napomena = GetNizKaraktera(obj._napomena);
			_vrijemePogotka = new Vrijeme(*obj._vrijemePogotka);

		}
		return *this;
	}

	bool operator == (const Pogodak& obj) {

		return strcmp(_napomena, obj._napomena) == 0 && *_vrijemePogotka == *obj._vrijemePogotka;

	}

	~Pogodak() {
		delete[] _napomena; _napomena = nullptr;
		delete _vrijemePogotka; _vrijemePogotka = nullptr;
	}

	Vrijeme GetVrijemePogotka() { return *_vrijemePogotka; }
	char* GetNapomena() { return _napomena; }

	friend ostream& operator<< (ostream& COUT, const Pogodak& obj) {
		COUT << *obj._vrijemePogotka << " -> " << obj._napomena;
		return COUT;
	}
};
class Igrac {
	static int _id; // 0 --> 1 --> 2 --> 3 --> 4 ... 
	char* _ID; // za inicijalizaciju _ID-a iskoristiti funkciju GenerisiID tj.atributa _imePrezime(inicijala imena i prezimena) i statickog clana _id
	char* _imePrezime;
	vector<Pogodak*> _pogoci;
public:

	void DodajPogodak(Pogodak pogodak) {

		_pogoci.push_back(new Pogodak(pogodak));

	}


	Igrac(const char* imePrezime) {

		_imePrezime = GetNizKaraktera(imePrezime);

		_id++; // 0 --> 1 ---> 2 

		_ID = GenerisiID(_imePrezime, _id); // Denis Music , 1  --> Jasmin Azemovic , 2 --> Goran Å kondric , 3

	}

	Igrac(const Igrac& obj) {

		_ID = GetNizKaraktera(obj._ID);
		_imePrezime = GetNizKaraktera(obj._imePrezime);

		for (int i = 0; i < obj._pogoci.size(); i++)
		{
			_pogoci.push_back(new Pogodak(*obj._pogoci[i]));
		}

	}


	Igrac& operator = (const Igrac& obj) {
		if (this != &obj) {

			delete[]_ID; 
			delete[]_imePrezime; 
			for (size_t i = 0; i < _pogoci.size(); i++) {
				delete _pogoci[i];
				
			}


			_ID = GetNizKaraktera(obj._ID);
			_imePrezime = GetNizKaraktera(obj._imePrezime);


			for (int i = 0; i < obj._pogoci.size(); i++)
			{
				_pogoci.push_back(new Pogodak(*obj._pogoci[i]));
			}
		}
		return *this;
	}

	bool operator == (const Igrac& obj) {

		return strcmp(_ID, obj._ID) == 0;

	}

	~Igrac() {
		delete[]_ID; _ID = nullptr;
		delete[]_imePrezime; _imePrezime = nullptr;
		for (size_t i = 0; i < _pogoci.size(); i++) {
			delete _pogoci[i];
			_pogoci[i] = nullptr;
		}
	}

	char* GetImePrezime() { return _imePrezime; }
	char* GetID() { return _ID; }
	vector<Pogodak*>& GetPogoci() { return _pogoci; }


	friend ostream& operator<< (ostream& COUT, Igrac& obj) {
		COUT << obj._ID << " -> " << obj._imePrezime;
		for (size_t i = 0; i < obj._pogoci.size(); i++)
			cout << *obj._pogoci[i] << endl;
		return COUT;
	}
};
int Igrac::_id = 0;


//class Reprezentacija {
//	Drzava _drzava;
//	vector<Igrac> _igraci;
//public:
//	Reprezentacija(Drzava drzava = BOSNA_I_HERCEGOVINA) {
//		_drzava = drzava;
//	}
//	Drzava GetDrzava() { return _drzava; }
//	vector<Igrac>& GetIgraci() { return _igraci; }
//};
//class Prventstvo {
//	Kolekcija<Reprezentacija, Reprezentacija, 20> _utakmice;
//public:
//	Kolekcija<Reprezentacija, Reprezentacija, 20>& GetUtakmice() {
//		return _utakmice;
//	}
//};
const char* GetOdgovorNaPrvoPitanje() {
	cout << "Pitanje -> Pojasnite osnovne preduslove koji moraju biti ispunjeni da bi se realizovao polimorfizam(navesti kratki primjer) ? \n";
	return "Odgovor -> OVDJE UNESITE VAS ODGOVOR";
}
const char* GetOdgovorNaDrugoPitanje() {
	cout << "Pitanje -> Pojasnite razloge koristenja kljucnih rijeci abstract i ciste virtualne metode, te razlike izmedju njih ? \n";
	return "Odgovor -> OVDJE UNESITE VAS ODGOVOR";
}
void main() {
	cout << PORUKA;
	cin.get();
	cout << GetOdgovorNaPrvoPitanje() << endl;
	cin.get();
	cout << GetOdgovorNaDrugoPitanje() << endl;
	cin.get();
	/*
	Globalna funkcija GenerisiID vraca ID igraca na osnovu vrijednosti
   proslijedjenih parametara. Funkcija generise
	ID sa maksimalno 4 cifre, ne racunajuci inicijale tj. prva slova
   imena i prezimena.
	Podrazumijeva se da ce uvijek biti proslijedjene validne
   vrijednosti parametara. Ukoliko se proslijede
	mala pocetna slova imena ili prezimena, potrebno ih je
   konvertovati u velika.
	U okviru generisanog ID-a, proslijedjena cjelobrojna vrijednost
   treba biti u obrnutom redoslijedu cifara.
	*/
	cout << GenerisiID("Denis Music", 3) << endl;//treba vratiti D000M3
	cout << GenerisiID("Jasmin Azemovic", 14) << endl;//treba vratiti J00A41
	cout << GenerisiID("Goran Skondric", 156) << endl;//treba vratiti G0S651
	cout << GenerisiID("emina junuz", 1798) << endl;//treba vratiti EJ8971

	////Za validaciju ID-a koristiti funkciju ValidirajID koja treba, koristeci regex, osigurati postivanje osnovnih pravila
	////vezanih za format koja su definisana u prethodnom dijelu zadatka.
	if (ValidirajID("D000M3"))
		cout << "ID VALIDAN" << endl;
	if (ValidirajID("J00A41"))
		cout << "ID VALIDAN" << endl;
	if (!ValidirajID("G00S651"))
		cout << "ID NIJE VALIDAN" << endl;
	if (!ValidirajID("Ej8971"))
		cout << "ID NIJE VALIDAN" << endl;

	int kolekcijaTestSize = 9;
	Kolekcija<int, int, 10> kolekcija1;

	for (int i = 0; i < kolekcijaTestSize; i++)
		kolekcija1.AddElement(i, i);//dodaje vrijednosti u kolekciju

	cout << kolekcija1 << crt;

	///* metoda InsertAt treba da doda vrijednosti prvog i drugog
 //  parametra na lokaciju koja je definisana trecim parametrom. Povratna
 //  vrijednost metode
	//je objekat (pozivaoc metode, u konkretnom slucaju objekat
 //  kolekcija1) u okviru koga su, na definisanu lokaciju, dodati
 //  zahtijevani parametri.
	//Nakon izvrsenja metode InsertAt, oba objekta, kolekcija1 i
 //  kolekcija2, bi trebali posjedovati sljedeci sadrzaj:
	//10 10
	//0 0
	//1 1
	//2 2
	//* ....
	//*/
	Kolekcija<int, int, 10> kolekcija2 = kolekcija1.InsertAt(10, 10, 0);
	cout << kolekcija2 << crt;
	cout << kolekcija1 << crt;
	///*Metoda RemoveRange prihvata lokacija OD i DO, te u tom opsegu
 //  uklanja sve elemente iz kolekcije. U slucaju da zahtijevani opseg ne
 //  postoji u kolekciji
	//metoda treba baciti izuzetak. Na kraju, metoda treba da vrati
 //  pokazivac na novi objekat tipa kolekcija koji sadrzi samo uklonjene
 //  elemente*/

 //  // Not the professor here, ovdje ne treba vratiti pokazivac, 
 //  // to je izgleda greska tokom pravljenja postavke za ispit ostala
	Kolekcija<int, int, 10>* kolekcija3 = kolekcija1.RemoveRange(1, 3);
	cout << *kolekcija3 << endl;
	cout << kolekcija1 << crt;
	///*kolekcija3 bi trebala sadrzavati sljedece elemente:
	//0 0
	//1 1
	//2 2
	//dok bi kolekcija1 trebala sadrzavati sljedece elemente:
	//10 10
	//3 3
	//4 4
	//......
	//*/
	kolekcija1 = *kolekcija3;
	cout << kolekcija1;

	Vrijeme
		prviPogodak201633(20, 16, 33),
		drugiPogodak202319(20, 23, 19),
		treciPogodak205108(20, 51, 8),
		cetvrtiPogodak210654(21, 6, 54);
	
	
	Igrac denis("Denis Music"), jasmin("Jasmin Azemovic"),
		goran("Goran Skondric"), adil("Adil Joldic");


	if (strcmp(denis.GetID(), "D000M1") == 0 && strcmp(jasmin.GetID(), "J000A2") == 0)
		cout << "ID se uspjesno generise!" << endl;

	Pogodak prviPogodak(prviPogodak201633, "podaci o prvom pogotku"),
		drugiPogodak(drugiPogodak202319, "podaci o drugom pogotku"),
		treciPogodak(treciPogodak205108, "podaci o trecem pogotku"),
		cetvrtiPogodak(cetvrtiPogodak210654, "podaci o cetvrtom pogotku");


	//denis.GetPogoci().push_back(new Pogodak(prviPogodak));
	//denis.DodajPogodak(drugiPogodak);

	//Igrac igracKopija = denis;

	//cout << igracKopija << endl;
	//cout << jasmin << endl;
	//cout << goran << endl;
	//cout << adil << endl;

	//Reprezentacija BIH(BOSNA_I_HERCEGOVINA), ENG(ENGLESKA);
	//BIH.AddIgrac(denis);
	//BIH.AddIgrac(jasmin);
	//ENG.AddIgrac(goran);
	//ENG.AddIgrac(adil);
	//try
	//{
	//	BIH.AddIgrac(denis);//onemoguciti dodavanje istih igraca - provjeravati ID
	//}
	//catch (exception& obj)
	//{
	//	cout << obj.what();
	//}
	//Prventstvo euro2024;
	//euro2024.AddUtakmicu(BIH, ENG);
	//try
	//{
	//	euro2024.AddUtakmicu(BIH, ENG);//onemoguciti ponovne susrete drzava tokom istog prvenstva
	//}
	//catch (exception& obj)
	//{
	//	cout << obj.what();
	//}
	////omoguciti dodavanje pogotka po ID-u ili imenu i prezimenu
	//if (euro2024.AddPogodak(BOSNA_I_HERCEGOVINA, ENGLESKA, "D000M1", prviPogodak))
	//	cout << "Pogodak uspjesno dodat" << endl;
	////onemoguciti dodavanje istih pogodaka
	//if (!euro2024.AddPogodak(BOSNA_I_HERCEGOVINA, ENGLESKA, "Denis Music", prviPogodak))
	//	cout << "Pogodak NIJE uspjesno dodat" << endl;
	//if (euro2024.AddPogodak(BOSNA_I_HERCEGOVINA, ENGLESKA, "J000A2", drugiPogodak))
	//	cout << "Pogodak uspjesno dodat" << endl;
	//if (euro2024.AddPogodak(BOSNA_I_HERCEGOVINA, ENGLESKA, "Jasmin Azemovic", treciPogodak))
	//	cout << "Pogodak uspjesno dodat" << endl;
	//if (euro2024.AddPogodak(BOSNA_I_HERCEGOVINA, ENGLESKA, "Goran Skondric", cetvrtiPogodak))
	//	cout << "Pogodak uspjesno dodat" << endl;
	////nakon svakog evidentiranog pogotka, svim igracima te utakmice (pod pretpostavkom da su validne email adrese sa ID - ovima igraca),
	////u zasebnom thread-u, poslati email. u razmaku od 2 sekunde, sa sljedecim sadrzajem :
	///*
	//To: D000M1@euro2024.com
	//From: info@euro2024.com
	//Subject: Informacija
	//Postovani,
	//U 20:35:16 sati igrac Jasmin Azemovic je zabiljezio svoj 1
 //  pogodak na ovoj utakmici.
	//Trenutni rezultat je:
	//BOSNA_I_HERCEGOVINA 2 : 0 ENGLESKA
	//Puno srece u nastavku susreta.
	//Neka bolji tim pobijedi.
	//*/
	////ispisuje detaljnije informacije o susretu, kako je navedeno u narednom ispisu
	//cout << euro2024;
	///*
	//-------------------------------------------
	//(3) BOSNA_I_HERCEGOVINA : ENGLESKA (1)
	//-------------------------------------------
	//Denis Music Goran Skondric
	//Jasmin Azemovic
	//Jasmin Azemovic
	//-------------------------------------------
	//*/
	////vraca sve igrace koji su na takmicenju postigli broj pogodaka koji je veci ili jednak proslijedjenoj vrijednosti
	//vector<Igrac*> igraci = euro2024(2);
	//for (size_t i = 0; i < igraci.size(); i++)
	//	cout << igraci[i]->GetImePrezime() << endl;

	cin.get();
	system("pause>0");
}