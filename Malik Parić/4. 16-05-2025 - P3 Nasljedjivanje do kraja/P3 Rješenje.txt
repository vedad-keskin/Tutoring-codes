#include <iostream>
using namespace std;

char* GetNizKaraktera(const char* tekst) {
	if (tekst == nullptr)
		return nullptr;
	int vel = strlen(tekst) + 1;
	char* novi = new char[vel];
	strcpy_s(novi, vel, tekst);
	return novi;
}

// BAZNA KLASA -> KLASA KOJA SE NASLJEDJUJE

class Osoba {
protected: // 1. razlika
	char* _imePrezime;
	char* _JMBG;
public:


	// 	: Osoba(imeprezime,jmbg)  {
	Osoba(const char* imeprezime = "---", const char* jmbg = "---") {

		_imePrezime = GetNizKaraktera(imeprezime);
		_JMBG = GetNizKaraktera(jmbg);

	}

	Osoba(const Osoba& obj) {

		_imePrezime = GetNizKaraktera(obj._imePrezime);
		_JMBG = GetNizKaraktera(obj._JMBG);

	}

	Osoba& operator = (const Osoba& obj) {
		if (this != &obj) {

			delete[] _imePrezime;
			delete[] _JMBG;


			_imePrezime = GetNizKaraktera(obj._imePrezime);
			_JMBG = GetNizKaraktera(obj._JMBG);

		}
		return *this;
	}

	// VIRTUAL je vrsta koja nam opcionalno daje da promijenimo ovu funckiju u izvedenoj klasi

	virtual void Test() {

		cout << "OVO JE POCETNA VERZIJA FUNKCIJE" << endl;

	}


	// tvoja klasa postaje apstraktna klasa
	// obavezno napraviti Info() u izvedenoj klasi
	virtual void Info() = 0; // pure virtual function --> koja nema implemenatacija
	// 2. razlika



	virtual ~Osoba() { // 3. razlika

		delete[] _imePrezime;
		_imePrezime = nullptr;
		delete[] _JMBG;
		_JMBG = nullptr;

	}

	friend ostream& operator << (ostream& COUT, const Osoba& obj) {

		COUT << obj._imePrezime<<" ["<<obj._JMBG<<"]" << endl;

		return COUT;
	}


};

// IZVEDENA KLASA -> KLASA KOJA NASLIJEDI BAZNU KLASU 

class Profesor : public Osoba { // 1. korak
public:
	char* _titula;

	// Profesor profesor1("dr. sc.", "Denis Music", "1231242145");
	Profesor(const char* titula = "prof.", const char* imeprezime = "---", const char* jmbg = "---") 
		: Osoba(imeprezime,jmbg)  { // 2. korak spojiti user-def Osobe sa user-def cosntr. Profesor

		_titula = GetNizKaraktera(titula);

	}

	Profesor(const Profesor& obj) : Osoba(obj) { // 3. korak

		_titula = GetNizKaraktera(obj._titula);

	}

	Profesor& operator = (const Profesor& obj) {
		if (this != &obj) {

			delete[] _titula;


			Osoba::operator=(obj); // 4. korak
 

			_titula = GetNizKaraktera(obj._titula);

		}
		return *this;
	}


	//void Test() {

	//	cout << "OVO JE FINALNA VERZIJA FUNKCIJE" << endl;


	//}

	void Info() { // 5. korak

		cout << *this;

	}

	~Profesor() {

		delete[] _titula;
		_titula = nullptr;

	}

	friend ostream& operator << (ostream& COUT, const Profesor& obj) {

		// 1. NACIN --> NA ISPITU
		COUT << obj._titula << " " << obj._imePrezime << " [" << obj._JMBG << "]" << endl;

		// 2. NACIN
		//COUT << obj._titula << " ";
		//COUT << Osoba(obj);


		return COUT;
	}


};


class Predmet {
public:
	char* _naziv;
	int* _ECTS;
	Profesor* _predmetniProfesor; // ( ) 

	Predmet(const char* naziv = "---", int ects = 0, Profesor profesor = Profesor() ) {

		_naziv = GetNizKaraktera(naziv);
		_ECTS = new int(ects);
		_predmetniProfesor = new Profesor(profesor);

	}

	Predmet(const Predmet& obj) {

		_naziv = GetNizKaraktera(obj._naziv);
		_ECTS = new int(*obj._ECTS);
		_predmetniProfesor = new Profesor(*obj._predmetniProfesor);

	}

	Predmet& operator = (const Predmet& obj) {
		if (this != &obj) {

			delete[] _naziv;
			delete _ECTS;
			delete _predmetniProfesor;

			_naziv = GetNizKaraktera(obj._naziv);
			_ECTS = new int(*obj._ECTS);
			_predmetniProfesor = new Profesor(*obj._predmetniProfesor);

		}
		return *this;
	}

	~Predmet() {

		delete[] _naziv;
		_naziv = nullptr;
		delete _ECTS;
		_ECTS = nullptr;
		delete _predmetniProfesor;
		_predmetniProfesor = nullptr;

	}

	friend ostream& operator << (ostream& COUT, const Predmet& obj) {
		COUT << obj._naziv << " ["<< *obj._ECTS << "] kojeg predaje "<< *obj._predmetniProfesor  << endl;
		return COUT;
	}


};


class Student : public Osoba { // 1. korak
public:
	char* _brojIndeksa;
	Predmet* _polozeniPredmeti;
	int* _trenutno;
	int _max;

	Student(const char* index = "IB00000", const char* imeprezime = "---", const char* jmbg = "---", int max = 3) 
		: Osoba(imeprezime,jmbg) { // 2. korak

		_brojIndeksa = GetNizKaraktera(index);

		_trenutno = new int(0);
		_max = max;

		_polozeniPredmeti = new Predmet[_max];

	}

	Student(const Student& obj) : Osoba(obj) { // 3. korak

		_brojIndeksa = GetNizKaraktera(obj._brojIndeksa);

		_trenutno = new int(*obj._trenutno);
		_max = obj._max;

		_polozeniPredmeti = new Predmet[_max];

		for (int i = 0; i < *_trenutno; i++)
		{
			_polozeniPredmeti[i] = obj._polozeniPredmeti[i];
		}

	}

	Student& operator = (const Student& obj) {
		if (this != &obj) {

			delete[] _polozeniPredmeti;
			delete[] _brojIndeksa;
			delete _trenutno;

			Osoba::operator=(obj); // 4. korak

			_brojIndeksa = GetNizKaraktera(obj._brojIndeksa);

			_trenutno = new int(*obj._trenutno);
			_max = obj._max;

			_polozeniPredmeti = new Predmet[_max];

			for (int i = 0; i < *_trenutno; i++)
			{
				_polozeniPredmeti[i] = obj._polozeniPredmeti[i];
			}

		}
		return *this;
	}

	bool DodajPredmet(Predmet predmet) {

		if (_max == *_trenutno) {
			cout << "Niz je popunjen" << endl;
			return false;
		}

		for (int i = 0; i < *_trenutno; i++)
		{
			if (strcmp(_polozeniPredmeti[i]._naziv, predmet._naziv) == 0) {
				cout << "Predmet je vec dodan" << endl;
				return false;
			}
		}

		_polozeniPredmeti[*_trenutno] = predmet;

		(*_trenutno)++;

		return true;

	}

	~Student() {

		delete[] _polozeniPredmeti;
		_polozeniPredmeti = nullptr;
		delete[] _brojIndeksa;
		_brojIndeksa = nullptr;
		delete _trenutno;
		_trenutno = nullptr;

	}

	void Info() { // 5. korak

		cout << *this;

	}

	friend ostream& operator << (ostream& COUT, const Student& obj) {
		COUT << obj._imePrezime << " ["<<obj._JMBG<<"], broja indeksa "<<obj._brojIndeksa << endl;

		COUT << "Polozeni predmeti studenta : " << endl << endl;

		for (int i = 0; i < *obj._trenutno; i++)
		{
			COUT << obj._polozeniPredmeti[i] ;
			COUT  << "==================" << endl<<endl;
		}

		return COUT;
	}


};







void main() {


	Profesor profesor1("dr. sc.", "Denis Music", "1231242145");
	Profesor profesor2("dr. sc.", "Elmir Babovic", "1231242145");
	Profesor profesor3("prof. dr.", "Nina Bijedic", "1231242145");

	Predmet predmet1("Programiranje II", 7, profesor1);
	Predmet predmet2("Informacijska sigurnost", 5, profesor2);
	Predmet predmet3("Matematika II", 4, profesor3);

	Student student("IB180079", "Vedad Keskin", "1212998150001", 3);

	student.DodajPredmet(predmet1);
	student.DodajPredmet(predmet2);
	student.DodajPredmet(predmet2);
	student.DodajPredmet(predmet3);
	student.DodajPredmet(predmet3);

	cout << student;



	//profesor1.Test();
	//cout << profesor1;
	//profesor1.Info();


	// SPECIJALNI SLUCAJ KOJI NE POZIVA IZVEDENI DESTRUKTOR 

	//Osoba* osoba = new Profesor("dr. sc.", "Denis Music", "1231242145");
	//delete osoba;


	//Profesor profesorKopija = profesor1;

	//Profesor profesorOperatorDodjele;
	//profesorOperatorDodjele = profesor1;


	//cout << profesorOperatorDodjele;



	system("pause>0");
}

