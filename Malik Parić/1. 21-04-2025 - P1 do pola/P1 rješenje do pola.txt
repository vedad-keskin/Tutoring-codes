#include <iostream>
using namespace std;

// POKAZIVACI 

// 1. ALOKACIJA --> new 

// ( ) --> znaci da kreiramo jednu vrijednost

// [ ] --> znaci da nam treba vise od jedne vrijednosti

// 2. DEREFERENCIRANJE ---> ispis i kopiranje

// ( ) ---> moramo dodati *_ECTS = 0 , _ECTS = 0000019F57097DD0

// [ ] ---> ne dodajemo * ispred _naziv

// 3. DESTRUKTOR ILI DEALOCIRANJE --> delete nullptr

// ( ) ---> delete _ECTS

// [ ] ---> delete[] _naziv;

class Predmet {
public:			  // dft. constr.  //
	char* _naziv; // Nema predmeta //
	int _ocjena;  //     5		   //
	int* _ECTS;	  //     0		   //


	// dft. constr.

	Predmet() {

		_ocjena = 5;

		_ECTS = new int(0);

		//char dftNaziv1[] = "Nema predmeta";
		const char* dftNaziv2 = "Nema predmeta";

		int vel = strlen(dftNaziv2) + 1; // 14

		_naziv = new char[vel];

		strcpy_s(_naziv, vel, dftNaziv2); // 1. gdje pohranjujemo, 2. koliko slova kopriramo, 3. sta pohranjujemo


	}

	// Predmet predmet1("Programiranje II", 9, 7); // <--- user-def. constr.

	Predmet(const char* naziv, int ocjena, int ects ) {

		_ocjena = ocjena;

		_ECTS = new int(ects);

		int vel = strlen(naziv) + 1;

		_naziv = new char[vel];

		strcpy_s(_naziv, vel, naziv); // gdje koliko sta


	}

	//Predmet predmetKopija2(predmet1);	 // copy constr.

	// & <--- original
	// const <--- konstantno i ne moze se mijenjati

	Predmet(const Predmet& predmet) { // kopija predmeta

		_ocjena = predmet._ocjena;

		_ECTS = new int(*predmet._ECTS);

		int vel = strlen(predmet._naziv) + 1;

		_naziv = new char[vel];

		strcpy_s(_naziv, vel, predmet._naziv);


	}

	// predmetOperatorDodjele = predmet1; // <--- operator dodjele
	
	Predmet& operator = (const Predmet& predmet) {

		if (this != &predmet) {

			delete _ECTS;
			delete[] _naziv;


			_ocjena = predmet._ocjena;

			_ECTS = new int(*predmet._ECTS);

			int vel = strlen(predmet._naziv) + 1;

			_naziv = new char[vel];

			strcpy_s(_naziv, vel, predmet._naziv);
		}

		return *this;

	}






	// TILDA -> alt gr + 1

	~Predmet() {

		cout << "POZVAO SE DESTRUKTOR" << endl;

		delete _ECTS;
		_ECTS = nullptr;

		delete[] _naziv;
		_naziv = nullptr;

	}


	void Ispis() {

		cout << "Naziv predmeta : " << _naziv << endl; // ctrl + d
		cout << "Ocjena predmeta : " << _ocjena << endl;
		cout << "ECTS predmeta : " << *_ECTS << endl;
		

	}



};


class Student {
	char* _imePrezime;
	Predmet* _polozeni;
	int _trenutno;
	int _max;
public:
	// Kreirati i implementirati
	// 1. Defaultni konstruktor
	// 2. Konstruktor koji prima parametre
	// 3. Konstruktor kopije
	// 4. Operator dodjele
	// 5. Destruktor
	// 6. Ispis ili COUT 
	// 7. Potrebne funkcije



	void AddPolozeniPredmet(Predmet predmet) {
		// Dodaje novi polozeni predmet u niz
		// Voditi ra훾una da se ne mo탑e prekora훾iti kapacitet niza
		// Voditi ra훾una da se ne moze dodavati isti predmet (istog naziva)		        


	}

};



void main() {


	Predmet predmet0; // <--- dft. constr.

	Predmet predmet1("Programiranje II", 9, 7); // <--- user-def. constr.
	Predmet predmet2("Matematika II", 6, 4); // <--- user-def. constr.
	Predmet predmet3("Web razvoj i dizajn", 7, 5); // <--- user-def. constr.

	Predmet predmetKopija = predmet1;    // copy constr.
	//Predmet predmetKopija2(predmet1);	 // copy constr.


	Predmet predmetOperatorDodjele; // <--- dft. constr.

	predmetOperatorDodjele = predmet1; // <--- operator dodjele



	//predmet0.Ispis(); 
	//predmet1.Ispis();
	//predmet2.Ispis();
	//predmet3.Ispis();
	predmetOperatorDodjele.Ispis();



	system("pause>0");
}

