#include <iostream>
using namespace std;

// POKAZIVACI 

// 1. ALOKACIJA --> new 

// ( ) --> znaci da kreiramo jednu vrijednost

// [ ] --> znaci da nam treba vise od jedne vrijednosti

// 2. DEREFERENCIRANJE ---> ispis i kopiranje

// ( ) ---> moramo dodati *_ECTS = 0 , _ECTS = 0000019F57097DD0

// [ ] ---> ne dodajemo * ispred _naziv

// 3. DESTRUKTOR ILI DEALOCIRANJE --> delete nullptr

// ( ) ---> delete _ECTS

// [ ] ---> delete[] _naziv;

class Predmet {
public:			  // dft. constr.  //
	char* _naziv; // Nema predmeta //
	int _ocjena;  //     5		   //
	int* _ECTS;	  //     0		   //


	// dft. constr.

	Predmet() {

		_ocjena = 5;

		_ECTS = new int(0);

		//char dftNaziv1[] = "Nema predmeta";
		const char* dftNaziv2 = "Nema predmeta";

		int vel = strlen(dftNaziv2) + 1; // 14

		_naziv = new char[vel];

		strcpy_s(_naziv, vel, dftNaziv2); // 1. gdje pohranjujemo, 2. koliko slova kopriramo, 3. sta pohranjujemo


	}

	// Predmet predmet1("Programiranje II", 9, 7); // <--- user-def. constr.

	Predmet(const char* naziv, int ocjena, int ects) {

		_ocjena = ocjena;

		_ECTS = new int(ects);

		int vel = strlen(naziv) + 1;

		_naziv = new char[vel];

		strcpy_s(_naziv, vel, naziv); // gdje koliko sta


	}

	//Predmet predmetKopija2(predmet1);	 // copy constr.

	// & <--- original
	// const <--- konstantno i ne moze se mijenjati

	Predmet(const Predmet& predmet) { // kopija predmeta

		_ocjena = predmet._ocjena;

		_ECTS = new int(*predmet._ECTS);

		int vel = strlen(predmet._naziv) + 1;

		_naziv = new char[vel];

		strcpy_s(_naziv, vel, predmet._naziv);


	}

	// predmetOperatorDodjele = predmet1; // <--- operator dodjele

	Predmet& operator = (const Predmet& predmet) {

		if (this != &predmet) {

			delete _ECTS;
			delete[] _naziv;


			_ocjena = predmet._ocjena;

			_ECTS = new int(*predmet._ECTS);

			int vel = strlen(predmet._naziv) + 1;

			_naziv = new char[vel];

			strcpy_s(_naziv, vel, predmet._naziv);
		}

		return *this;

	}






	// TILDA -> alt gr + 1

	~Predmet() {


		delete _ECTS;
		_ECTS = nullptr;

		delete[] _naziv;
		_naziv = nullptr;

	}


	void Ispis() {

		cout << "Naziv predmeta : " << _naziv << endl; // ctrl + d
		cout << "Ocjena predmeta : " << _ocjena << endl;
		cout << "ECTS predmeta : " << *_ECTS << endl;


	}



};


class Student {
	char* _imePrezime;  // [ ]

	Predmet* _polozeni; // ( ) ili [ ]  
	int _trenutno;      // koliko trenutno ima elemenata u nizu
	int _max;           // koliko maximalno moze biti elemenata u nizu
public:


	Student() {

		const char* dftNaziv = "Nema imena i prezimena";
		int vel = strlen(dftNaziv) + 1;
		_imePrezime = new char[vel];
		strcpy_s(_imePrezime, vel, dftNaziv);
        
		_trenutno = 0;
		_max = 3;

		_polozeni = new Predmet[_max];


	}

	Student(const char* imeprezime, int max) {

		int vel = strlen(imeprezime) + 1;
		_imePrezime = new char[vel];
		strcpy_s(_imePrezime, vel, imeprezime);

		_trenutno = 0;

		_max = max;

		_polozeni = new Predmet[_max];

	}

	Student(const Student& student) {

		int vel = strlen(student._imePrezime) + 1;
		_imePrezime = new char[vel];
		strcpy_s(_imePrezime, vel, student._imePrezime);

		_trenutno = student._trenutno;
		_max = student._max;

		_polozeni = new Predmet[_max];

		for (int i = 0; i < _trenutno; i++)
		{
			_polozeni[i] = student._polozeni[i];
		}


	}

	// 	studentOperatorDodjele = student;

	Student& operator = (const Student& student) {

		if (this != &student) {


			delete[] _imePrezime;
			delete[] _polozeni;


			int vel = strlen(student._imePrezime) + 1;
			_imePrezime = new char[vel];
			strcpy_s(_imePrezime, vel, student._imePrezime);

			_trenutno = student._trenutno;
			_max = student._max;

			_polozeni = new Predmet[_max];

			for (int i = 0; i < _trenutno; i++)
			{
				_polozeni[i] = student._polozeni[i];
			}
		}

		return *this;

	}


	~Student() {

		delete[] _imePrezime;
		_imePrezime = nullptr;
		delete[] _polozeni;
		_polozeni = nullptr;

	}

	void Ispis() {

		cout << "Ime i prezime : " << _imePrezime << endl;

		cout << "POLOZENI PREDMETI STUDENTA :" << endl << endl;


		for (int i = 0; i < _trenutno; i++) // 0 1 2
		{
			_polozeni[i].Ispis(); // pol[0] , pol[1] , pol[2]
			cout << endl;
		}


	}


	// 	student.AddPolozeniPredmet(predmet1); // MATII
	void AddPolozeniPredmet(Predmet predmet) {
		// Dodaje novi polozeni predmet u niz
		// Voditi ra훾una da se ne mo탑e prekora훾iti kapacitet niza
		// Voditi ra훾una da se ne moze dodavati isti predmet (istog naziva)	
		
		if (_max == _trenutno) {
			cout << "Student ne moze poloziti vise predmeta" << endl;
			return;
		}

		for (int i = 0; i < _trenutno; i++) // 0 1 
		{
			//    MATII        ==   MATII
			//     char*            char* 
			//   strcmp (  naziv1   ,   naziv2 ) == 0 


			if ( strcmp( predmet._naziv , _polozeni[i]._naziv ) == 0 ) {

				cout << "Odabrani predmet je vec polozeni" << endl;
				return;

			}

		}


		_polozeni[_trenutno] = predmet; // pol[0] = PRII , pol[1] = MATII

		_trenutno++; // 0 --> 1 --> 2 --> 3


	}

};



void main() {


	//Predmet predmet0; // <--- dft. constr.

	Predmet predmet1("Programiranje II", 9, 7); // <--- user-def. constr.
	Predmet predmet2("Matematika II", 6, 4); // <--- user-def. constr.
	Predmet predmet3("Web razvoj i dizajn", 7, 5); // <--- user-def. constr.
	Predmet predmet4("Operativni sistemi", 7, 4); // <--- user-def. constr.

	Student student("Vedad Keskin", 3);

	student.AddPolozeniPredmet(predmet1); // PRII
	student.AddPolozeniPredmet(predmet2); // MATII
	student.AddPolozeniPredmet(predmet2); // MATII
	student.AddPolozeniPredmet(predmet3); // WRD
	student.AddPolozeniPredmet(predmet4); // OS

	Student studentKopija = student;

	Student studentOperatorDodjele;

	studentOperatorDodjele = student;

	
	studentOperatorDodjele.Ispis();


	system("pause>0");
}

