#include <iostream>
using namespace std;

// POKAZIVACI : 

// 1. ALOKACIJA - new 

// ako pravis jednu vrijednost -> ( ) 

// ako pravis vise vrijednosti -> [ ] 

// 2. DEREFERENCIRANJE -> * 

// ako pravis jednu vrijednost -> ( ) -> _ECTS = 000001B50D118280
//                                      *_ECTS = 0

// ako pravis vise vrijednosti -> [ ] -> *_naziv = "N"
//                                    ->  _naziv = "Nema predmeta"

// 3. DESTRUKTOR/DEALOKACIJA

// ako pravis jednu vrijednost -> ( ) delete _ECTS;

// ako pravis vise vrijednosti -> [ ] delete[] _naziv;



class Predmet {
public:           // dft. constr.  //
	//char _naziv[50]; // Nema predmeta //
	char* _naziv;
	int _ocjena;  //      5		   //
	int* _ECTS;	  //      0		   //

	// dft. constr.

	//Predmet() {

	//	_ocjena = 5;

	//	_ECTS = new int(0);

	//	//string dftNaziv1 = "Nema predmeta";
	//	//char dftNaziv2[] = "Nema predmeta"; // 14 \0 null terminator
	//	const char* dftNaziv3 = "Nema predmeta"; // string literal READ ONLY MEM.

	//	int vel = strlen(dftNaziv3) + 1;

	//	_naziv = new char[vel];

	//	strcpy_s(_naziv, vel, dftNaziv3); // 1. gdje 


	//}

	// user-def constr.
	//Predmet predmet1("Programiranje II", 7, 9); // <-- user-def constr.

	Predmet(const char* naziv = "Nema predmeta", int ects = 0, int ocjena = 5) {

		_ocjena = ocjena;

		_ECTS = new int(ects);

		int vel = strlen(naziv) + 1;

		_naziv = new char[vel];

		strcpy_s(_naziv, vel, naziv);

	}

	//Predmet predmetKopija2(predmet1); // copy constr.

	// bez & pravi kopiju
	// sa & salje original
	// const kontanstno -> ne moze se mijenjati

	Predmet(const Predmet& predmet) {

		_ocjena = predmet._ocjena;

		_ECTS = new int(*predmet._ECTS);

		int vel = strlen(predmet._naziv) + 1;

		_naziv = new char[vel];

		strcpy_s(_naziv, vel, predmet._naziv);

	}

	//predmetOperatorDodjele = predmet1; // operator dodjele

	Predmet& operator = (const Predmet& predmet) {

		if (this != &predmet) {

			delete _ECTS;
			delete[] _naziv;

			_ocjena = predmet._ocjena;

			_ECTS = new int(*predmet._ECTS);

			int vel = strlen(predmet._naziv) + 1;

			_naziv = new char[vel];

			strcpy_s(_naziv, vel, predmet._naziv);

		}


		return *this;

	}



	// destructor. 

	// TILDA alt gr + 1 ~

	~Predmet() {

		cout << "DESTRUKTOR SE POZVAO" << endl;

		delete _ECTS;
		_ECTS = nullptr;

		delete[] _naziv;
		_naziv = nullptr;

	}


	void Ispis() {

		cout << "Naziv predmeta: " << _naziv << endl;
		cout << "ECTS predmeta: " << *_ECTS << endl;
		cout << "Ocjena predmeta: " << _ocjena << endl;

	}

	//cout << predmet2;

	friend ostream& operator << (ostream& COUT, const Predmet& predmet) {

		COUT << "Naziv predmeta: " << predmet._naziv << endl;
		COUT << "ECTS predmeta: " << *predmet._ECTS << endl;
		COUT << "Ocjena predmeta: " << predmet._ocjena << endl;

		return COUT;
	}



};





class Student {
	char* _imePrezime;
	Predmet* _polozeni;
	int _trenutno;
	int _max;
public:
	// Kreirati i implementirati
	// 1. Defaultni konstruktor
	// 2. Konstruktor koji prima parametre
	// 3. Konstruktor kopije
	// 4. Operator dodjele
	// 5. Destruktor
	// 6. Ispis ili COUT 
	// 7. Potrebne funkcije



	void AddPolozeniPredmet(Predmet predmet) {
		// Dodaje novi polozeni predmet u niz
		// Voditi ra훾una da se ne mo탑e prekora훾iti kapacitet niza
		// Voditi ra훾una da se ne moze dodavati isti predmet (istog naziva)		        


	}

};



void main() {


	Predmet predmet0; // <-- dft. constr.

	Predmet predmet1("Programiranje II", 7, 5); // <-- user-def constr.
	Predmet predmet2("Matematika II", 4, 6); // <-- user-def constr.
	Predmet predmet3("Web razvoj i dizajn", 5, 7); // <-- user-def constr.

	//Predmet predmetKopija = predmet1;
	//Predmet predmetKopija2(predmet1); // copy constr.

	//Predmet predmetOperatorDodjele; // <-- dft. constr.

	//predmetOperatorDodjele = predmetOperatorDodjele; // operator dodjele


	predmet0.Ispis(); // <-- poziv ispisa
	predmet1.Ispis(); // <-- poziv ispisa

	cout << predmet2;

	//predmet2.Ispis(); // <-- poziv ispisa
	//predmet3.Ispis(); // <-- poziv ispisa
	//predmetOperatorDodjele.Ispis(); // <-- poziv ispisa




	system("pause>0");
}

